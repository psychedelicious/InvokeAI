{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>InvokeAI is an implementation of Stable Diffusion, the open source text-to-image and image-to-image generator. It provides a streamlined process with various new features and options to aid the image generation process. It runs on Windows, Mac and Linux machines, and runs on GPU cards with as little as 4 GB of RAM.</p>"},{"location":"#quick-links","title":"Quick Links","text":"Installation Features Getting Started FAQ Contributing Code and Downloads Bug Reports   Join the Discord Server!"},{"location":"#invokeai-features","title":"InvokeAI Features","text":""},{"location":"#installation","title":"Installation","text":"<ul> <li>Automated Installer</li> <li>Manual Installation</li> <li>Docker Installation</li> </ul>"},{"location":"#the-invokeai-web-interface","title":"The InvokeAI Web Interface","text":"<ul> <li>WebUI overview</li> <li>WebUI hotkey reference guide</li> <li>WebUI Unified Canvas for Img2Img, inpainting and outpainting</li> </ul>"},{"location":"#image-management","title":"Image Management","text":"<ul> <li>Image2Image</li> <li>Adding custom styles and subjects</li> <li>Upscaling and Face Reconstruction</li> <li>Other Features</li> </ul>"},{"location":"#model-management","title":"Model Management","text":"<ul> <li>Installing</li> <li>Model Merging</li> <li>ControlNet Models</li> <li>Style/Subject Concepts and Embeddings</li> <li>Watermarking and the Not Safe for Work (NSFW) Checker</li> </ul>"},{"location":"#prompt-engineering","title":"Prompt Engineering","text":"<ul> <li>Prompt Syntax</li> </ul>"},{"location":"#invokeai-configuration","title":"InvokeAI Configuration","text":"<ul> <li>Guide to InvokeAI Runtime Settings</li> <li>Database Maintenance and other Command Line Utilities</li> </ul>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p>Please check out our  Troubleshooting Guide to get solutions for common installation problems and other issues.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Anyone who wishes to contribute to this project, whether documentation, features, bug fixes, code cleanup, testing, or code reviews, is very much encouraged to do so. </p> <p>Please take a look at our Contribution documentation to learn more about contributing to InvokeAI.  </p>"},{"location":"#contributors","title":"Contributors","text":"<p>This software is a combined effort of various people from across the world. Check out the list of all these amazing people. We thank them for their time, hard work and effort.</p>"},{"location":"#support","title":"Support","text":"<p>For support, please use this repository's GitHub Issues tracking service. Feel free to send me an email if you use and like the script.</p> <p>Original portions of the software are Copyright \u00a9 2022-23 by The InvokeAI Team.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#v235-22-may-2023","title":"v2.3.5 (22 May 2023)","text":"<p>This release (along with the post1 and post2 follow-on releases) expands support for additional LoRA and LyCORIS models, upgrades diffusers versions, and fixes a few bugs.</p>"},{"location":"CHANGELOG/#lora-and-lycoris-support-improvement","title":"LoRA and LyCORIS Support Improvement","text":"<pre><code>A number of LoRA/LyCORIS fine-tune files (those which alter the text encoder as well as the unet model) were not having the desired effect in InvokeAI. This bug has now been fixed. Full documentation of LoRA support is available at InvokeAI LoRA Support.\nPreviously, InvokeAI did not distinguish between LoRA/LyCORIS models based on Stable Diffusion v1.5 vs those based on v2.0 and 2.1, leading to a crash when an incompatible model was loaded. This has now been fixed. In addition, the web pulldown menus for LoRA and Textual Inversion selection have been enhanced to show only those files that are compatible with the currently-selected Stable Diffusion model.\nSupport for the newer LoKR LyCORIS files has been added.\n</code></pre>"},{"location":"CHANGELOG/#library-updates-and-speedreproducibility-advancements","title":"Library Updates and Speed/Reproducibility Advancements","text":"<p>The major enhancement in this version is that NVIDIA users no longer need to decide between speed and reproducibility. Previously, if you activated the Xformers library, you would see improvements in speed and memory usage, but multiple images generated with the same seed and other parameters would be slightly different from each other. This is no longer the case. Relative to 2.3.5 you will see improved performance when running without Xformers, and even better performance when Xformers is activated. In both cases, images generated with the same settings will be identical.</p> <p>Here are the new library versions: Library     Version Torch   2.0.0 Diffusers   0.16.1 Xformers    0.0.19 Compel  1.1.5 Other Improvements</p>"},{"location":"CHANGELOG/#performance-improvements","title":"Performance Improvements","text":"<pre><code>When a model is loaded for the first time, InvokeAI calculates its checksum for incorporation into the PNG metadata. This process could take up to a minute on network-mounted disks and WSL mounts. This release noticeably speeds up the process.\n</code></pre>"},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<pre><code>The \"import models from directory\" and \"import from URL\" functionality in the console-based model installer has now been fixed.\nWhen running the WebUI, we have reduced the number of times that InvokeAI reaches out to HuggingFace to fetch the list of embeddable Textual Inversion models. We have also caught and fixed a problem with the updater not correctly detecting when another instance of the updater is running\n</code></pre>"},{"location":"CHANGELOG/#v234-7-april-2023","title":"v2.3.4 (7 April 2023)","text":"<p>What's New in 2.3.4</p> <p>This features release adds support for LoRA (Low-Rank Adaptation) and LyCORIS (Lora beYond Conventional) models, as well as some minor bug fixes.</p>"},{"location":"CHANGELOG/#lora-and-lycoris-support","title":"LoRA and LyCORIS Support","text":"<p>LoRA files contain fine-tuning weights that enable particular styles, subjects or concepts to be applied to generated images. LyCORIS files are an extended variant of LoRA. InvokeAI supports the most common LoRA/LyCORIS format, which ends in the suffix .safetensors. You will find numerous LoRA and LyCORIS models for download at Civitai, and a small but growing number at Hugging Face. Full documentation of LoRA support is available at InvokeAI LoRA Support.( Pre-release note: this page will only be available after release)</p> <p>To use LoRA/LyCORIS models in InvokeAI:</p> <pre><code>Download the .safetensors files of your choice and place in /path/to/invokeai/loras. This directory was not present in earlier version of InvokeAI but will be created for you the first time you run the command-line or web client. You can also create the directory manually.\n\nAdd withLora(lora-file,weight) to your prompts. The weight is optional and will default to 1.0. A few examples, assuming that a LoRA file named loras/sushi.safetensors is present:\n</code></pre> <p>family sitting at dinner table eating sushi withLora(sushi,0.9) family sitting at dinner table eating sushi withLora(sushi, 0.75) family sitting at dinner table eating sushi withLora(sushi)</p> <p>Multiple withLora() prompt fragments are allowed. The weight can be arbitrarily large, but the useful range is roughly 0.5 to 1.0. Higher weights make the LoRA's influence stronger. Negative weights are also allowed, which can lead to some interesting effects.</p> <pre><code>Generate as you usually would! If you find that the image is too \"crisp\" try reducing the overall CFG value or reducing individual LoRA weights. As is the case with all fine-tunes, you'll get the best results when running the LoRA on top of the model similar to, or identical with, the one that was used during the LoRA's training. Don't try to load a SD 1.x-trained LoRA into a SD 2.x model, and vice versa. This will trigger a non-fatal error message and generation will not proceed.\n\nYou can change the location of the loras directory by passing the --lora_directory option to `invokeai.\n</code></pre>"},{"location":"CHANGELOG/#new-webui-lora-and-textual-inversion-buttons","title":"New WebUI LoRA and Textual Inversion Buttons","text":"<p>This version adds two new web interface buttons for inserting LoRA and Textual Inversion triggers into the prompt as shown in the screenshot below.</p> <p>Clicking on one or the other of the buttons will bring up a menu of available LoRA/LyCORIS or Textual Inversion trigger terms. Select a menu item to insert the properly-formatted withLora() or  prompt fragment into the positive prompt. The number in parentheses indicates the number of trigger terms currently in the prompt. You may click the button again and deselect the LoRA or trigger to remove it from the prompt, or simply edit the prompt directly. <p>Currently terms are inserted into the positive prompt textbox only. However, some textual inversion embeddings are designed to be used with negative prompts. To move a textual inversion trigger into the negative prompt, simply cut and paste it.</p> <p>By default the Textual Inversion menu only shows locally installed models found at startup time in /path/to/invokeai/embeddings. However, InvokeAI has the ability to dynamically download and install additional Textual Inversion embeddings from the HuggingFace Concepts Library. You may choose to display the most popular of these (with five or more likes) in the Textual Inversion menu by going to Settings and turning on \"Show Textual Inversions from HF Concepts Library.\" When this option is activated, the locally-installed TI embeddings will be shown first, followed by uninstalled terms from Hugging Face. See The Hugging Face Concepts Library and Importing Textual Inversion files for more information.</p>"},{"location":"CHANGELOG/#minor-features-and-fixes","title":"Minor features and fixes","text":"<p>This release changes model switching behavior so that the command-line and Web UIs save the last model used and restore it the next time they are launched. It also improves the behavior of the installer so that the pip utility is kept up to date.</p>"},{"location":"CHANGELOG/#known-bugs-in-234","title":"Known Bugs in 2.3.4","text":"<p>These are known bugs in the release.</p> <pre><code>The Ancestral DPMSolverMultistepScheduler (k_dpmpp_2a) sampler is not yet implemented for diffusers models and will disappear from the WebUI Sampler menu when a diffusers model is selected.\nWindows Defender will sometimes raise Trojan or backdoor alerts for the codeformer.pth face restoration model, as well as the CIDAS/clipseg and runwayml/stable-diffusion-v1.5 models. These are false positives and can be safely ignored. InvokeAI performs a malware scan on all models as they are loaded. For additional security, you should use safetensors models whenever they are available.\n</code></pre>"},{"location":"CHANGELOG/#v233-28-march-2023","title":"v2.3.3 (28 March 2023)","text":"<p>This is a bugfix and minor feature release.</p>"},{"location":"CHANGELOG/#bugfixes","title":"Bugfixes","text":"<p>Since version 2.3.2 the following bugs have been fixed: Bugs</p> <pre><code>When using legacy checkpoints with an external VAE, the VAE file is now scanned for malware prior to loading. Previously only the main model weights file was scanned.\nTextual inversion will select an appropriate batchsize based on whether xformers is active, and will default to xformers enabled if the library is detected.\nThe batch script log file names have been fixed to be compatible with Windows.\nOccasional corruption of the .next_prefix file (which stores the next output file name in sequence) on Windows systems is now detected and corrected.\nSupport loading of legacy config files that have no personalization (textual inversion) section.\nAn infinite loop when opening the developer's console from within the invoke.sh script has been corrected.\nDocumentation fixes, including a recipe for detecting and fixing problems with the AMD GPU ROCm driver.\n</code></pre> <p>Enhancements</p> <pre><code>It is now possible to load and run several community-contributed SD-2.0 based models, including the often-requested \"Illuminati\" model.\nThe \"NegativePrompts\" embedding file, and others like it, can now be loaded by placing it in the InvokeAI embeddings directory.\nIf no --model is specified at launch time, InvokeAI will remember the last model used and restore it the next time it is launched.\nOn Linux systems, the invoke.sh launcher now uses a prettier console-based interface. To take advantage of it, install the dialog package using your package manager (e.g. sudo apt install dialog).\nWhen loading legacy models (safetensors/ckpt) you can specify a custom config file and/or a VAE by placing like-named files in the same directory as the model following this example:\n</code></pre> <p>my-favorite-model.ckpt my-favorite-model.yaml my-favorite-model.vae.pt      # or my-favorite-model.vae.safetensors</p>"},{"location":"CHANGELOG/#known-bugs-in-233","title":"Known Bugs in 2.3.3","text":"<p>These are known bugs in the release.</p> <pre><code>The Ancestral DPMSolverMultistepScheduler (k_dpmpp_2a) sampler is not yet implemented for diffusers models and will disappear from the WebUI Sampler menu when a diffusers model is selected.\nWindows Defender will sometimes raise Trojan or backdoor alerts for the codeformer.pth face restoration model, as well as the CIDAS/clipseg and runwayml/stable-diffusion-v1.5 models. These are false positives and can be safely ignored. InvokeAI performs a malware scan on all models as they are loaded. For additional security, you should use safetensors models whenever they are available.\n</code></pre>"},{"location":"CHANGELOG/#v232-11-march-2023","title":"v2.3.2 (11 March 2023)","text":"<p>This is a bugfix and minor feature release.</p>"},{"location":"CHANGELOG/#bugfixes_1","title":"Bugfixes","text":"<p>Since version 2.3.1 the following bugs have been fixed:</p> <pre><code>Black images appearing for potential NSFW images when generating with legacy checkpoint models and both --no-nsfw_checker and --ckpt_convert turned on.\nBlack images appearing when generating from models fine-tuned on Stable-Diffusion-2-1-base. When importing V2-derived models, you may be asked to select whether the model was derived from a \"base\" model (512 pixels) or the 768-pixel SD-2.1 model.\nThe \"Use All\" button was not restoring the Hi-Res Fix setting on the WebUI\nWhen using the model installer console app, models failed to import correctly when importing from directories with spaces in their names. A similar issue with the output directory was also fixed.\nCrashes that occurred during model merging.\nRestore previous naming of Stable Diffusion base and 768 models.\nUpgraded to latest versions of diffusers, transformers, safetensors and accelerate libraries upstream. We hope that this will fix the assertion NDArray &gt; 2**32 issue that MacOS users have had when generating images larger than 768x768 pixels. Please report back.\n</code></pre> <p>As part of the upgrade to diffusers, the location of the diffusers-based models has changed from models/diffusers to models/hub. When you launch InvokeAI for the first time, it will prompt you to OK a one-time move. This should be quick and harmless, but if you have modified your models/diffusers directory in some way, for example using symlinks, you may wish to cancel the migration and make appropriate adjustments. New \"Invokeai-batch\" script</p>"},{"location":"CHANGELOG/#invoke-ai-batch","title":"Invoke AI Batch","text":"<p>2.3.2 introduces a new command-line only script called invokeai-batch that can be used to generate hundreds of images from prompts and settings that vary systematically. This can be used to try the same prompt across multiple combinations of models, steps, CFG settings and so forth. It also allows you to template prompts and generate a combinatorial list like:</p> <p>a shack in the mountains, photograph a shack in the mountains, watercolor a shack in the mountains, oil painting a chalet in the mountains, photograph a chalet in the mountains, watercolor a chalet in the mountains, oil painting a shack in the desert, photograph ...</p> <p>If you have a system with multiple GPUs, or a single GPU with lots of VRAM, you can parallelize generation across the combinatorial set, reducing wait times and using your system's resources efficiently (make sure you have good GPU cooling).</p> <p>To try invokeai-batch out. Launch the \"developer's console\" using the invoke launcher script, or activate the invokeai virtual environment manually. From the console, give the command invokeai-batch --help in order to learn how the script works and create your first template file for dynamic prompt generation.</p>"},{"location":"CHANGELOG/#known-bugs-in-232","title":"Known Bugs in 2.3.2","text":"<p>These are known bugs in the release.</p> <pre><code>The Ancestral DPMSolverMultistepScheduler (k_dpmpp_2a) sampler is not yet implemented for diffusers models and will disappear from the WebUI Sampler menu when a diffusers model is selected.\nWindows Defender will sometimes raise a Trojan alert for the codeformer.pth face restoration model. As far as we have been able to determine, this is a false positive and can be safely whitelisted.\n</code></pre>"},{"location":"CHANGELOG/#v231-22-february-2023","title":"v2.3.1 (22 February 2023)","text":"<p>This is primarily a bugfix release, but it does provide several new features that will improve the user experience.</p>"},{"location":"CHANGELOG/#enhanced-support-for-model-management","title":"Enhanced support for model management","text":"<p>InvokeAI now makes it convenient to add, remove and modify models. You can individually import models that are stored on your local system, scan an entire folder and its subfolders for models and import them automatically, and even directly import models from the internet by providing their download URLs. You also have the option of designating a local folder to scan for new models each time InvokeAI is restarted.</p> <p>There are three ways of accessing the model management features:</p> <pre><code>From the WebUI, click on the cube to the right of the model selection menu. This will bring up a form that allows you to import models individually from your local disk or scan a directory for models to import.\n\nUsing the Model Installer App\n</code></pre> <p>Choose option (5) download and install models from the invoke launcher script to start a new console-based application for model management. You can use this to select from a curated set of starter models, or import checkpoint, safetensors, and diffusers models from a local disk or the internet. The example below shows importing two checkpoint URLs from popular SD sites and a HuggingFace diffusers model using its Repository ID. It also shows how to designate a folder to be scanned at startup time for new models to import.</p> <p>Command-line users can start this app using the command invokeai-model-install.</p> <pre><code>Using the Command Line Client (CLI)\n</code></pre> <p>The !install_model and !convert_model commands have been enhanced to allow entering of URLs and local directories to scan and import. The first command installs .ckpt and .safetensors files as-is. The second one converts them into the faster diffusers format before installation.</p> <p>Internally InvokeAI is able to probe the contents of a .ckpt or .safetensors file to distinguish among v1.x, v2.x and inpainting models. This means that you do not need to include \"inpaint\" in your model names to use an inpainting model. Note that Stable Diffusion v2.x models will be autoconverted into a diffusers model the first time you use it.</p> <p>Please see INSTALLING MODELS for more information on model management.</p>"},{"location":"CHANGELOG/#an-improved-installer-experience","title":"An Improved Installer Experience","text":"<p>The installer now launches a console-based UI for setting and changing commonly-used startup options:</p> <p>After selecting the desired options, the installer installs several support models needed by InvokeAI's face reconstruction and upscaling features and then launches the interface for selecting and installing models shown earlier. At any time, you can edit the startup options by launching invoke.sh/invoke.bat and entering option (6) change InvokeAI startup options</p> <p>Command-line users can launch the new configure app using invokeai-configure.</p> <p>This release also comes with a renewed updater. To do an update without going through a whole reinstallation, launch invoke.sh or invoke.bat and choose option (9) update InvokeAI . This will bring you to a screen that prompts you to update to the latest released version, to the most current development version, or any released or unreleased version you choose by selecting the tag or branch of the desired version.</p> <p>Command-line users can run this interface by typing invokeai-configure</p>"},{"location":"CHANGELOG/#image-symmetry-options","title":"Image Symmetry Options","text":"<p>There are now features to generate horizontal and vertical symmetry during generation. The way these work is to wait until a selected step in the generation process and then to turn on a mirror image effect. In addition to generating some cool images, you can also use this to make side-by-side comparisons of how an image will look with more or fewer steps. Access this option from the WebUI by selecting Symmetry from the image generation settings, or within the CLI by using the options --h_symmetry_time_pct and --v_symmetry_time_pct (these can be abbreviated to --h_sym and --v_sym like all other options).</p>"},{"location":"CHANGELOG/#a-new-unified-canvas-look","title":"A New Unified Canvas Look","text":"<p>This release introduces a beta version of the WebUI Unified Canvas. To try it out, open up the settings dialogue in the WebUI (gear icon) and select Use Canvas Beta Layout:</p> <p>Refresh the screen and go to to Unified Canvas (left side of screen, third icon from the top). The new layout is designed to provide more space to work in and to keep the image controls close to the image itself:</p> <p>Model conversion and merging within the WebUI</p> <p>The WebUI now has an intuitive interface for model merging, as well as for permanent conversion of models from legacy .ckpt/.safetensors formats into diffusers format. These options are also available directly from the invoke.sh/invoke.bat scripts. An easier way to contribute translations to the WebUI</p> <p>We have migrated our translation efforts to Weblate, a FOSS translation product. Maintaining the growing project's translations is now far simpler for the maintainers and community. Please review our brief translation guide for more information on how to contribute. Numerous internal bugfixes and performance issues</p>"},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<p>This releases quashes multiple bugs that were reported in 2.3.0. Major internal changes include upgrading to diffusers 0.13.0, and using the compel library for prompt parsing. See Detailed Change Log for a detailed list of bugs caught and squished. Summary of InvokeAI command line scripts (all accessible via the launcher menu) Command     Description invokeai    Command line interface invokeai --web  Web interface invokeai-model-install  Model installer with console forms-based front end invokeai-ti --gui   Textual inversion, with a console forms-based front end invokeai-merge --gui    Model merging, with a console forms-based front end invokeai-configure  Startup configuration; can also be used to reinstall support models invokeai-update     InvokeAI software updater</p>"},{"location":"CHANGELOG/#known-bugs-in-231","title":"Known Bugs in 2.3.1","text":"<p>These are known bugs in the release.     MacOS users generating 768x768 pixel images or greater using diffusers models may experience a hard crash with assertion NDArray &gt; 2**32 This appears to be an issu...</p>"},{"location":"CHANGELOG/#v230-15-january-2023","title":"v2.3.0 (15 January 2023)","text":"<p>**Transition to diffusers</p> <p>Version 2.3 provides support for both the traditional <code>.ckpt</code> weight checkpoint files as well as the HuggingFace <code>diffusers</code> format. This introduces several changes you should know about.</p> <ol> <li>The models.yaml format has been updated. There are now two    different type of configuration stanza. The traditional ckpt    one will look like this, with a <code>format</code> of <code>ckpt</code> and a    <code>weights</code> field that points to the absolute or ROOTDIR-relative    location of the ckpt file.</li> </ol> <pre><code>inpainting-1.5:\n   description: RunwayML SD 1.5 model optimized for inpainting (4.27 GB)\n   repo_id: runwayml/stable-diffusion-inpainting\n   format: ckpt\n   width: 512\n   height: 512\n   weights: models/ldm/stable-diffusion-v1/sd-v1-5-inpainting.ckpt\n   config: configs/stable-diffusion/v1-inpainting-inference.yaml\n   vae: models/ldm/stable-diffusion-v1/vae-ft-mse-840000-ema-pruned.ckpt\n</code></pre> <p>A configuration stanza for a diffusers model hosted at HuggingFace will look like this,   with a <code>format</code> of <code>diffusers</code> and a <code>repo_id</code> that points to the   repository ID of the model on HuggingFace:</p> <pre><code>stable-diffusion-2.1:\ndescription: Stable Diffusion version 2.1 diffusers model (5.21 GB)\nrepo_id: stabilityai/stable-diffusion-2-1\nformat: diffusers\n</code></pre> <p>A configuration stanza for a diffuers model stored locally should   look like this, with a <code>format</code> of <code>diffusers</code>, but a <code>path</code> field   that points at the directory that contains <code>model_index.json</code>:</p> <pre><code>waifu-diffusion:\ndescription: Latest waifu diffusion 1.4\nformat: diffusers\npath: models/diffusers/hakurei-haifu-diffusion-1.4\n</code></pre> <ol> <li>In order of precedence, InvokeAI will now use HF_HOME, then    XDG_CACHE_HOME, then finally default to <code>ROOTDIR/models</code> to    store HuggingFace diffusers models.</li> </ol> <p>Consequently, the format of the models directory has changed to    mimic the HuggingFace cache directory. When HF_HOME and XDG_HOME    are not set, diffusers models are now automatically downloaded    and retrieved from the directory <code>ROOTDIR/models/diffusers</code>,    while other models are stored in the directory    <code>ROOTDIR/models/hub</code>. This organization is the same as that used    by HuggingFace for its cache management.</p> <p>This allows you to share diffusers and ckpt model files easily with    other machine learning applications that use the HuggingFace    libraries. To do this, set the environment variable HF_HOME    before starting up InvokeAI to tell it what directory to    cache models in. To tell InvokeAI to use the standard HuggingFace    cache directory, you would set HF_HOME like this (Linux/Mac):</p> <p><code>export HF_HOME=~/.cache/huggingface</code></p> <p>Both HuggingFace and InvokeAI will fall back to the XDG_CACHE_HOME    environment variable if HF_HOME is not set; this path    takes precedence over <code>ROOTDIR/models</code> to allow for the same sharing    with other machine learning applications that use HuggingFace    libraries.</p> <ol> <li> <p>If you upgrade to InvokeAI 2.3.* from an earlier version, there    will be a one-time migration from the old models directory format    to the new one. You will see a message about this the first time    you start <code>invoke.py</code>.</p> </li> <li> <p>Both the front end back ends of the model manager have been    rewritten to accommodate diffusers. You can import models using    their local file path, using their URLs, or their HuggingFace    repo_ids. On the command line, all these syntaxes work:</p> </li> </ol> <pre><code>!import_model stabilityai/stable-diffusion-2-1-base\n!import_model /opt/sd-models/sd-1.4.ckpt\n!import_model https://huggingface.co/Fictiverse/Stable_Diffusion_PaperCut_Model/blob/main/PaperCut_v1.ckpt\n</code></pre> <p>**KNOWN BUGS (15 January 2023)</p> <ol> <li> <p>On CUDA systems, the 768 pixel stable-diffusion-2.0 and    stable-diffusion-2.1 models can only be run as <code>diffusers</code> models    when the <code>xformer</code> library is installed and configured. Without    <code>xformers</code>, InvokeAI returns black images.</p> </li> <li> <p>Inpainting and outpainting have regressed in quality.</p> </li> </ol> <p>Both these issues are being actively worked on.</p>"},{"location":"CHANGELOG/#v224-11-december-2022","title":"v2.2.4 (11 December 2022)","text":"<p>the <code>invokeai</code> directory</p> <p>Previously there were two directories to worry about, the directory that contained the InvokeAI source code and the launcher scripts, and the <code>invokeai</code> directory that contained the models files, embeddings, configuration and outputs. With the 2.2.4 release, this dual system is done away with, and everything, including the <code>invoke.bat</code> and <code>invoke.sh</code> launcher scripts, now live in a directory named <code>invokeai</code>. By default this directory is located in your home directory (e.g. <code>\\Users\\yourname</code> on Windows), but you can select where it goes at install time.</p> <p>After installation, you can delete the install directory (the one that the zip file creates when it unpacks). Do not delete or move the <code>invokeai</code> directory!</p> <p>Initialization file <code>invokeai/invokeai.init</code></p> <p>You can place frequently-used startup options in this file, such as the default number of steps or your preferred sampler. To keep everything in one place, this file has now been moved into the <code>invokeai</code> directory and is named <code>invokeai.init</code>.</p> <p>To update from Version 2.2.3</p> <p>The easiest route is to download and unpack one of the 2.2.4 installer files. When it asks you for the location of the <code>invokeai</code> runtime directory, respond with the path to the directory that contains your 2.2.3 <code>invokeai</code>. That is, if <code>invokeai</code> lives at <code>C:\\Users\\fred\\invokeai</code>, then answer with <code>C:\\Users\\fred</code> and answer \"Y\" when asked if you want to reuse the directory.</p> <p>The <code>update.sh</code> (<code>update.bat</code>) script that came with the 2.2.3 source installer does not know about the new directory layout and won't be fully functional.</p> <p>To update to 2.2.5 (and beyond) there's now an update path</p> <p>As they become available, you can update to more recent versions of InvokeAI using an <code>update.sh</code> (<code>update.bat</code>) script located in the <code>invokeai</code> directory. Running it without any arguments will install the most recent version of InvokeAI. Alternatively, you can get set releases by running the <code>update.sh</code> script with an argument in the command shell. This syntax accepts the path to the desired release's zip file, which you can find by clicking on the green \"Code\" button on this repository's home page.</p> <p>Other 2.2.4 Improvements</p> <ul> <li>Fix InvokeAI GUI initialization by @addianto in #1687</li> <li>fix link in documentation by @lstein in #1728</li> <li>Fix broken link by @ShawnZhong in #1736</li> <li>Remove reference to binary installer by @lstein in #1731</li> <li>documentation fixes for 2.2.3 by @lstein in #1740</li> <li>Modify installer links to point closer to the source installer by @ebr in   #1745</li> <li>add documentation warning about 1650/60 cards by @lstein in #1753</li> <li>Fix Linux source URL in installation docs by @andybearman in #1756</li> <li>Make install instructions discoverable in readme by @damian0815 in #1752</li> <li>typo fix by @ofirkris in #1755</li> <li>Non-interactive model download (support HUGGINGFACE_TOKEN) by @ebr in #1578</li> <li>fix(srcinstall): shell installer - cp scripts instead of linking by @tildebyte   in #1765</li> <li>stability and usage improvements to binary &amp; source installers by @lstein in   #1760</li> <li>fix off-by-one bug in cross-attention-control by @damian0815 in #1774</li> <li>Eventually update APP_VERSION to 2.2.3 by @spezialspezial in #1768</li> <li>invoke script cds to its location before running by @lstein in #1805</li> <li>Make PaperCut and VoxelArt models load again by @lstein in #1730</li> <li>Fix --embedding_directory / --embedding_path not working by @blessedcoolant in   #1817</li> <li>Clean up readme by @hipsterusername in #1820</li> <li>Optimized Docker build with support for external working directory by @ebr in   #1544</li> <li>disable pushing the cloud container by @mauwii in #1831</li> <li>Fix docker push github action and expand with additional metadata by @ebr in   #1837</li> <li>Fix Broken Link To Notebook by @VedantMadane in #1821</li> <li>Account for flat models by @spezialspezial in #1766</li> <li>Update invoke.bat.in isolate environment variables by @lynnewu in #1833</li> <li>Arch Linux Specific PatchMatch Instructions &amp; fixing conda install on linux by   @SammCheese in #1848</li> <li>Make force free GPU memory work in img2img by @addianto in #1844</li> <li>New installer by @lstein</li> </ul>"},{"location":"CHANGELOG/#v223-2-december-2022","title":"v2.2.3 (2 December 2022)","text":"<p>Note</p> <p>This point release removes references to the binary installer from the installation guide. The binary installer is not stable at the current time. First time users are encouraged to use the \"source\" installer as described in Installing InvokeAI with the Source Installer</p> <p>With InvokeAI 2.2, this project now provides enthusiasts and professionals a robust workflow solution for creating AI-generated and human facilitated compositions. Additional enhancements have been made as well, improving safety, ease of use, and installation.</p> <p>Optimized for efficiency, InvokeAI needs only ~3.5GB of VRAM to generate a 512x768 image (and less for smaller images), and is compatible with Windows/Linux/Mac (M1 &amp; M2).</p> <p>You can see the release video here, which introduces the main WebUI enhancement for version 2.2 - The Unified Canvas. This new workflow is the biggest enhancement added to the WebUI to date, and unlocks a stunning amount of potential for users to create and iterate on their creations. The following sections describe what's new for InvokeAI.</p>"},{"location":"CHANGELOG/#v222-30-november-2022","title":"v2.2.2 (30 November 2022)","text":"<p>Note</p> <p>The binary installer is not ready for prime time. First time users are recommended to install via the \"source\" installer accessible through the links at the bottom of this page.****</p> <p>With InvokeAI 2.2, this project now provides enthusiasts and professionals a robust workflow solution for creating AI-generated and human facilitated compositions. Additional enhancements have been made as well, improving safety, ease of use, and installation.</p> <p>Optimized for efficiency, InvokeAI needs only ~3.5GB of VRAM to generate a 512x768 image (and less for smaller images), and is compatible with Windows/Linux/Mac (M1 &amp; M2).</p> <p>You can see the release video here, which introduces the main WebUI enhancement for version 2.2 - The Unified Canvas. This new workflow is the biggest enhancement added to the WebUI to date, and unlocks a stunning amount of potential for users to create and iterate on their creations. The following sections describe what's new for InvokeAI.</p>"},{"location":"CHANGELOG/#v220-2-december-2022","title":"v2.2.0 (2 December 2022)","text":"<p>With InvokeAI 2.2, this project now provides enthusiasts and professionals a robust workflow solution for creating AI-generated and human facilitated compositions. Additional enhancements have been made as well, improving safety, ease of use, and installation.</p> <p>Optimized for efficiency, InvokeAI needs only ~3.5GB of VRAM to generate a 512x768 image (and less for smaller images), and is compatible with Windows/Linux/Mac (M1 &amp; M2).</p> <p>You can see the release video here, which introduces the main WebUI enhancement for version 2.2 - The Unified Canvas. This new workflow is the biggest enhancement added to the WebUI to date, and unlocks a stunning amount of potential for users to create and iterate on their creations. The following sections describe what's new for InvokeAI.</p>"},{"location":"CHANGELOG/#v213-13-november-2022","title":"v2.1.3 (13 November 2022)","text":"<ul> <li>A choice of installer scripts that automate installation and configuration.   See   Installation.</li> <li>A streamlined manual installation process that works for both Conda and   PIP-only installs. See   Manual Installation.</li> <li>The ability to save frequently-used startup options (model to load, steps,   sampler, etc) in a <code>.invokeai</code> file. See   Client</li> <li>Support for AMD GPU cards (non-CUDA) on Linux machines.</li> <li>Multiple bugs and edge cases squashed.</li> </ul>"},{"location":"CHANGELOG/#v210-2-november-2022","title":"v2.1.0 (2 November 2022)","text":"<ul> <li>update mac instructions to use invokeai for env name by @willwillems in #1030</li> <li>Update .gitignore by @blessedcoolant in #1040</li> <li>reintroduce fix for m1 from #579 missing after merge by @skurovec in #1056</li> <li>Update Stable_Diffusion_AI_Notebook.ipynb (Take 2) by @ChloeL19 in #1060</li> <li>Print out the device type which is used by @manzke in #1073</li> <li>Hires Addition by @hipsterusername in #1063</li> <li>fix for \"1 leaked semaphore objects to clean up at shutdown\" on M1 by   @skurovec in #1081</li> <li>Forward dream.py to invoke.py using the same interpreter, add deprecation   warning by @db3000 in #1077</li> <li>fix noisy images at high step counts by @lstein in #1086</li> <li>Generalize facetool strength argument by @db3000 in #1078</li> <li>Enable fast switching among models at the invoke&gt; command line by @lstein in   #1066</li> <li>Fix Typo, committed changing ldm environment to invokeai by @jdries3 in #1095</li> <li>Update generate.py by @unreleased in #1109</li> <li>Update 'ldm' env to 'invokeai' in troubleshooting steps by @19wolf in #1125</li> <li>Fixed documentation typos and resolved merge conflicts by @rupeshs in #1123</li> <li>Fix broken doc links, fix malaprop in the project subtitle by @majick in #1131</li> <li>Only output facetool parameters if enhancing faces by @db3000 in #1119</li> <li>Update gitignore to ignore codeformer weights at new location by   @spezialspezial in #1136</li> <li>fix links to point to invoke-ai.github.io #1117 by @mauwii in #1143</li> <li>Rework-mkdocs by @mauwii in #1144</li> <li>add option to CLI and pngwriter that allows user to set PNG compression level   by @lstein in #1127</li> <li>Fix img2img DDIM index out of bound by @wfng92 in #1137</li> <li>Fix gh actions by @mauwii in #1128</li> <li>update mac instructions to use invokeai for env name by @willwillems in #1030</li> <li>Update .gitignore by @blessedcoolant in #1040</li> <li>reintroduce fix for m1 from #579 missing after merge by @skurovec in #1056</li> <li>Update Stable_Diffusion_AI_Notebook.ipynb (Take 2) by @ChloeL19 in #1060</li> <li>Print out the device type which is used by @manzke in #1073</li> <li>Hires Addition by @hipsterusername in #1063</li> <li>fix for \"1 leaked semaphore objects to clean up at shutdown\" on M1 by   @skurovec in #1081</li> <li>Forward dream.py to invoke.py using the same interpreter, add deprecation   warning by @db3000 in #1077</li> <li>fix noisy images at high step counts by @lstein in #1086</li> <li>Generalize facetool strength argument by @db3000 in #1078</li> <li>Enable fast switching among models at the invoke&gt; command line by @lstein in   #1066</li> <li>Fix Typo, committed changing ldm environment to invokeai by @jdries3 in #1095</li> <li>Fixed documentation typos and resolved merge conflicts by @rupeshs in #1123</li> <li>Only output facetool parameters if enhancing faces by @db3000 in #1119</li> <li>add option to CLI and pngwriter that allows user to set PNG compression level   by @lstein in #1127</li> <li>Fix img2img DDIM index out of bound by @wfng92 in #1137</li> <li>Add text prompt to inpaint mask support by @lstein in #1133</li> <li>Respect http[s] protocol when making socket.io middleware by @damian0815 in   #976</li> <li>WebUI: Adds Codeformer support by @psychedelicious in #1151</li> <li>Skips normalizing prompts for web UI metadata by @psychedelicious in #1165</li> <li>Add Asymmetric Tiling by @carson-katri in #1132</li> <li>Web UI: Increases max CFG Scale to 200 by @psychedelicious in #1172</li> <li>Corrects color channels in face restoration; Fixes #1167 by @psychedelicious   in #1175</li> <li>Flips channels using array slicing instead of using OpenCV by @psychedelicious   in #1178</li> <li>Fix typo in docs: s/Formally/Formerly by @noodlebox in #1176</li> <li>fix clipseg loading problems by @lstein in #1177</li> <li>Correct color channels in upscale using array slicing by @wfng92 in #1181</li> <li>Web UI: Filters existing images when adding new images; Fixes #1085 by   @psychedelicious in #1171</li> <li>fix a number of bugs in textual inversion by @lstein in #1190</li> <li>Improve !fetch, add !replay command by @ArDiouscuros in #882</li> <li>Fix generation of image with s&gt;1000 by @holstvoogd in #951</li> <li>Web UI: Gallery improvements by @psychedelicious in #1198</li> <li>Update CLI.md by @krummrey in #1211</li> <li>outcropping improvements by @lstein in #1207</li> <li>add support for loading VAE autoencoders by @lstein in #1216</li> <li>remove duplicate fix_func for MPS by @wfng92 in #1210</li> <li>Metadata storage and retrieval fixes by @lstein in #1204</li> <li>nix: add shell.nix file by @Cloudef in #1170</li> <li>Web UI: Changes vite dist asset paths to relative by @psychedelicious in #1185</li> <li>Web UI: Removes isDisabled from PromptInput by @psychedelicious in #1187</li> <li>Allow user to generate images with initial noise as on M1 / mps system by   @ArDiouscuros in #981</li> <li>feat: adding filename format template by @plucked in #968</li> <li>Web UI: Fixes broken bundle by @psychedelicious in #1242</li> <li>Support runwayML custom inpainting model by @lstein in #1243</li> <li>Update IMG2IMG.md by @talitore in #1262</li> <li>New dockerfile - including a build- and a run- script as well as a GH-Action   by @mauwii in #1233</li> <li>cut over from karras to model noise schedule for higher steps by @lstein in   #1222</li> <li>Prompt tweaks by @lstein in #1268</li> <li>Outpainting implementation by @Kyle0654 in #1251</li> <li>fixing aspect ratio on hires by @tjennings in #1249</li> <li>Fix-build-container-action by @mauwii in #1274</li> <li>handle all unicode characters by @damian0815 in #1276</li> <li>adds models.user.yml to .gitignore by @JakeHL in #1281</li> <li>remove debug branch, set fail-fast to false by @mauwii in #1284</li> <li>Protect-secrets-on-pr by @mauwii in #1285</li> <li>Web UI: Adds initial inpainting implementation by @psychedelicious in #1225</li> <li>fix environment-mac.yml - tested on x64 and arm64 by @mauwii in #1289</li> <li>Use proper authentication to download model by @mauwii in #1287</li> <li>Prevent indexing error for mode RGB by @spezialspezial in #1294</li> <li>Integrate sd-v1-5 model into test matrix (easily expandable), remove   unecesarry caches by @mauwii in #1293</li> <li>add --no-interactive to configure_invokeai step by @mauwii in #1302</li> <li>1-click installer and updater. Uses micromamba to install git and conda into a   contained environment (if necessary) before running the normal installation   script by @cmdr2 in #1253</li> <li>configure_invokeai.py script downloads the weight files by @lstein in #1290</li> </ul>"},{"location":"CHANGELOG/#v201-13-october-2022","title":"v2.0.1 (13 October 2022)","text":"<ul> <li>fix noisy images at high step count when using k* samplers</li> <li>dream.py script now calls invoke.py module directly rather than via a new   python process (which could break the environment)</li> </ul>"},{"location":"CHANGELOG/#v200-9-october-2022","title":"v2.0.0 (9 October 2022)","text":"<ul> <li><code>dream.py</code> script renamed <code>invoke.py</code>. A <code>dream.py</code> script wrapper remains for   backward compatibility.</li> <li>Completely new WebGUI - launch with <code>python3 scripts/invoke.py --web</code></li> <li>img2img runs on all k* samplers</li> <li>Support for   negative prompts</li> <li>Support for CodeFormer face reconstruction</li> <li>Support for Textual Inversion on Macintoshes</li> <li>Support in both WebGUI and CLI for   post-processing of previously-generated images   using facial reconstruction, ESRGAN upscaling, outcropping (similar to DALL-E   infinite canvas), and \"embiggen\" upscaling. See the <code>!fix</code> command.</li> <li>New <code>--hires</code> option on <code>invoke&gt;</code> line allows   larger images to be created without duplicating elements,   at the cost of some performance.</li> <li>New <code>--perlin</code> and <code>--threshold</code> options allow you to add and control   variation during image generation (see   Thresholding and Perlin Noise Initialization)</li> <li>Extensive metadata now written into PNG files, allowing reliable regeneration   of images and tweaking of previous settings.</li> <li>Command-line completion in <code>invoke.py</code> now works on Windows, Linux and Mac   platforms.</li> <li>Improved command-line completion behavior New commands   added:</li> <li>List command-line history with <code>!history</code></li> <li>Search command-line history with <code>!search</code></li> <li>Clear history with <code>!clear</code></li> <li>Deprecated <code>--full_precision</code> / <code>-F</code>. Simply omit it and <code>invoke.py</code> will auto   configure. To switch away from auto use the new flag like   <code>--precision=float32</code>.</li> </ul>"},{"location":"CHANGELOG/#v114-11-september-2022","title":"v1.14 (11 September 2022)","text":"<ul> <li>Memory optimizations for small-RAM cards. 512x512 now possible on 4 GB GPUs.</li> <li>Full support for Apple hardware with M1 or M2 chips.</li> <li>Add \"seamless mode\" for circular tiling of image. Generates beautiful effects.   (prixt).</li> <li>Inpainting support.</li> <li>Improved web server GUI.</li> <li>Lots of code and documentation cleanups.</li> </ul>"},{"location":"CHANGELOG/#v113-3-september-2022","title":"v1.13 (3 September 2022)","text":"<ul> <li>Support image variations (see VARIATIONS   (Kevin Gibbons and many contributors and   reviewers)</li> <li>Supports a Google Colab notebook for a standalone server running on Google   hardware Arturo Mendivil</li> <li>WebUI supports GFPGAN/ESRGAN facial reconstruction and upscaling   Kevin Gibbons</li> <li>WebUI supports incremental display of in-progress images during generation   Kevin Gibbons</li> <li>A new configuration file scheme that allows new models (including upcoming   stable-diffusion-v1.5) to be added without altering the code.   (David Wager)</li> <li>Can specify --grid on invoke.py command line as the default.</li> <li>Miscellaneous internal bug and stability fixes.</li> <li>Works on M1 Apple hardware.</li> <li>Multiple bug fixes.</li> </ul>"},{"location":"CHANGELOG/#v112-28-august-2022","title":"v1.12 (28 August 2022)","text":"<ul> <li>Improved file handling, including ability to read prompts from standard input.   (kudos to Yunsaki</li> <li>The web server is now integrated with the invoke.py script. Invoke by adding   --web to the invoke.py command arguments.</li> <li>Face restoration and upscaling via GFPGAN and Real-ESGAN are now automatically   enabled if the GFPGAN directory is located as a sibling to Stable Diffusion.   VRAM requirements are modestly reduced. Thanks to both   Blessedcoolant and   Oceanswave for their work on this.</li> <li>You can now swap samplers on the invoke&gt; command line.   Blessedcoolant</li> </ul>"},{"location":"CHANGELOG/#v111-26-august-2022","title":"v1.11 (26 August 2022)","text":"<ul> <li>NEW FEATURE: Support upscaling and face enhancement using the GFPGAN module.   (kudos to Oceanswave</li> <li>You now can specify a seed of -1 to use the previous image's seed, -2 to use   the seed for the image generated before that, etc. Seed memory only extends   back to the previous command, but will work on all images generated with the   -n# switch.</li> <li>Variant generation support temporarily disabled pending more general solution.</li> <li>Created a feature branch named yunsaki-morphing-invoke which adds   experimental support for iteratively modifying the prompt and its parameters.   Please   seePull Request #86 for   a synopsis of how this works. Note that when this feature is eventually added   to the main branch, it will may be modified significantly.</li> </ul>"},{"location":"CHANGELOG/#v110-25-august-2022","title":"v1.10 (25 August 2022)","text":"<ul> <li>A barebones but fully functional interactive web server for online generation   of txt2img and img2img.</li> </ul>"},{"location":"CHANGELOG/#v109-24-august-2022","title":"v1.09 (24 August 2022)","text":"<ul> <li>A new -v option allows you to generate multiple variants of an initial image   in img2img mode. (kudos to Oceanswave.    See this discussion in the PR for examples and details on use)</li> <li>Added ability to personalize text to image generation (kudos to   Oceanswave and   nicolai256)</li> <li>Enabled all of the samplers from k_diffusion</li> </ul>"},{"location":"CHANGELOG/#v108-24-august-2022","title":"v1.08 (24 August 2022)","text":"<ul> <li>Escape single quotes on the invoke&gt; command before trying to parse. This   avoids parse errors.</li> <li>Removed instruction to get Python3.8 as first step in Windows install.   Anaconda3 does it for you.</li> <li>Added bounds checks for numeric arguments that could cause crashes.</li> <li>Cleaned up the copyright and license agreement files.</li> </ul>"},{"location":"CHANGELOG/#v107-23-august-2022","title":"v1.07 (23 August 2022)","text":"<ul> <li>Image filenames will now never fill gaps in the sequence, but will be assigned   the next higher name in the chosen directory. This ensures that the alphabetic   and chronological sort orders are the same.</li> </ul>"},{"location":"CHANGELOG/#v106-23-august-2022","title":"v1.06 (23 August 2022)","text":"<ul> <li>Added weighted prompt support contributed by   xraxra</li> <li>Example of using weighted prompts to tweak a demonic figure contributed by   bmaltais</li> </ul>"},{"location":"CHANGELOG/#v105-22-august-2022-after-the-drop","title":"v1.05 (22 August 2022 - after the drop)","text":"<ul> <li>Filenames now use the following formats: 000010.95183149.png -- Two files   produced by the same command (e.g. -n2), 000010.26742632.png -- distinguished   by a different seed.</li> </ul> <p>000011.455191342.01.png -- Two files produced by the same command using   000011.455191342.02.png -- a batch size&gt;1 (e.g. -b2). They have the same seed.</p> <p>000011.4160627868.grid#1-4.png -- a grid of four images (-g); the whole grid   can be regenerated with the indicated key</p> <ul> <li>It should no longer be possible for one image to overwrite another</li> <li>You can use the \"cd\" and \"pwd\" commands at the invoke&gt; prompt to set and   retrieve the path of the output directory.</li> </ul>"},{"location":"CHANGELOG/#v104-22-august-2022-after-the-drop","title":"v1.04 (22 August 2022 - after the drop)","text":"<ul> <li>Updated README to reflect installation of the released weights.</li> <li>Suppressed very noisy and inconsequential warning when loading the frozen CLIP   tokenizer.</li> </ul>"},{"location":"CHANGELOG/#v103-22-august-2022","title":"v1.03 (22 August 2022)","text":"<ul> <li>The original txt2img and img2img scripts from the CompViz repository have been   moved into a subfolder named \"orig_scripts\", to reduce confusion.</li> </ul>"},{"location":"CHANGELOG/#v102-21-august-2022","title":"v1.02 (21 August 2022)","text":"<ul> <li>A copy of the prompt and all of its switches and options is now stored in the   corresponding image in a tEXt metadata field named \"Dream\". You can read the   prompt using scripts/images2prompt.py, or an image editor that allows you to   explore the full metadata. Please run \"conda env update\" to load the k_lms   dependencies!!</li> </ul>"},{"location":"CHANGELOG/#v101-21-august-2022","title":"v1.01 (21 August 2022)","text":"<ul> <li>added k_lms sampling. Please run \"conda env update\" to load the k_lms   dependencies!!</li> <li>use half precision arithmetic by default, resulting in faster execution and   lower memory requirements Pass argument --full_precision to invoke.py to get   slower but more accurate image generation</li> </ul>"},{"location":"CHANGELOG/#links","title":"Links","text":"<ul> <li>Read Me</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at https://github.com/invoke-ai/InvokeAI/issues.  All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"RELEASE/","title":"Release Process","text":"<p>The app is published in twice, in different build formats.</p> <ul> <li>A PyPI distribution. This includes both a source distribution and built distribution (a wheel). Users install with <code>pip install invokeai</code>. The updater uses this build.</li> <li>An installer on the InvokeAI Releases Page. This is a zip file with install scripts and a wheel. This is only used for new installs.</li> </ul>"},{"location":"RELEASE/#general-prep","title":"General Prep","text":"<p>Make a developer call-out for PRs to merge. Merge and test things out.</p> <p>While the release workflow does not include end-to-end tests, it does pause before publishing so you can download and test the final build.</p>"},{"location":"RELEASE/#release-workflow","title":"Release Workflow","text":"<p>The <code>release.yml</code> workflow runs a number of jobs to handle code checks, tests, build and publish on PyPI.</p> <p>It is triggered on tag push, when the tag matches <code>v*</code>. It doesn't matter if you've prepped a release branch like <code>release/v3.5.0</code> or are releasing from <code>main</code> - it works the same.</p> <p>Because commits are reference-counted, it is safe to create a release branch, tag it, let the workflow run, then delete the branch. So long as the tag exists, that commit will exist.</p>"},{"location":"RELEASE/#triggering-the-workflow","title":"Triggering the Workflow","text":"<p>Run <code>make tag-release</code> to tag the current commit and kick off the workflow.</p> <p>The release may also be run manually.</p>"},{"location":"RELEASE/#workflow-jobs-and-process","title":"Workflow Jobs and Process","text":"<p>The workflow consists of a number of concurrently-run jobs, and two final publish jobs.</p> <p>The publish jobs run if the 5 concurrent jobs all succeed and if/when the publish jobs are approved.</p>"},{"location":"RELEASE/#check-version-job","title":"<code>check-version</code> Job","text":"<p>This job checks that the git ref matches the app version. It matches the ref against the <code>__version__</code> variable in <code>invokeai/version/invokeai_version.py</code>.</p> <p>When the workflow is triggered by tag push, the ref is the tag. If the workflow is run manually, the ref is the target selected from the Use workflow from dropdown.</p> <p>This job uses samuelcolvin/check-python-version.</p> <p>Any valid version specifier works, so long as the tag matches the version. The release workflow works exactly the same for <code>RC</code>, <code>post</code>, <code>dev</code>, etc.</p>"},{"location":"RELEASE/#check-and-test-jobs","title":"Check and Test Jobs","text":"<p>This is our test suite.</p> <ul> <li><code>check-pytest</code>: runs <code>pytest</code> on matrix of platforms</li> <li><code>check-python</code>: runs <code>ruff</code> (format and lint)</li> <li><code>check-frontend</code>: runs <code>prettier</code> (format), <code>eslint</code> (lint), <code>madge</code> (circular refs) and <code>tsc</code> (static type check)</li> </ul> <p>TODO We should add <code>mypy</code> or <code>pyright</code> to the <code>check-python</code> job.</p> <p>TODO We should add an end-to-end test job that generates an image.</p>"},{"location":"RELEASE/#build-job","title":"<code>build</code> Job","text":"<p>This sets up both python and frontend dependencies and builds the python package. Internally, this runs <code>installer/create_installer.sh</code> and uploads two artifacts:</p> <ul> <li><code>dist</code>: the python distribution, to be published on PyPI</li> <li><code>InvokeAI-installer-${VERSION}.zip</code>: the installer to be included in the GitHub release</li> </ul>"},{"location":"RELEASE/#sanity-check-smoke-test","title":"Sanity Check &amp; Smoke Test","text":"<p>At this point, the release workflow pauses (the remaining jobs all require approval).</p> <p>A maintainer should go to the Summary tab of the workflow, download the installer and test it. Ensure the app loads and generates.</p> <p>The same wheel file is bundled in the installer and in the <code>dist</code> artifact, which is uploaded to PyPI. You should end up with the exactly the same installation of the <code>invokeai</code> package from any of these methods.</p>"},{"location":"RELEASE/#pypi-publish-jobs","title":"PyPI Publish Jobs","text":"<p>The publish jobs will skip if any of the previous jobs skip or fail.</p> <p>They use GitHub environments, which are configured as trusted publishers on PyPI.</p> <p>Both jobs require a maintainer to approve them from the workflow's Summary tab.</p> <ul> <li>Click the Review deployments button</li> <li>Select the environment (either <code>testpypi</code> or <code>pypi</code>)</li> <li>Click Approve and deploy</li> </ul> <p>If the version already exists on PyPI, the publish jobs will fail. PyPI only allows a given version to be published once - you cannot change it. If version published on PyPI has a problem, you'll need to \"fail forward\" by bumping the app version and publishing a followup release.</p>"},{"location":"RELEASE/#publish-testpypi-job","title":"<code>publish-testpypi</code> Job","text":"<p>Publishes the distribution on the Test PyPI index, using the <code>testpypi</code> GitHub environment.</p> <p>This job is not required for the production PyPI publish, but included just in case you want to test the PyPI release.</p> <p>If approved and successful, you could try out the test release like this:</p> <pre><code># Create a new virtual environment\npython -m venv ~/.test-invokeai-dist --prompt test-invokeai-dist\n# Install the distribution from Test PyPI\npip install --index-url https://test.pypi.org/simple/ invokeai\n# Run and test the app\ninvokeai-web\n# Cleanup\ndeactivate\nrm -rf ~/.test-invokeai-dist\n</code></pre>"},{"location":"RELEASE/#publish-pypi-job","title":"<code>publish-pypi</code> Job","text":"<p>Publishes the distribution on the production PyPI index, using the <code>pypi</code> GitHub environment.</p>"},{"location":"RELEASE/#publish-the-github-release-with-installer","title":"Publish the GitHub Release with installer","text":"<p>Once the release is published to PyPI, it's time to publish the GitHub release.</p> <ol> <li>Draft a new release on GitHub, choosing the tag that triggered the release.</li> <li>Write the release notes, describing important changes. The Generate release notes button automatically inserts the changelog and new contributors, and you can copy/paste the intro from previous releases.</li> <li>Upload the zip file created in <code>build</code> job into the Assets section of the release notes. You can also upload the zip into the body of the release notes, since it can be hard for users to find the Assets section.</li> <li>Check the Set as a pre-release and Create a discussion for this release checkboxes at the bottom of the release page.</li> <li>Publish the pre-release.</li> <li>Announce the pre-release in Discord.</li> </ol> <p>TODO Workflows can create a GitHub release from a template and upload release assets. One popular action to handle this is ncipollo/release-action. A future enhancement to the release process could set this up.</p>"},{"location":"RELEASE/#manually-running-the-release-workflow","title":"Manually Running the Release Workflow","text":"<p>The release workflow can be run manually. This is useful to get an installer build and test it out without needing to push a tag.</p> <p>When run this way, you'll see Skip code checks checkbox. This allows the workflow to run without the time-consuming 3 code quality check jobs.</p> <p>The publish jobs will skip if the workflow was run manually.</p>"},{"location":"contributing/ARCHITECTURE/","title":"Invoke.AI Architecture","text":"<pre><code>flowchart TB\n\n  subgraph apps[Applications]\n    webui[WebUI]\n    cli[CLI]\n\n  subgraph webapi[Web API]\n    api[HTTP API]\n    sio[Socket.IO]\n  end\n\n  end\n\n  subgraph invoke[Invoke]\n    direction LR\n    invoker\n    services\n    sessions\n    invocations\n  end\n\n  subgraph core[AI Core]\n    Generate\n  end\n\n  webui --&gt; webapi\n  webapi --&gt; invoke\n  cli --&gt; invoke\n\n  invoker --&gt; services &amp; sessions\n  invocations --&gt; services\n  sessions --&gt; invocations\n\n  services --&gt; core\n\n  %% Styles\n  classDef sg fill:#5028C8,font-weight:bold,stroke-width:2,color:#fff,stroke:#14141A\n  classDef default stroke-width:2px,stroke:#F6B314,color:#fff,fill:#14141A\n\n  class apps,webapi,invoke,core sg\n</code></pre>"},{"location":"contributing/ARCHITECTURE/#applications","title":"Applications","text":"<p>Applications are built on top of the invoke framework. They should construct <code>invoker</code> and then interact through it. They should avoid interacting directly with core code in order to support a variety of configurations.</p>"},{"location":"contributing/ARCHITECTURE/#web-ui","title":"Web UI","text":"<p>The Web UI is built on top of an HTTP API built with FastAPI and Socket.IO. The frontend code is found in <code>/frontend</code> and the backend code is found in <code>/ldm/invoke/app/api_app.py</code> and <code>/ldm/invoke/app/api/</code>. The code is further organized as such:</p> Component Description api_app.py Sets up the API app, annotates the OpenAPI spec with additional data, and runs the API dependencies Creates all invoker services and the invoker, and provides them to the API events An eventing system that could in the future be adapted to support horizontal scale-out sockets The Socket.IO interface - handles listening to and emitting session events (events are defined in the events service module) routers API definitions for different areas of API functionality"},{"location":"contributing/ARCHITECTURE/#cli","title":"CLI","text":"<p>The CLI is built automatically from invocation metadata, and also supports invocation piping and auto-linking. Code is available in <code>/ldm/invoke/app/cli_app.py</code>.</p>"},{"location":"contributing/ARCHITECTURE/#invoke","title":"Invoke","text":"<p>The Invoke framework provides the interface to the underlying AI systems and is built with flexibility and extensibility in mind. There are four major concepts: invoker, sessions, invocations, and services.</p>"},{"location":"contributing/ARCHITECTURE/#invoker","title":"Invoker","text":"<p>The invoker (<code>/ldm/invoke/app/services/invoker.py</code>) is the primary interface through which applications interact with the framework. Its primary purpose is to create, manage, and invoke sessions. It also maintains two sets of services: - invocation services, which are used by invocations to interact with core functionality. - invoker services, which are used by the invoker to manage sessions and manage the invocation queue.</p>"},{"location":"contributing/ARCHITECTURE/#sessions","title":"Sessions","text":"<p>Invocations and links between them form a graph, which is maintained in a session. Sessions can be queued for invocation, which will execute their graph (either the next ready invocation, or all invocations). Sessions also maintain execution history for the graph (including storage of any outputs). An invocation may be added to a session at any time, and there is capability to add and entire graph at once, as well as to automatically link new invocations to previous invocations. Invocations can not be deleted or modified once added.</p> <p>The session graph does not support looping. This is left as an application problem to prevent additional complexity in the graph.</p>"},{"location":"contributing/ARCHITECTURE/#invocations","title":"Invocations","text":"<p>Invocations represent individual units of execution, with inputs and outputs. All invocations are located in <code>/ldm/invoke/app/invocations</code>, and are all automatically discovered and made available in the applications. These are the primary way to expose new functionality in Invoke.AI, and the implementation guide explains how to add new invocations.</p>"},{"location":"contributing/ARCHITECTURE/#services","title":"Services","text":"<p>Services provide invocations access AI Core functionality and other necessary functionality (e.g. image storage). These are available in <code>/ldm/invoke/app/services</code>. As a general rule, new services should provide an interface as an abstract base class, and may provide a lightweight local implementation by default in their module. The goal for all services should be to enable the usage of different implementations (e.g. using cloud storage for image storage), but should not load any module dependencies unless that implementation has been used (i.e. don't import anything that won't be used, especially if it's expensive to import).</p>"},{"location":"contributing/ARCHITECTURE/#ai-core","title":"AI Core","text":"<p>The AI Core is represented by the rest of the code base (i.e. the code outside of <code>/ldm/invoke/app/</code>).</p>"},{"location":"contributing/CONTRIBUTING/","title":"Contributing","text":"<p>Invoke AI originated as a project built by the community, and that vision carries forward today as we aim to build the best pro-grade tools available. We work together to incorporate the latest in AI/ML research, making these tools available in over 20 languages to artists and creatives around the world as part of our fully permissive OSS project designed for individual users to self-host and use.</p>"},{"location":"contributing/CONTRIBUTING/#methods-of-contributing-to-invoke-ai","title":"Methods of Contributing to Invoke AI","text":"<p>Anyone who wishes to contribute to InvokeAI, whether features, bug fixes, code cleanup, testing, code reviews, documentation or translation is very much encouraged to do so.</p>"},{"location":"contributing/CONTRIBUTING/#development","title":"Development","text":"<p>If you\u2019d like to help with development, please see our development guide. </p> <p>New Contributors: If you\u2019re unfamiliar with contributing to open source projects, take a look at our new contributor guide.</p>"},{"location":"contributing/CONTRIBUTING/#nodes","title":"Nodes","text":"<p>If you\u2019d like to add a Node, please see our nodes contribution guide.</p>"},{"location":"contributing/CONTRIBUTING/#support-and-triaging","title":"Support and Triaging","text":"<p>Helping support other users in Discord and on Github are valuable forms of contribution that we greatly appreciate. </p> <p>We receive many issues and requests for help from users. We're limited in bandwidth relative to our the user base, so providing answers to questions or helping identify causes of issues is very helpful. By doing this, you enable us to spend time on the highest priority work. </p>"},{"location":"contributing/CONTRIBUTING/#documentation","title":"Documentation","text":"<p>If you\u2019d like to help with documentation, please see our documentation guide.</p>"},{"location":"contributing/CONTRIBUTING/#translation","title":"Translation","text":"<p>If you'd like to help with translation, please see our\u00a0translation guide.</p>"},{"location":"contributing/CONTRIBUTING/#tutorials","title":"Tutorials","text":"<p>Please reach out to @imic or @hipsterusername on Discord to help create tutorials for InvokeAI.</p> <p>We hope you enjoy using our software as much as we enjoy creating it, and we hope that some of those of you who are reading this will elect to become part of our contributor community.</p>"},{"location":"contributing/CONTRIBUTING/#contributors","title":"Contributors","text":"<p>This project is a combined effort of dedicated people from across the world.\u00a0Check out the list of all these amazing people. We thank them for their time, hard work and effort.</p>"},{"location":"contributing/CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>The InvokeAI community is a welcoming place, and we want your help in maintaining that. Please review our Code of Conduct to learn more - it's essential to maintaining a respectful and inclusive environment.</p> <p>By making a contribution to this project, you certify that:</p> <ol> <li>The contribution was created in whole or in part by you and you have the right to submit it under the open-source license indicated in this project\u2019s GitHub repository; or</li> <li>The contribution is based upon previous work that, to the best of your knowledge, is covered under an appropriate open-source license and you have the right under that license to submit that work with modifications, whether created in whole or in part by you, under the same open-source license (unless you are permitted to submit under a different license); or</li> <li>The contribution was provided directly to you by some other person who certified (1) or (2) and you have not modified it; or</li> <li>You understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information you submit with it, including your sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open-source license(s) involved.</li> </ol> <p>This disclaimer is not a license and does not grant any rights or permissions. You must obtain necessary permissions and licenses, including from third parties, before contributing to this project.</p> <p>This disclaimer is provided \"as is\" without warranty of any kind, whether expressed or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, or non-infringement. In no event shall the authors or copyright holders be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the contribution or the use or other dealings in the contribution.</p>"},{"location":"contributing/CONTRIBUTING/#support","title":"Support","text":"<p>For support, please use this repository's GitHub Issues, or join the Discord.</p> <p>Original portions of the software are Copyright \u00a9 2023 by respective contributors.</p> <p>Remember, your contributions help make this project great. We're excited to see what you'll bring to our community!</p>"},{"location":"contributing/DOWNLOAD_QUEUE/","title":"The InvokeAI Download Queue","text":"<p>The DownloadQueueService provides a multithreaded parallel download queue for arbitrary URLs, with queue prioritization, event handling, and restart capabilities.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#simple-example","title":"Simple Example","text":"<pre><code>from invokeai.app.services.download import DownloadQueueService, TqdmProgress\n\ndownload_queue = DownloadQueueService()\nfor url in ['https://github.com/invoke-ai/InvokeAI/blob/main/invokeai/assets/a-painting-of-a-fire.png?raw=true',\n            'https://github.com/invoke-ai/InvokeAI/blob/main/invokeai/assets/birdhouse.png?raw=true',\n            'https://github.com/invoke-ai/InvokeAI/blob/main/invokeai/assets/missing.png',\n            'https://civitai.com/api/download/models/152309?type=Model&amp;format=SafeTensor',\n            ]:\n\n    # urls start downloading as soon as download() is called\n    download_queue.download(source=url,\n                            dest='/tmp/downloads',\n                            on_progress=TqdmProgress().update\n                            )\n\ndownload_queue.join()  # wait for all downloads to finish\nfor job in download_queue.list_jobs():\n    print(job.model_dump_json(exclude_none=True, indent=4),\"\\n\")\n</code></pre> <p>Output:</p> <pre><code>{\n    \"source\": \"https://github.com/invoke-ai/InvokeAI/blob/main/invokeai/assets/a-painting-of-a-fire.png?raw=true\",\n    \"dest\": \"/tmp/downloads\",\n    \"id\": 0,\n    \"priority\": 10,\n    \"status\": \"completed\",\n    \"download_path\": \"/tmp/downloads/a-painting-of-a-fire.png\",\n    \"job_started\": \"2023-12-04T05:34:41.742174\",\n    \"job_ended\": \"2023-12-04T05:34:42.592035\",\n    \"bytes\": 666734,\n    \"total_bytes\": 666734\n} \n\n{\n    \"source\": \"https://github.com/invoke-ai/InvokeAI/blob/main/invokeai/assets/birdhouse.png?raw=true\",\n    \"dest\": \"/tmp/downloads\",\n    \"id\": 1,\n    \"priority\": 10,\n    \"status\": \"completed\",\n    \"download_path\": \"/tmp/downloads/birdhouse.png\",\n    \"job_started\": \"2023-12-04T05:34:41.741975\",\n    \"job_ended\": \"2023-12-04T05:34:42.652841\",\n    \"bytes\": 774949,\n    \"total_bytes\": 774949\n}\n\n{\n    \"source\": \"https://github.com/invoke-ai/InvokeAI/blob/main/invokeai/assets/missing.png\",\n    \"dest\": \"/tmp/downloads\",\n    \"id\": 2,\n    \"priority\": 10,\n    \"status\": \"error\",\n    \"job_started\": \"2023-12-04T05:34:41.742079\",\n    \"job_ended\": \"2023-12-04T05:34:42.147625\",\n    \"bytes\": 0,\n    \"total_bytes\": 0,\n    \"error_type\": \"HTTPError(Not Found)\",\n    \"error\": \"Traceback (most recent call last):\\n  File \\\"/home/lstein/Projects/InvokeAI/invokeai/app/services/download/download_default.py\\\", line 182, in _download_next_item\\n    self._do_download(job)\\n  File \\\"/home/lstein/Projects/InvokeAI/invokeai/app/services/download/download_default.py\\\", line 206, in _do_download\\n    raise HTTPError(resp.reason)\\nrequests.exceptions.HTTPError: Not Found\\n\"\n}\n\n{\n    \"source\": \"https://civitai.com/api/download/models/152309?type=Model&amp;format=SafeTensor\",\n    \"dest\": \"/tmp/downloads\",\n    \"id\": 3,\n    \"priority\": 10,\n    \"status\": \"completed\",\n    \"download_path\": \"/tmp/downloads/xl_more_art-full_v1.safetensors\",\n    \"job_started\": \"2023-12-04T05:34:42.147645\",\n    \"job_ended\": \"2023-12-04T05:34:43.735990\",\n    \"bytes\": 719020768,\n    \"total_bytes\": 719020768\n} \n</code></pre>"},{"location":"contributing/DOWNLOAD_QUEUE/#the-api","title":"The API","text":"<p>The default download queue is <code>DownloadQueueService</code>, an implementation of ABC <code>DownloadQueueServiceBase</code>. It juggles multiple background download requests and provides facilities for interrogating and cancelling the requests. Access to a current or past download task is mediated via <code>DownloadJob</code> objects which report the current status of a job request</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#the-queue-object","title":"The Queue Object","text":"<p>A default download queue is located in <code>ApiDependencies.invoker.services.download_queue</code>. However, you can create additional instances if you need to isolate your queue from the main one.</p> <pre><code>queue = DownloadQueueService(event_bus=events)\n</code></pre> <p><code>DownloadQueueService()</code> takes three optional arguments:</p> Argument Type Default Description <code>max_parallel_dl</code> int 5 Maximum number of simultaneous downloads allowed <code>event_bus</code> EventServiceBase None System-wide FastAPI event bus for reporting download events <code>requests_session</code> requests.sessions.Session None An alternative requests Session object to use for the download <p><code>max_parallel_dl</code> specifies how many download jobs are allowed to run simultaneously. Each will run in a different thread of execution.</p> <p><code>event_bus</code> is an EventServiceBase, typically the one created at InvokeAI startup. If present, download events are periodically emitted on this bus to allow clients to follow download progress.</p> <p><code>requests_session</code> is a url library requests Session object. It is used for testing.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#the-job-object","title":"The Job object","text":"<p>The queue operates on a series of download job objects. These objects specify the source and destination of the download, and keep track of the progress of the download.</p> <p>The only job type currently implemented is <code>DownloadJob</code>, a pydantic object with the following fields:</p> Field Type Default Description Fields passed in at job creation time <code>source</code> AnyHttpUrl Where to download from <code>dest</code> Path Where to download to <code>access_token</code> str [optional] string containing authentication token for access <code>on_start</code> Callable [optional] callback when the download starts <code>on_progress</code> Callable [optional] callback called at intervals during download progress <code>on_complete</code> Callable [optional] callback called after successful download completion <code>on_error</code> Callable [optional] callback called after an error occurs <code>id</code> int auto assigned Job ID, an integer &gt;= 0 <code>priority</code> int 10 Job priority. Lower priorities run before higher priorities Fields updated over the course of the download task <code>status</code> DownloadJobStatus Status code <code>download_path</code> Path Path to the location of the downloaded file <code>job_started</code> float Timestamp for when the job started running <code>job_ended</code> float Timestamp for when the job completed or errored out <code>job_sequence</code> int A counter that is incremented each time a model is dequeued <code>bytes</code> int 0 Bytes downloaded so far <code>total_bytes</code> int 0 Total size of the file at the remote site <code>error_type</code> str String version of the exception that caused an error during download <code>error</code> str String version of the traceback associated with an error <code>cancelled</code> bool False Set to true if the job was cancelled by the caller <p>When you create a job, you can assign it a <code>priority</code>. If multiple jobs are queued, the job with the lowest priority runs first.</p> <p>Every job has a <code>source</code> and a <code>dest</code>. <code>source</code> is a pydantic.networks AnyHttpUrl object. The <code>dest</code> is a path on the local filesystem that specifies the destination for the downloaded object. Its semantics are described below.</p> <p>When the job is submitted, it is assigned a numeric <code>id</code>. The id can then be used to fetch the job object from the queue.</p> <p>The <code>status</code> field is updated by the queue to indicate where the job is in its lifecycle. Values are defined in the string enum <code>DownloadJobStatus</code>, a symbol available from <code>invokeai.app.services.download_manager</code>. Possible values are:</p> Value String Value ** Description ** <code>WAITING</code> waiting Job is on the queue but not yet running <code>RUNNING</code> running The download is started <code>COMPLETED</code> completed Job has finished its work without an error <code>ERROR</code> error Job encountered an error and will not run again <p><code>job_started</code> and <code>job_ended</code> indicate when the job was started (using a python timestamp) and when it completed.</p> <p>In case of an error, the job's status will be set to <code>DownloadJobStatus.ERROR</code>, the text of the Exception that caused the error will be placed in the <code>error_type</code> field and the traceback that led to the error will be in <code>error</code>.</p> <p>A cancelled job will have status <code>DownloadJobStatus.ERROR</code> and an <code>error_type</code> field of \"DownloadJobCancelledException\". In addition, the job's <code>cancelled</code> property will be set to True.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#callbacks","title":"Callbacks","text":"<p>Download jobs can be associated with a series of callbacks, each with the signature <code>Callable[[\"DownloadJob\"], None]</code>. The callbacks are assigned using optional arguments <code>on_start</code>, <code>on_progress</code>, <code>on_complete</code> and <code>on_error</code>. When the corresponding event occurs, the callback wil be invoked and passed the job. The callback will be run in a <code>try:</code> context in the same thread as the download job. Any exceptions that occur during execution of the callback will be caught and converted into a log error message, thereby allowing the download to continue.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#tqdmprogress","title":"<code>TqdmProgress</code>","text":"<p>The <code>invokeai.app.services.download.download_default</code> module defines a class named <code>TqdmProgress</code> which can be used as an <code>on_progress</code> handler to display a completion bar in the console. Use as follows:</p> <pre><code>from invokeai.app.services.download import TqdmProgress\n\ndownload_queue.download(source='http://some.server.somewhere/some_file',\n                        dest='/tmp/downloads',\n                        on_progress=TqdmProgress().update\n                        )\n</code></pre>"},{"location":"contributing/DOWNLOAD_QUEUE/#events","title":"Events","text":"<p>If the queue was initialized with the InvokeAI event bus (the case when using <code>ApiDependencies.invoker.services.download_queue</code>), then download events will also be issued on the bus. The events are:</p> <ul> <li> <p><code>download_started</code> -- This is issued when a job is taken off the queue and a request is made to the remote server for the URL headers, but before any data has been downloaded. The event payload will contain the keys <code>source</code> and <code>download_path</code>. The latter contains the path that the URL will be downloaded to.</p> </li> <li> <p><code>download_progress -- This is issued periodically as the download runs. The payload contains the keys</code>source<code>,</code>download_path<code>,</code>current_bytes<code>and</code>total_bytes`. The latter two fields can be used to display the percent complete.</p> </li> <li> <p><code>download_complete</code> -- This is issued when the download completes successfully. The payload contains the keys <code>source</code>, <code>download_path</code> and <code>total_bytes</code>.</p> </li> <li> <p><code>download_error</code> -- This is issued when the download stops because of an error condition. The payload contains the fields <code>error_type</code> and <code>error</code>. The former is the text representation of the exception, and the latter is a traceback showing where the error occurred.</p> </li> </ul>"},{"location":"contributing/DOWNLOAD_QUEUE/#job-control","title":"Job control","text":"<p>To create a job call the queue's <code>download()</code> method. You can list all jobs using <code>list_jobs()</code>, fetch a single job by its with <code>id_to_job()</code>, cancel a running job with <code>cancel_job()</code>, cancel all running jobs with <code>cancel_all_jobs()</code>, and wait for all jobs to finish with <code>join()</code>.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#job-queuedownloadsource-dest-priority-access_token","title":"job = queue.download(source, dest, priority, access_token)","text":"<p>Create a new download job and put it on the queue, returning the DownloadJob object.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#jobs-queuelist_jobs","title":"jobs = queue.list_jobs()","text":"<p>Return a list of all active and inactive <code>DownloadJob</code>s.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#job-queueid_to_jobid","title":"job = queue.id_to_job(id)","text":"<p>Return the job corresponding to given ID.</p> <p>Return a list of all active and inactive <code>DownloadJob</code>s.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#queueprune_jobs","title":"queue.prune_jobs()","text":"<p>Remove inactive (complete or errored) jobs from the listing returned by <code>list_jobs()</code>.</p>"},{"location":"contributing/DOWNLOAD_QUEUE/#queuejoin","title":"queue.join()","text":"<p>Block until all pending jobs have run to completion or errored out.</p>"},{"location":"contributing/INVOCATIONS/","title":"Nodes","text":"<p>Features in InvokeAI are added in the form of modular nodes systems called Invocations.</p> <p>An Invocation is simply a single operation that takes in some inputs and gives out some outputs. We can then chain multiple Invocations together to create more complex functionality.</p>"},{"location":"contributing/INVOCATIONS/#invocations-directory","title":"Invocations Directory","text":"<p>InvokeAI Nodes can be found in the <code>invokeai/app/invocations</code> directory. These can be used as examples to create your own nodes.</p> <p>New nodes should be added to a subfolder in <code>nodes</code> direction found at the root level of the InvokeAI installation location. Nodes added to this folder will be able to be used upon application startup.</p> <p>Example <code>nodes</code> subfolder structure:</p> <pre><code>\u251c\u2500\u2500 __init__.py # Invoke-managed custom node loader\n\u2502\n\u251c\u2500\u2500 cool_node\n\u2502   \u251c\u2500\u2500 __init__.py # see example below\n\u2502   \u2514\u2500\u2500 cool_node.py\n\u2502\n\u2514\u2500\u2500 my_node_pack\n    \u251c\u2500\u2500 __init__.py # see example below\n    \u251c\u2500\u2500 tasty_node.py\n    \u251c\u2500\u2500 bodacious_node.py\n    \u251c\u2500\u2500 utils.py\n    \u2514\u2500\u2500 extra_nodes\n        \u2514\u2500\u2500 fancy_node.py\n</code></pre> <p>Each node folder must have an <code>__init__.py</code> file that imports its nodes. Only nodes imported in the <code>__init__.py</code> file are loaded. See the README in the nodes folder for more examples:</p> <pre><code>from .cool_node import CoolInvocation\n</code></pre>"},{"location":"contributing/INVOCATIONS/#creating-a-new-invocation","title":"Creating A New Invocation","text":"<p>In order to understand the process of creating a new Invocation, let us actually create one.</p> <p>In our example, let us create an Invocation that will take in an image, resize it and output the resized image.</p> <p>The first set of things we need to do when creating a new Invocation are -</p> <ul> <li>Create a new class that derives from a predefined parent class called   <code>BaseInvocation</code>.</li> <li>Every Invocation must have a <code>docstring</code> that describes what this Invocation   does.</li> <li>While not strictly required, we suggest every invocation class name ends in   \"Invocation\", eg \"CropImageInvocation\".</li> <li>Every Invocation must use the <code>@invocation</code> decorator to provide its unique   invocation type. You may also provide its title, tags and category using the   decorator.</li> <li>Invocations are strictly typed. We make use of the native   typing library and the   installed pydantic library for   validation.</li> </ul> <p>So let us do that.</p> <pre><code>from invokeai.app.invocations.baseinvocation import BaseInvocation, invocation\n\n@invocation('resize')\nclass ResizeInvocation(BaseInvocation):\n    '''Resizes an image'''\n</code></pre> <p>That's great.</p> <p>Now we have setup the base of our new Invocation. Let us think about what inputs our Invocation takes.</p> <ul> <li>We need an <code>image</code> that we are going to resize.</li> <li>We will need new <code>width</code> and <code>height</code> values to which we need to resize the   image to.</li> </ul>"},{"location":"contributing/INVOCATIONS/#inputs","title":"Inputs","text":"<p>Every Invocation input must be defined using the <code>InputField</code> function. This is a wrapper around the pydantic <code>Field</code> function, which handles a few extra things and provides type hints. Like everything else, this should be strictly typed and defined.</p> <p>So let us create these inputs for our Invocation. First up, the <code>image</code> input we need. Generally, we can use standard variable types in Python but InvokeAI already has a custom <code>ImageField</code> type that handles all the stuff that is needed for image inputs.</p> <p>But what is this <code>ImageField</code> ..? It is a special class type specifically written to handle how images are dealt with in InvokeAI. We will cover how to create your own custom field types later in this guide. For now, let's go ahead and use it.</p> <pre><code>from invokeai.app.invocations.baseinvocation import BaseInvocation, InputField, invocation\nfrom invokeai.app.invocations.primitives import ImageField\n\n@invocation('resize')\nclass ResizeInvocation(BaseInvocation):\n\n    # Inputs\n    image: ImageField = InputField(description=\"The input image\")\n</code></pre> <p>Let us break down our input code.</p> <pre><code>image: ImageField = InputField(description=\"The input image\")\n</code></pre> Part Value Description Name <code>image</code> The variable that will hold our image Type Hint <code>ImageField</code> The types for our field. Indicates that the image must be an <code>ImageField</code> type. Field <code>InputField(description=\"The input image\")</code> The image variable is an <code>InputField</code> which needs a description. <p>Great. Now let us create our other inputs for <code>width</code> and <code>height</code></p> <pre><code>from invokeai.app.invocations.baseinvocation import BaseInvocation, InputField, invocation\nfrom invokeai.app.invocations.primitives import ImageField\n\n@invocation('resize')\nclass ResizeInvocation(BaseInvocation):\n    '''Resizes an image'''\n\n    image: ImageField = InputField(description=\"The input image\")\n    width: int = InputField(default=512, ge=64, le=2048, description=\"Width of the new image\")\n    height: int = InputField(default=512, ge=64, le=2048, description=\"Height of the new image\")\n</code></pre> <p>As you might have noticed, we added two new arguments to the <code>InputField</code> definition for <code>width</code> and <code>height</code>, called <code>gt</code> and <code>le</code>. They stand for greater than or equal to and less than or equal to.</p> <p>These impose contraints on those fields, and will raise an exception if the values do not meet the constraints. Field constraints are provided by pydantic, so anything you see in the pydantic docs will work.</p> <p>Note: Any time it is possible to define constraints for our field, we should do it so the frontend has more information on how to parse this field.</p> <p>Perfect. We now have our inputs. Let us do something with these.</p>"},{"location":"contributing/INVOCATIONS/#invoke-function","title":"Invoke Function","text":"<p>The <code>invoke</code> function is where all the magic happens. This function provides you the <code>context</code> parameter that is of the type <code>InvocationContext</code> which will give you access to the current context of the generation and all the other services that are provided by it by InvokeAI.</p> <p>Let us create this function first.</p> <pre><code>from invokeai.app.invocations.baseinvocation import BaseInvocation, InputField, invocation, InvocationContext\nfrom invokeai.app.invocations.primitives import ImageField\n\n@invocation('resize')\nclass ResizeInvocation(BaseInvocation):\n    '''Resizes an image'''\n\n    image: ImageField = InputField(description=\"The input image\")\n    width: int = InputField(default=512, ge=64, le=2048, description=\"Width of the new image\")\n    height: int = InputField(default=512, ge=64, le=2048, description=\"Height of the new image\")\n\n    def invoke(self, context: InvocationContext):\n        pass\n</code></pre>"},{"location":"contributing/INVOCATIONS/#outputs","title":"Outputs","text":"<p>The output of our Invocation will be whatever is returned by this <code>invoke</code> function. Like with our inputs, we need to strongly type and define our outputs too.</p> <p>What is our output going to be? Another image. Normally you'd have to create a type for this but InvokeAI already offers you an <code>ImageOutput</code> type that handles all the necessary info related to image outputs. So let us use that.</p> <p>We will cover how to create your own output types later in this guide.</p> <pre><code>from invokeai.app.invocations.baseinvocation import BaseInvocation, InputField, invocation, InvocationContext\nfrom invokeai.app.invocations.primitives import ImageField\nfrom invokeai.app.invocations.image import ImageOutput\n\n@invocation('resize')\nclass ResizeInvocation(BaseInvocation):\n    '''Resizes an image'''\n\n    image: ImageField = InputField(description=\"The input image\")\n    width: int = InputField(default=512, ge=64, le=2048, description=\"Width of the new image\")\n    height: int = InputField(default=512, ge=64, le=2048, description=\"Height of the new image\")\n\n    def invoke(self, context: InvocationContext) -&gt; ImageOutput:\n        pass\n</code></pre> <p>Perfect. Now that we have our Invocation setup, let us do what we want to do.</p> <ul> <li>We will first load the image using one of the services provided by InvokeAI to   load the image.</li> <li>We will resize the image using <code>PIL</code> to our input data.</li> <li>We will output this image in the format we set above.</li> </ul> <p>So let's do that.</p> <pre><code>from invokeai.app.invocations.baseinvocation import BaseInvocation, InputField, invocation, InvocationContext\nfrom invokeai.app.invocations.primitives import ImageField\nfrom invokeai.app.invocations.image import ImageOutput, ResourceOrigin, ImageCategory\n\n@invocation(\"resize\")\nclass ResizeInvocation(BaseInvocation):\n    \"\"\"Resizes an image\"\"\"\n\n    image: ImageField = InputField(description=\"The input image\")\n    width: int = InputField(default=512, ge=64, le=2048, description=\"Width of the new image\")\n    height: int = InputField(default=512, ge=64, le=2048, description=\"Height of the new image\")\n\n    def invoke(self, context: InvocationContext) -&gt; ImageOutput:\n        # Load the input image as a PIL image\n        image = context.images.get_pil(self.image.image_name)\n\n        # Resize the image\n        resized_image = image.resize((self.width, self.height))\n\n        # Save the image\n        image_dto = context.images.save(image=resized_image)\n\n        # Return an ImageOutput\n        return ImageOutput.build(image_dto)\n</code></pre> <p>Note: Do not be overwhelmed by the <code>ImageOutput</code> process. InvokeAI has a certain way that the images need to be dispatched in order to be stored and read correctly. In 99% of the cases when dealing with an image output, you can simply copy-paste the template above.</p>"},{"location":"contributing/INVOCATIONS/#customization","title":"Customization","text":"<p>We can use the <code>@invocation</code> decorator to provide some additional info to the UI, like a custom title, tags and category.</p> <p>We also encourage providing a version. This must be a semver version string (\"\\(MAJOR.\\)MINOR.$PATCH\"). The UI will let users know if their workflow is using a mismatched version of the node.</p> <pre><code>@invocation(\"resize\", title=\"My Resizer\", tags=[\"resize\", \"image\"], category=\"My Invocations\", version=\"1.0.0\")\nclass ResizeInvocation(BaseInvocation):\n    \"\"\"Resizes an image\"\"\"\n\n    image: ImageField = InputField(description=\"The input image\")\n    ...\n</code></pre> <p>That's it. You made your own Resize Invocation.</p>"},{"location":"contributing/INVOCATIONS/#result","title":"Result","text":"<p>Once you make your Invocation correctly, the rest of the process is fully automated for you.</p> <p>When you launch InvokeAI, you can go to <code>http://localhost:9090/docs</code> and see your new Invocation show up there with all the relevant info.</p> <p></p> <p>When you launch the frontend UI, you can go to the Node Editor tab and find your new Invocation ready to be used.</p> <p></p>"},{"location":"contributing/INVOCATIONS/#contributing-nodes","title":"Contributing Nodes","text":"<p>Once you've created a Node, the next step is to share it with the community! The best way to do this is to submit a Pull Request to add the Node to the Community Nodes list. If you're not sure how to do that, take a look a at our contributing nodes overview.</p>"},{"location":"contributing/INVOCATIONS/#advanced","title":"Advanced","text":""},{"location":"contributing/INVOCATIONS/#custom-output-types","title":"Custom Output Types","text":"<p>Like with custom inputs, sometimes you might find yourself needing custom outputs that InvokeAI does not provide. We can easily set one up.</p> <p>Now that you are familiar with Invocations and Inputs, let us use that knowledge to create an output that has an <code>image</code> field, a <code>color</code> field and a <code>string</code> field.</p> <ul> <li>An invocation output is a class that derives from the parent class of   <code>BaseInvocationOutput</code>.</li> <li>All invocation outputs must use the <code>@invocation_output</code> decorator to provide   their unique output type.</li> <li>Output fields must use the provided <code>OutputField</code> function. This is very   similar to the <code>InputField</code> function described earlier - it's a wrapper around   <code>pydantic</code>'s <code>Field()</code>.</li> <li>It is not mandatory but we recommend using names ending with <code>Output</code> for   output types.</li> <li>It is not mandatory but we highly recommend adding a <code>docstring</code> to describe   what your output type is for.</li> </ul> <p>Now that we know the basic rules for creating a new output type, let us go ahead and make it.</p> <pre><code>from .baseinvocation import BaseInvocationOutput, OutputField, invocation_output\nfrom .primitives import ImageField, ColorField\n\n@invocation_output('image_color_string_output')\nclass ImageColorStringOutput(BaseInvocationOutput):\n    '''Base class for nodes that output a single image'''\n\n    image: ImageField = OutputField(description=\"The image\")\n    color: ColorField = OutputField(description=\"The color\")\n    text: str = OutputField(description=\"The string\")\n</code></pre> <p>That's all there is to it.</p>"},{"location":"contributing/INVOCATIONS/#custom-input-fields","title":"Custom Input Fields","text":"<p>Now that you know how to create your own Invocations, let us dive into slightly more advanced topics.</p> <p>While creating your own Invocations, you might run into a scenario where the existing fields in InvokeAI do not meet your requirements. In such cases, you can create your own fields.</p> <p>Let us create one as an example. Let us say we want to create a color input field that represents a color code. But before we start on that here are some general good practices to keep in mind.</p>"},{"location":"contributing/INVOCATIONS/#best-practices","title":"Best Practices","text":"<ul> <li>There is no naming convention for input fields but we highly recommend that   you name it something appropriate like <code>ColorField</code>.</li> <li>It is not mandatory but it is heavily recommended to add a relevant   <code>docstring</code> to describe your field.</li> <li>Keep your field in the same file as the Invocation that it is made for or in   another file where it is relevant.</li> </ul> <p>All input types a class that derive from the <code>BaseModel</code> type from <code>pydantic</code>. So let's create one.</p> <pre><code>from pydantic import BaseModel\n\nclass ColorField(BaseModel):\n    '''A field that holds the rgba values of a color'''\n    pass\n</code></pre> <p>Perfect. Now let us create the properties for our field. This is similar to how you created input fields for your Invocation. All the same rules apply. Let us create four fields representing the red\u00ae, blue(b), green(g) and alpha(a) channel of the color.</p> <p>Technically, the properties are also called fields - but in this case, it refers to a <code>pydantic</code> field.</p> <pre><code>class ColorField(BaseModel):\n    '''A field that holds the rgba values of a color'''\n    r: int = Field(ge=0, le=255, description=\"The red channel\")\n    g: int = Field(ge=0, le=255, description=\"The green channel\")\n    b: int = Field(ge=0, le=255, description=\"The blue channel\")\n    a: int = Field(ge=0, le=255, description=\"The alpha channel\")\n</code></pre> <p>That's it. We now have a new input field type that we can use in our Invocations like this.</p> <pre><code>color: ColorField = InputField(default=ColorField(r=0, g=0, b=0, a=0), description='Background color of an image')\n</code></pre>"},{"location":"contributing/INVOCATIONS/#using-the-custom-field","title":"Using the custom field","text":"<p>When you start the UI, your custom field will be automatically recognized.</p> <p>Custom fields only support connection inputs in the Workflow Editor.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/","title":"Local Development","text":"<p>If you are looking to contribute you will need to have a local development environment. See the Developer Install for full details.</p> <p>Broadly this involves cloning the repository, installing the pre-reqs, and InvokeAI (in editable form). Assuming this is working, choose your area of focus.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#documentation","title":"Documentation","text":"<p>We use mkdocs for our documentation with the material theme. Documentation is written in markdown files under the <code>./docs</code> folder and then built into a static website for hosting with GitHub Pages at invoke-ai.github.io/InvokeAI.</p> <p>To contribute to the documentation you'll need to install the dependencies. Note the use of <code>\"</code>.</p> <pre><code>pip install \".[docs]\"\n</code></pre> <p>Now, to run the documentation locally with hot-reloading for changes made.</p> <pre><code>mkdocs serve\n</code></pre> <p>You'll then be prompted to connect to <code>http://127.0.0.1:8080</code> in order to access.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#backend","title":"Backend","text":"<p>The backend is contained within the <code>./invokeai/backend</code> and <code>./invokeai/app</code> directories. To get started please install the development dependencies.</p> <p>From the root of the repository run the following command. Note the use of <code>\"</code>.</p> <pre><code>pip install \".[dev,test]\"\n</code></pre> <p>These are optional groups of packages which are defined within the <code>pyproject.toml</code> and will be required for testing the changes you make to the code.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#tests","title":"Tests","text":"<p>See the tests documentation for information about running and writing tests.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#reloading-changes","title":"Reloading Changes","text":"<p>Experimenting with changes to the Python source code is a drag if you have to re-start the server \u2014 and re-load those multi-gigabyte models \u2014 after every change.</p> <p>For a faster development workflow, add the <code>--dev_reload</code> flag when starting the server. The server will watch for changes to all the Python files in the <code>invokeai</code> directory and apply those changes to the running server on the fly.</p> <p>This will allow you to avoid restarting the server (and reloading models) in most cases, but there are some caveats; see the jurigged documentation for details.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#front-end","title":"Front End","text":""},{"location":"contributing/LOCAL_DEVELOPMENT/#invoke-ui","title":"Invoke UI","text":"<ul> <li>Dev environment</li> <li>Setup</li> <li>Package scripts</li> <li>Type generation</li> <li>Localization</li> <li>VSCode</li> <li>Contributing</li> <li>Check in before investing your time</li> <li>Commit format</li> <li>Submitting a PR</li> <li>Other docs</li> </ul> <p>Invoke's UI is made possible by many contributors and open-source libraries. Thank you!</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#dev-environment","title":"Dev environment","text":""},{"location":"contributing/LOCAL_DEVELOPMENT/#setup","title":"Setup","text":"<ol> <li>Install node and pnpm.</li> <li>Run <code>pnpm i</code> to install all packages.</li> </ol>"},{"location":"contributing/LOCAL_DEVELOPMENT/#run-in-dev-mode","title":"Run in dev mode","text":"<ol> <li>From <code>invokeai/frontend/web/</code>, run <code>pnpm dev</code>.</li> <li>From repo root, run <code>python scripts/invokeai-web.py</code>.</li> <li>Point your browser to the dev server address, e.g. http://localhost:5173/</li> </ol>"},{"location":"contributing/LOCAL_DEVELOPMENT/#package-scripts","title":"Package scripts","text":"<ul> <li><code>dev</code>: run the frontend in dev mode, enabling hot reloading</li> <li><code>build</code>: run all checks (madge, eslint, prettier, tsc) and then build the frontend</li> <li><code>typegen</code>: generate types from the OpenAPI schema (see Type generation)</li> <li><code>lint:madge</code>: check frontend for circular dependencies</li> <li><code>lint:eslint</code>: check frontend for code quality</li> <li><code>lint:prettier</code>: check frontend for code formatting</li> <li><code>lint:tsc</code>: check frontend for type issues</li> <li><code>lint</code>: run all checks concurrently</li> <li><code>fix</code>: run <code>eslint</code> and <code>prettier</code>, fixing fixable issues</li> </ul>"},{"location":"contributing/LOCAL_DEVELOPMENT/#type-generation","title":"Type generation","text":"<p>We use openapi-typescript to generate types from the app's OpenAPI schema.</p> <p>The generated types are committed to the repo in schema.ts.</p> <pre><code># from the repo root, start the server\npython scripts/invokeai-web.py\n# from invokeai/frontend/web/, run the script\npnpm typegen\n</code></pre>"},{"location":"contributing/LOCAL_DEVELOPMENT/#localization","title":"Localization","text":"<p>We use i18next for localization, but translation to languages other than English happens on our Weblate project.</p> <p>Only the English source strings should be changed on this repo.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#vscode","title":"VSCode","text":""},{"location":"contributing/LOCAL_DEVELOPMENT/#example-debugger-config","title":"Example debugger config","text":"<pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"name\": \"Invoke UI\",\n      \"url\": \"http://localhost:5173\",\n      \"webRoot\": \"${workspaceFolder}/invokeai/frontend/web\",\n    },\n  ],\n}\n</code></pre>"},{"location":"contributing/LOCAL_DEVELOPMENT/#remote-dev","title":"Remote dev","text":"<p>We've noticed an intermittent timeout issue with the VSCode remote dev port forwarding.</p> <p>We suggest disabling the editor's port forwarding feature and doing it manually via SSH:</p> <pre><code>ssh -L 9090:localhost:9090 -L 5173:localhost:5173 user@host\n</code></pre>"},{"location":"contributing/LOCAL_DEVELOPMENT/#contributing-guidelines","title":"Contributing Guidelines","text":"<p>Thanks for your interest in contributing to the Invoke Web UI!</p> <p>Please follow these guidelines when contributing.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#check-in-before-investing-your-time","title":"Check in before investing your time","text":"<p>Please check in before you invest your time on anything besides a trivial fix, in case it conflicts with ongoing work or isn't aligned with the vision for the app.</p> <p>If a feature request or issue doesn't already exist for the thing you want to work on, please create one.</p> <p>Ping <code>@psychedelicious</code> on discord in the <code>#frontend-dev</code> channel or in the feature request / issue you want to work on - we're happy chat.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#code-conventions","title":"Code conventions","text":"<ul> <li>This is a fairly complex app with a deep component tree. Please use memoization (<code>useCallback</code>, <code>useMemo</code>, <code>memo</code>) with enthusiasm.</li> <li>If you need to add some global, ephemeral state, please use [nanostores] if possible.</li> <li>Be careful with your redux selectors. If they need to be parameterized, consider creating them inside a <code>useMemo</code>.</li> <li>Feel free to use <code>lodash</code> (via <code>lodash-es</code>) to make the intent of your code clear.</li> <li>Please add comments describing the \"why\", not the \"how\" (unless it is really arcane).</li> </ul>"},{"location":"contributing/LOCAL_DEVELOPMENT/#commit-format","title":"Commit format","text":"<p>Please use the conventional commits spec for the web UI, with a scope of \"ui\":</p> <ul> <li><code>chore(ui): bump deps</code></li> <li><code>chore(ui): lint</code></li> <li><code>feat(ui): add some cool new feature</code></li> <li><code>fix(ui): fix some bug</code></li> </ul>"},{"location":"contributing/LOCAL_DEVELOPMENT/#submitting-a-pr","title":"Submitting a PR","text":"<ul> <li>Ensure your branch is tidy. Use an interactive rebase to clean up the commit history and reword the commit messages if they are not descriptive.</li> <li>Run <code>pnpm lint</code>. Some issues are auto-fixable with <code>pnpm fix</code>.</li> <li>Fill out the PR form when creating the PR.</li> <li>It doesn't need to be super detailed, but a screenshot or video is nice if you changed something visually.</li> <li>If a section isn't relevant, delete it. There are no UI tests at this time.</li> </ul>"},{"location":"contributing/LOCAL_DEVELOPMENT/#other-docs","title":"Other docs","text":"<ul> <li>Workflows - Design and Implementation</li> <li>State Management</li> </ul>"},{"location":"contributing/LOCAL_DEVELOPMENT/#developing-invokeai-in-vscode","title":"Developing InvokeAI in VSCode","text":"<p>VSCode offers some nice tools:</p> <ul> <li>python debugger</li> <li>automatic <code>venv</code> activation</li> <li>remote dev (e.g. run InvokeAI on a beefy linux desktop while you type in   comfort on your macbook)</li> </ul>"},{"location":"contributing/LOCAL_DEVELOPMENT/#setup_1","title":"Setup","text":"<p>You'll need the Python and Pylance extensions installed first.</p> <p>It's also really handy to install the <code>Jupyter</code> extensions:</p> <ul> <li>Jupyter</li> <li>Jupyter Cell Tags</li> <li>Jupyter Notebook Renderers</li> <li>Jupyter Slide Show</li> </ul>"},{"location":"contributing/LOCAL_DEVELOPMENT/#invokeai-workspace","title":"InvokeAI workspace","text":"<p>Creating a VSCode workspace for working on InvokeAI is highly recommended. It can hold InvokeAI-specific settings and configs.</p> <p>To make a workspace:</p> <ul> <li>Open the InvokeAI repo dir in VSCode</li> <li><code>File</code> &gt; <code>Save Workspace As</code> &gt; save it outside the repo</li> </ul>"},{"location":"contributing/LOCAL_DEVELOPMENT/#default-python-interpreter-ie-automatic-virtual-environment-activation","title":"Default python interpreter (i.e. automatic virtual environment activation)","text":"<ul> <li>Use command palette to run command   <code>Preferences: Open Workspace Settings (JSON)</code></li> <li>Add <code>python.defaultInterpreterPath</code> to <code>settings</code>, pointing to your <code>venv</code>'s   python</li> </ul> <p>Should look something like this:</p> <pre><code>{\n  // I like to have all InvokeAI-related folders in my workspace\n  \"folders\": [\n    {\n      // repo root\n      \"path\": \"InvokeAI\"\n    },\n    {\n      // InvokeAI root dir, where `invokeai.yaml` lives\n      \"path\": \"/path/to/invokeai_root\"\n    }\n  ],\n  \"settings\": {\n    // Where your InvokeAI `venv`'s python executable lives\n    \"python.defaultInterpreterPath\": \"/path/to/invokeai_root/.venv/bin/python\"\n  }\n}\n</code></pre> <p>Now when you open the VSCode integrated terminal, or do anything that needs to run python, it will automatically be in your InvokeAI virtual environment.</p> <p>Bonus: When you create a Jupyter notebook, when you run it, you'll be prompted for the python interpreter to run in. This will default to your <code>venv</code> python, and so you'll have access to the same python environment as the InvokeAI app.</p> <p>This is super handy.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#enabling-type-checking-with-pylance","title":"Enabling Type-Checking with Pylance","text":"<p>We use python's typing system in InvokeAI. PR reviews will include checking that types are present and correct. We don't enforce types with <code>mypy</code> at this time, but that is on the horizon.</p> <p>Using a code analysis tool to automatically type check your code (and types) is very important when writing with types. These tools provide immediate feedback in your editor when types are incorrect, and following their suggestions lead to fewer runtime bugs.</p> <p>Pylance, installed at the beginning of this guide, is the de-facto python LSP (language server protocol). It provides type checking in the editor (among many other features). Once installed, you do need to enable type checking manually:</p> <ul> <li>Open a python file</li> <li>Look along the status bar in VSCode for <code>{ } Python</code></li> <li>Click the <code>{ }</code></li> <li>Turn type checking on - basic is fine</li> </ul> <p>You'll now see red squiggly lines where type issues are detected. Hover your cursor over the indicated symbols to see what's wrong.</p> <p>In 99% of cases when the type checker says there is a problem, there really is a problem, and you should take some time to understand and resolve what it is pointing out.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#debugging-configs-with-launchjson","title":"Debugging configs with <code>launch.json</code>","text":"<p>Debugging configs are managed in a <code>launch.json</code> file. Like most VSCode configs, these can be scoped to a workspace or folder.</p> <p>Follow the official guide to set up your <code>launch.json</code> and try it out.</p> <p>Now we can create the InvokeAI debugging configs:</p> <pre><code>{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      // Run the InvokeAI backend &amp; serve the pre-built UI\n      \"name\": \"InvokeAI Web\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"scripts/invokeai-web.py\",\n      \"args\": [\n        // Your InvokeAI root dir (where `invokeai.yaml` lives)\n        \"--root\",\n        \"/path/to/invokeai_root\",\n        // Access the app from anywhere on your local network\n        \"--host\",\n        \"0.0.0.0\"\n      ],\n      \"justMyCode\": true\n    },\n    {\n      // Run the nodes-based CLI\n      \"name\": \"InvokeAI CLI\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"scripts/invokeai-cli.py\",\n      \"justMyCode\": true\n    },\n    {\n      // Run tests\n      \"name\": \"InvokeAI Test\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"module\": \"pytest\",\n      \"args\": [\"--capture=no\"],\n      \"justMyCode\": true\n    },\n    {\n      // Run a single test\n      \"name\": \"InvokeAI Single Test\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"module\": \"pytest\",\n      \"args\": [\n        // Change this to point to the specific test you are working on\n        \"tests/nodes/test_invoker.py\"\n      ],\n      \"justMyCode\": true\n    },\n    {\n      // This is the default, useful to just run a single file\n      \"name\": \"Python: File\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${file}\",\n      \"justMyCode\": true\n    }\n  ]\n}\n</code></pre> <p>You'll see these configs in the debugging configs drop down. Running them will start InvokeAI with attached debugger, in the correct environment, and work just like the normal app.</p> <p>Enjoy debugging InvokeAI with ease (not that we have any bugs of course).</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#remote-dev_1","title":"Remote dev","text":"<p>This is very easy to set up and provides the same very smooth experience as local development. Environments and debugging, as set up above, just work, though you'd need to recreate the workspace and debugging configs on the remote.</p> <p>Consult the official guide to get it set up.</p> <p>Suggest using VSCode's included settings sync so that your remote dev host has all the same app settings and extensions automagically.</p>"},{"location":"contributing/LOCAL_DEVELOPMENT/#one-remote-dev-gotcha","title":"One remote dev gotcha","text":"<p>I've found the automatic port forwarding to be very flakey. You can disable it in <code>Preferences: Open Remote Settings (ssh: hostname)</code>. Search for <code>remote.autoForwardPorts</code> and untick the box.</p> <p>To forward ports very reliably, use SSH on the remote dev client (e.g. your macbook). Here's how to forward both backend API port (<code>9090</code>) and the frontend live dev server port (<code>5173</code>):</p> <pre><code>ssh \\\n    -L 9090:localhost:9090 \\\n    -L 5173:localhost:5173 \\\n    user@remote-dev-host\n</code></pre> <p>The forwarding stops when you close the terminal window, so suggest to do this outside the VSCode integrated terminal in case you need to restart VSCode for an extension update or something</p> <p>Now, on your remote dev client, you can open <code>localhost:9090</code> and access the UI, now served from the remote dev host, just the same as if it was running on the client.</p>"},{"location":"contributing/MODEL_MANAGER/","title":"Introduction to the Model Manager V2","text":"<p>The Model Manager is responsible for organizing the various machine learning models used by InvokeAI. It consists of a series of interdependent services that together handle the full lifecycle of a model. These are the:</p> <ul> <li> <p>ModelRecordServiceBase Responsible for managing model metadata and   configuration information. Among other things, the record service   tracks the type of the model, its provenance, and where it can be   found on disk.</p> </li> <li> <p>ModelInstallServiceBase A service for installing models to   disk. It uses <code>DownloadQueueServiceBase</code> to download models and   their metadata, and <code>ModelRecordServiceBase</code> to store that   information. It is also responsible for managing the InvokeAI   <code>models</code> directory and its contents.</p> </li> <li> <p>ModelMetadataStore and ModelMetaDataFetch Backend modules that   are able to retrieve metadata from online model repositories,   transform them into Pydantic models, and cache them to the InvokeAI   SQL database.</p> </li> <li> <p>DownloadQueueServiceBase   A multithreaded downloader responsible   for downloading models from a remote source to disk. The download   queue has special methods for downloading repo_id folders from   Hugging Face, as well as discriminating among model versions in   Civitai, but can be used for arbitrary content.</p> </li> <li> <p>ModelLoadServiceBase   Responsible for loading a model from disk   into RAM and VRAM and getting it ready for inference.</p> </li> </ul>"},{"location":"contributing/MODEL_MANAGER/#location-of-the-code","title":"Location of the Code","text":"<p>The four main services can be found in <code>invokeai/app/services</code> in the following directories:</p> <ul> <li><code>invokeai/app/services/model_records/</code></li> <li><code>invokeai/app/services/model_install/</code></li> <li><code>invokeai/app/services/downloads/</code></li> <li><code>invokeai/app/services/model_load/</code></li> </ul> <p>Code related to the FastAPI web API can be found in <code>invokeai/app/api/routers/model_manager_v2.py</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#whats-in-a-model-the-modelrecordservice","title":"What's in a Model? The ModelRecordService","text":"<p>The <code>ModelRecordService</code> manages the model's metadata. It supports a hierarchy of pydantic metadata \"config\" objects, which become increasingly specialized to support particular model types.</p>"},{"location":"contributing/MODEL_MANAGER/#modelconfigbase","title":"ModelConfigBase","text":"<p>All model metadata classes inherit from this pydantic class. it provides the following fields:</p> Field Name Type Description <code>key</code> str Unique identifier for the model <code>name</code> str Name of the model (not unique) <code>model_type</code> ModelType The type of the model <code>model_format</code> ModelFormat The format of the model (e.g. \"diffusers\"); also used as a Union discriminator <code>base_model</code> BaseModelType The base model that the model is compatible with <code>path</code> str Location of model on disk <code>original_hash</code> str Hash of the model when it was first installed <code>current_hash</code> str Most recent hash of the model's contents <code>description</code> str Human-readable description of the model (optional) <code>source</code> str Model's source URL or repo id (optional) <p>The <code>key</code> is a unique 32-character random ID which was generated at install time. The <code>original_hash</code> field stores a hash of the model's contents at install time obtained by sampling several parts of the model's files using the <code>imohash</code> library. Over the course of the model's lifetime it may be transformed in various ways, such as changing its precision or converting it from a .safetensors to a diffusers model. When this happens, <code>original_hash</code> is unchanged, but <code>current_hash</code> is updated to indicate the current contents.</p> <p><code>ModelType</code>, <code>ModelFormat</code> and <code>BaseModelType</code> are string enums that are defined in <code>invokeai.backend.model_manager.config</code>. They are also imported by, and can be reexported from, <code>invokeai.app.services.model_manager.model_records</code>:</p> <pre><code>from invokeai.app.services.model_records import ModelType, ModelFormat, BaseModelType\n</code></pre> <p>The <code>path</code> field can be absolute or relative. If relative, it is taken to be relative to the <code>models_dir</code> setting in the user's <code>invokeai.yaml</code> file.</p>"},{"location":"contributing/MODEL_MANAGER/#checkpointconfig","title":"CheckpointConfig","text":"<p>This adds support for checkpoint configurations, and adds the following field:</p> Field Name Type Description <code>config</code> str Path to the checkpoint's config file <p><code>config</code> is the path to the checkpoint's config file. If relative, it is taken to be relative to the InvokeAI root directory (e.g. <code>configs/stable-diffusion/v1-inference.yaml</code>)</p>"},{"location":"contributing/MODEL_MANAGER/#mainconfig","title":"MainConfig","text":"<p>This adds support for \"main\" Stable Diffusion models, and adds these fields:</p> Field Name Type Description <code>vae</code> str Path to a VAE to use instead of the burnt-in one <code>variant</code> ModelVariantType Model variant type, such as \"inpainting\" <p><code>vae</code> can be an absolute or relative path. If relative, its base is taken to be the <code>models_dir</code> directory.</p> <p><code>variant</code> is an enumerated string class with values <code>normal</code>, <code>inpaint</code> and <code>depth</code>. If needed, it can be imported if needed from either <code>invokeai.app.services.model_records</code> or <code>invokeai.backend.model_manager.config</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#onnxsd2config","title":"ONNXSD2Config","text":"Field Name Type Description <code>prediction_type</code> SchedulerPredictionType Scheduler prediction type to use, e.g. \"epsilon\" <code>upcast_attention</code> bool Model requires its attention module to be upcast <p>The <code>SchedulerPredictionType</code> enum can be imported from either <code>invokeai.app.services.model_records</code> or <code>invokeai.backend.model_manager.config</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#other-config-classes","title":"Other config classes","text":"<p>There are a series of such classes each discriminated by their <code>ModelFormat</code>, including <code>LoRAConfig</code>, <code>IPAdapterConfig</code>, and so forth. These are rarely needed outside the model manager's internal code, but available in <code>invokeai.backend.model_manager.config</code> if needed. There is also a Union of all ModelConfig classes, called <code>AnyModelConfig</code> that can be imported from the same file.</p>"},{"location":"contributing/MODEL_MANAGER/#limitations-of-the-data-model","title":"Limitations of the Data Model","text":"<p>The config hierarchy has a major limitation in its handling of the base model type. Each model can only be compatible with one base model, which breaks down in the event of models that are compatible with two or more base models. For example, SD-1 VAEs also work with SD-2 models. A partial workaround is to use <code>BaseModelType.Any</code>, which indicates that the model is compatible with any of the base models. This works OK for some models, such as the IP Adapter image encoders, but is an all-or-nothing proposition.</p>"},{"location":"contributing/MODEL_MANAGER/#reading-and-writing-model-configuration-records","title":"Reading and Writing Model Configuration Records","text":"<p>The <code>ModelRecordService</code> provides the ability to retrieve model configuration records from SQL or YAML databases, update them, and write them back.</p> <p>A application-wide <code>ModelRecordService</code> is created during API initialization and can be retrieved within an invocation from the <code>InvocationContext</code> object:</p> <pre><code>store = context.services.model_manager.store\n</code></pre> <p>or from elsewhere in the code by accessing <code>ApiDependencies.invoker.services.model_manager.store</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#creating-a-modelrecordservice","title":"Creating a <code>ModelRecordService</code>","text":"<p>To create a new <code>ModelRecordService</code> database or open an existing one, you can directly create either a <code>ModelRecordServiceSQL</code> or a <code>ModelRecordServiceFile</code> object:</p> <pre><code>from invokeai.app.services.model_records import ModelRecordServiceSQL, ModelRecordServiceFile\n\nstore = ModelRecordServiceSQL.from_connection(connection, lock)\nstore = ModelRecordServiceSQL.from_db_file('/path/to/sqlite_database.db')\nstore = ModelRecordServiceFile.from_db_file('/path/to/database.yaml')\n</code></pre> <p>The <code>from_connection()</code> form is only available from the <code>ModelRecordServiceSQL</code> class, and is used to manage records in a previously-opened SQLITE3 database using a <code>sqlite3.connection</code> object and a <code>threading.lock</code> object. It is intended for the specific use case of storing the record information in the main InvokeAI database, usually <code>databases/invokeai.db</code>.</p> <p>The <code>from_db_file()</code> methods can be used to open new connections to the named database files. If the file doesn't exist, it will be created and initialized.</p> <p>As a convenience, <code>ModelRecordServiceBase</code> offers two methods, <code>from_db_file</code> and <code>open</code>, which will return either a SQL or File implementation depending on the context. The former looks at the file extension to determine whether to open the file as a SQL database (\".db\") or as a file database (\".yaml\"). If the file exists, but is either the wrong type or does not contain the expected schema metainformation, then an appropriate <code>AssertionError</code> will be raised:</p> <pre><code>store = ModelRecordServiceBase.from_db_file('/path/to/a/file.{yaml,db}')\n</code></pre> <p>The <code>ModelRecordServiceBase.open()</code> method is specifically designed for use in the InvokeAI web server. Its signature is:</p> <pre><code>def open(\n       cls, \n       config: InvokeAIAppConfig, \n       conn: Optional[sqlite3.Connection] = None, \n       lock: Optional[threading.Lock] = None\n    ) -&gt; Union[ModelRecordServiceSQL, ModelRecordServiceFile]:\n</code></pre> <p>The way it works is as follows:</p> <ol> <li>Retrieve the value of the <code>model_config_db</code> option from the user's     <code>invokeai.yaml</code> config file.</li> <li>If <code>model_config_db</code> is <code>auto</code> (the default), then:</li> <li>Use the values of <code>conn</code> and <code>lock</code> to return a <code>ModelRecordServiceSQL</code> object      opened on the passed connection and lock.</li> <li>Open up a new connection to <code>databases/invokeai.db</code> if <code>conn</code>      and/or <code>lock</code> are missing (see note below).</li> <li>If <code>model_config_db</code> is a Path, then use <code>from_db_file</code>    to return the appropriate type of ModelRecordService.</li> <li>If <code>model_config_db</code> is None, then retrieve the legacy    <code>conf_path</code> option from <code>invokeai.yaml</code> and use the Path    indicated there. This will default to <code>configs/models.yaml</code>.</li> </ol> <p>So a typical startup pattern would be:</p> <pre><code>import sqlite3\nfrom invokeai.app.services.thread import lock\nfrom invokeai.app.services.model_records import ModelRecordServiceBase\nfrom invokeai.app.services.config import InvokeAIAppConfig\n\nconfig = InvokeAIAppConfig.get_config()\ndb_conn = sqlite3.connect(config.db_path.as_posix(), check_same_thread=False)\nstore = ModelRecordServiceBase.open(config, db_conn, lock)\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#fetching-a-models-configuration-from-modelrecordservicebase","title":"Fetching a Model's Configuration from <code>ModelRecordServiceBase</code>","text":"<p>Configurations can be retrieved in several ways.</p>"},{"location":"contributing/MODEL_MANAGER/#get_modelkey-anymodelconfig","title":"get_model(key) -&gt; AnyModelConfig:","text":"<p>The basic functionality is to call the record store object's <code>get_model()</code> method with the desired model's unique key. It returns the appropriate subclass of ModelConfigBase:</p> <pre><code>model_conf = store.get_model('f13dd932c0c35c22dcb8d6cda4203764')\nprint(model_conf.path)\n\n&gt;&gt; '/tmp/models/ckpts/v1-5-pruned-emaonly.safetensors'\n</code></pre> <p>If the key is unrecognized, this call raises an <code>UnknownModelException</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#existskey-anymodelconfig","title":"exists(key) -&gt; AnyModelConfig:","text":"<p>Returns True if a model with the given key exists in the databsae.</p>"},{"location":"contributing/MODEL_MANAGER/#search_by_pathpath-anymodelconfig","title":"search_by_path(path) -&gt; AnyModelConfig:","text":"<p>Returns the configuration of the model whose path is <code>path</code>. The path is matched using a simple string comparison and won't correctly match models referred to by different paths (e.g. using symbolic links).</p>"},{"location":"contributing/MODEL_MANAGER/#search_by_namename-base-type-listanymodelconfig","title":"search_by_name(name, base, type) -&gt; List[AnyModelConfig]:","text":"<p>This method searches for models that match some combination of <code>name</code>, <code>BaseType</code> and <code>ModelType</code>. Calling without any arguments will return all the models in the database.</p>"},{"location":"contributing/MODEL_MANAGER/#all_models-listanymodelconfig","title":"all_models() -&gt; List[AnyModelConfig]:","text":"<p>Return all the model configs in the database. Exactly equivalent to calling <code>search_by_name()</code> with no arguments.</p>"},{"location":"contributing/MODEL_MANAGER/#search_by_tagtags-listanymodelconfig","title":"search_by_tag(tags) -&gt; List[AnyModelConfig]:","text":"<p><code>tags</code> is a list of strings. This method returns a list of model configs that contain all of the given tags. Examples:</p> <pre><code># find all models that are marked as both SFW and as generating\n# background scenery\nconfigs = store.search_by_tag(['sfw', 'scenery'])\n</code></pre> <p>Note that only tags are not searchable in this way. Other fields can be searched using a filter:</p> <pre><code>commercializable_models = [x for x in store.all_models() \\\n                           if x.license.contains('allowCommercialUse=Sell')]\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#version-str","title":"version() -&gt; str:","text":"<p>Returns the version of the database, currently at <code>3.2</code></p>"},{"location":"contributing/MODEL_MANAGER/#model_info_by_namename-base_model-model_type-modelconfigbase","title":"model_info_by_name(name, base_model, model_type) -&gt; ModelConfigBase:","text":"<p>This method exists to ease the transition from the previous version of the model manager, in which <code>get_model()</code> took the three arguments shown above. This looks for a unique model identified by name, base model and model type and returns it.</p> <p>The method will generate a <code>DuplicateModelException</code> if there are more than one models that share the same type, base and name. While unlikely, it is certainly possible to have a situation in which the user had added two models with the same name, base and type, one located at path <code>/foo/my_model</code> and the other at <code>/bar/my_model</code>. It is strongly recommended to search for models using <code>search_by_name()</code>, which can return multiple results, and then to select the desired model and pass its key to <code>get_model()</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#writing-model-configs-to-the-database","title":"Writing model configs to the database","text":"<p>Several methods allow you to create and update stored model config records.</p>"},{"location":"contributing/MODEL_MANAGER/#add_modelkey-config-anymodelconfig","title":"add_model(key, config) -&gt; AnyModelConfig:","text":"<p>Given a key and a configuration, this will add the model's configuration record to the database. <code>config</code> can either be a subclass of <code>ModelConfigBase</code> (i.e. any class listed in <code>AnyModelConfig</code>), or a <code>dict</code> of key/value pairs. In the latter case, the correct configuration class will be picked by Pydantic's discriminated union mechanism.</p> <p>If successful, the method will return the appropriate subclass of <code>ModelConfigBase</code>. It will raise a <code>DuplicateModelException</code> if a model with the same key is already in the database, or an <code>InvalidModelConfigException</code> if a dict was passed and Pydantic experienced a parse or validation error.</p>"},{"location":"contributing/MODEL_MANAGER/#update_modelkey-config-anymodelconfig","title":"update_model(key, config) -&gt; AnyModelConfig:","text":"<p>Given a key and a configuration, this will update the model configuration record in the database. <code>config</code> can be either a instance of <code>ModelConfigBase</code>, or a sparse <code>dict</code> containing the fields to be updated. This will return an <code>AnyModelConfig</code> on success, or raise <code>InvalidModelConfigException</code> or <code>UnknownModelException</code> exceptions on failure.</p>"},{"location":"contributing/MODEL_MANAGER/#model-installation","title":"Model installation","text":"<p>The <code>ModelInstallService</code> class implements the <code>ModelInstallServiceBase</code> abstract base class, and provides a one-stop shop for all your model install needs. It provides the following functionality:</p> <ul> <li> <p>Registering a model config record for a model already located on the   local filesystem, without moving it or changing its path.</p> </li> <li> <p>Installing a model alreadiy located on the local filesystem, by   moving it into the InvokeAI root directory under the   <code>models</code> folder (or wherever config parameter <code>models_dir</code>   specifies).</p> </li> <li> <p>Probing of models to determine their type, base type and other key   information.</p> </li> <li> <p>Interface with the InvokeAI event bus to provide status updates on   the download, installation and registration process.</p> </li> <li> <p>Downloading a model from an arbitrary URL and installing it in   <code>models_dir</code>.</p> </li> <li> <p>Special handling for Civitai model URLs which allow the user to   paste in a model page's URL or download link</p> </li> <li> <p>Special handling for HuggingFace repo_ids to recursively download   the contents of the repository, paying attention to alternative   variants such as fp16.</p> </li> <li> <p>Saving tags and other metadata about the model into the invokeai database   when fetching from a repo that provides that type of information,   (currently only Civitai and HuggingFace).</p> </li> </ul>"},{"location":"contributing/MODEL_MANAGER/#initializing-the-installer","title":"Initializing the installer","text":"<p>A default installer is created at InvokeAI api startup time and stored in <code>ApiDependencies.invoker.services.model_install</code> and can also be retrieved from an invocation's <code>context</code> argument with <code>context.services.model_install</code>.</p> <p>In the event you wish to create a new installer, you may use the following initialization pattern:</p> <pre><code>from invokeai.app.services.config import InvokeAIAppConfig\nfrom invokeai.app.services.model_records import ModelRecordServiceSQL\nfrom invokeai.app.services.model_install import ModelInstallService\nfrom invokeai.app.services.download import DownloadQueueService\nfrom invokeai.app.services.shared.sqlite import SqliteDatabase\nfrom invokeai.backend.util.logging import InvokeAILogger\n\nconfig = InvokeAIAppConfig.get_config()\nconfig.parse_args()\n\nlogger = InvokeAILogger.get_logger(config=config)\ndb = SqliteDatabase(config, logger)\nrecord_store = ModelRecordServiceSQL(db)\nqueue = DownloadQueueService()\nqueue.start()\n\ninstaller = ModelInstallService(app_config=config, \n                                record_store=record_store,\n                                download_queue=queue\n                                )\ninstaller.start()\n</code></pre> <p>The full form of <code>ModelInstallService()</code> takes the following required parameters:</p> Argument Type Description <code>app_config</code> InvokeAIAppConfig InvokeAI app configuration object <code>record_store</code> ModelRecordServiceBase Config record storage database <code>download_queue</code> DownloadQueueServiceBase Download queue object <code>metadata_store</code> Optional[ModelMetadataStore] Metadata storage object <code>session</code> Optional[requests.Session] Swap in a different Session object (usually for debugging) <p>Once initialized, the installer will provide the following methods:</p>"},{"location":"contributing/MODEL_MANAGER/#install_job-installerheuristic_importsource-config-access_token","title":"install_job = installer.heuristic_import(source, [config], [access_token])","text":"<p>This is a simplified interface to the installer which takes a source string, an optional model configuration dictionary and an optional access token.</p> <p>The <code>source</code> is a string that can be any of these forms</p> <ol> <li>A path on the local filesystem (<code>C:\\\\users\\\\fred\\\\model.safetensors</code>)</li> <li>A Url pointing to a single downloadable model file (<code>https://civitai.com/models/58390/detail-tweaker-lora-lora</code>)</li> <li>A HuggingFace repo_id with any of the following formats:</li> <li><code>model/name</code> -- entire model</li> <li><code>model/name:fp32</code> -- entire model, using the fp32 variant</li> <li><code>model/name:fp16:vae</code> -- vae submodel, using the fp16 variant</li> <li><code>model/name::vae</code> -- vae submodel, using default precision</li> <li><code>model/name:fp16:path/to/model.safetensors</code> -- an individual model file, fp16 variant</li> <li><code>model/name::path/to/model.safetensors</code> -- an individual model file, default variant</li> </ol> <p>Note that by specifying a relative path to the top of the HuggingFace repo, you can download and install arbitrary models files. </p> <p>The variant, if not provided, will be automatically filled in with <code>fp32</code> if the user has requested full precision, and <code>fp16</code> otherwise. If a variant that does not exist is requested, then the method will install whatever HuggingFace returns as its default revision.</p> <p><code>config</code> is an optional dict of values that will override the autoprobed values for model type, base, scheduler prediction type, and so forth. See Model configuration and probing for details.</p> <p><code>access_token</code> is an optional access token for accessing resources that need authentication.</p> <p>The method will return a <code>ModelInstallJob</code>. This object is discussed at length in the following section.</p>"},{"location":"contributing/MODEL_MANAGER/#install_job-installerimport_model","title":"install_job = installer.import_model()","text":"<p>The <code>import_model()</code> method is the core of the installer. The following illustrates basic usage:</p> <pre><code>from invokeai.app.services.model_install import (\n    LocalModelSource,\n    HFModelSource,\n    URLModelSource,\n)\n\nsource1 = LocalModelSource(path='/opt/models/sushi.safetensors')   # a local safetensors file\nsource2 = LocalModelSource(path='/opt/models/sushi_diffusers')     # a local diffusers folder\n\nsource3 = HFModelSource(repo_id='runwayml/stable-diffusion-v1-5')  # a repo_id\nsource4 = HFModelSource(repo_id='runwayml/stable-diffusion-v1-5', subfolder='vae')  # a subfolder within a repo_id\nsource5 = HFModelSource(repo_id='runwayml/stable-diffusion-v1-5', variant='fp16')   # a named variant of a HF model\nsource6 = HFModelSource(repo_id='runwayml/stable-diffusion-v1-5', subfolder='OrangeMix/OrangeMix1.ckpt')   # path to an individual model file\n\nsource7 = URLModelSource(url='https://civitai.com/api/download/models/63006')       # model located at a URL\nsource8 = URLModelSource(url='https://civitai.com/api/download/models/63006', access_token='letmein') # with an access token\n\nfor source in [source1, source2, source3, source4, source5, source6, source7]:\n   install_job = installer.install_model(source)\n\nsource2job = installer.wait_for_installs(timeout=120)\nfor source in sources:\n    job = source2job[source]\n    if job.complete:\n        model_config = job.config_out\n        model_key = model_config.key\n        print(f\"{source} installed as {model_key}\")\n    elif job.errored:\n        print(f\"{source}: {job.error_type}.\\nStack trace:\\n{job.error}\")\n</code></pre> <p>As shown here, the <code>import_model()</code> method accepts a variety of sources, including local safetensors files, local diffusers folders, HuggingFace repo_ids with and without a subfolder designation, Civitai model URLs and arbitrary URLs that point to checkpoint files (but not to folders).</p> <p>Each call to <code>import_model()</code> return a <code>ModelInstallJob</code> job,  an object which tracks the progress of the install.</p> <p>If a remote model is requested, the model's files are downloaded in parallel across a multiple set of threads using the download queue. During the download process, the <code>ModelInstallJob</code> is updated to provide status and progress information. After the files (if any) are downloaded, the remainder of the installation runs in a single serialized background thread. These are the model probing, file copying, and config record database update steps.</p> <p>Multiple install jobs can be queued up. You may block until all install jobs are completed (or errored) by calling the <code>wait_for_installs()</code> method as shown in the code example. <code>wait_for_installs()</code> will return a <code>dict</code> that maps the requested source to its job. This object can be interrogated to determine its status. If the job errored out, then the error type and details can be recovered from <code>job.error_type</code> and <code>job.error</code>.</p> <p>The full list of arguments to <code>import_model()</code> is as follows:</p> Argument Type Default Description <code>source</code> ModelSource None The source of the model, Path, URL or repo_id <code>config</code> Dict[str, Any] None Override all or a portion of model's probed attributes <p>The next few sections describe the various types of ModelSource that can be passed to <code>import_model()</code>. </p> <p><code>config</code> can be used to override all or a portion of the configuration attributes returned by the model prober. See the section below for details.</p>"},{"location":"contributing/MODEL_MANAGER/#localmodelsource","title":"LocalModelSource","text":"<p>This is used for a model that is located on a locally-accessible Posix filesystem, such as a local disk or networked fileshare.</p> Argument Type Default Description <code>path</code> str Path None <code>inplace</code> bool False If set, the model file(s) will be left in their location; otherwise they will be copied into the InvokeAI root's <code>models</code> directory"},{"location":"contributing/MODEL_MANAGER/#urlmodelsource","title":"URLModelSource","text":"<p>This is used for a single-file model that is accessible via a URL. The fields are:</p> Argument Type Default Description <code>url</code> AnyHttpUrl None The URL for the model file. <code>access_token</code> str None An access token needed to gain access to this file. <p>The <code>AnyHttpUrl</code> class can be imported from <code>pydantic.networks</code>.</p> <p>Ordinarily, no metadata is retrieved from these sources. However, there is special-case code in the installer that looks for HuggingFace and Civitai URLs and fetches the corresponding model metadata from the corresponding repo.</p>"},{"location":"contributing/MODEL_MANAGER/#civitaimodelsource","title":"CivitaiModelSource","text":"<p>This is used for a model that is hosted by the Civitai web site.</p> Argument Type Default Description <code>version_id</code> int None The ID of the particular version of the desired model. <code>access_token</code> str None An access token needed to gain access to a subscriber's-only model. <p>Civitai has two model IDs, both of which are integers. The <code>model_id</code> corresponds to a collection of model versions that may different in arbitrary ways, such as derivation from different checkpoint training steps, SFW vs NSFW generation, pruned vs non-pruned, etc. The <code>version_id</code> points to a specific version. Please use the latter.</p> <p>Some Civitai models require an access token to download. These can be generated from the Civitai profile page of a logged-in account. Somewhat annoyingly, if you fail to provide the access token when downloading a model that needs it, Civitai generates a redirect to a login page rather than a 403 Forbidden error. The installer attempts to catch this event and issue an informative error message. Otherwise you will get an \"unrecognized model suffix\" error when the model prober tries to identify the type of the HTML login page.</p>"},{"location":"contributing/MODEL_MANAGER/#hfmodelsource","title":"HFModelSource","text":"<p>HuggingFace has the most complicated <code>ModelSource</code> structure:</p> Argument Type Default Description <code>repo_id</code> str None The ID of the desired model. <code>variant</code> ModelRepoVariant ModelRepoVariant('fp16') The desired variant. <code>subfolder</code> Path None Look for the model in a subfolder of the repo. <code>access_token</code> str None An access token needed to gain access to a subscriber's-only model. <p>The <code>repo_id</code> is the repository ID, such as <code>stabilityai/sdxl-turbo</code>.</p> <p>The <code>variant</code> is one of the various diffusers formats that HuggingFace supports and is used to pick out from the hodgepodge of files that in a typical HuggingFace repository the particular components needed for a complete diffusers model. <code>ModelRepoVariant</code> is an enum that can be imported from <code>invokeai.backend.model_manager</code> and has the following values:</p> Name String Value ModelRepoVariant.DEFAULT \"default\" ModelRepoVariant.FP16 \"fp16\" ModelRepoVariant.FP32 \"fp32\" ModelRepoVariant.ONNX \"onnx\" ModelRepoVariant.OPENVINO \"openvino\" ModelRepoVariant.FLAX \"flax\" <p>You can also pass the string forms to <code>variant</code> directly. Note that InvokeAI may not be able to load and run all variants. At the current time, specifying <code>ModelRepoVariant.DEFAULT</code> will retrieve model files that are unqualified, e.g. <code>pytorch_model.safetensors</code> rather than <code>pytorch_model.fp16.safetensors</code>. These are usually the 32-bit safetensors forms of the model.</p> <p>If <code>subfolder</code> is specified, then the requested model resides in a subfolder of the main model repository. This is typically used to fetch and install VAEs.</p> <p>Some models require you to be registered with HuggingFace and logged in. To download these files, you must provide an <code>access_token</code>. Internally, if no access token is provided, then <code>HfFolder.get_token()</code> will be called to fill it in with the cached one.</p>"},{"location":"contributing/MODEL_MANAGER/#monitoring-the-install-job-process","title":"Monitoring the install job process","text":"<p>When you create an install job with <code>import_model()</code>, it launches the download and installation process in the background and returns a <code>ModelInstallJob</code> object for monitoring the process.</p> <p>The <code>ModelInstallJob</code> class has the following structure:</p> Attribute Type Description <code>id</code> <code>int</code> Integer ID for this job <code>status</code> <code>InstallStatus</code> An enum of [<code>waiting</code>, <code>downloading</code>, <code>running</code>, <code>completed</code>, <code>error</code> and <code>cancelled</code>] <code>config_in</code> <code>dict</code> Overriding configuration values provided by the caller <code>config_out</code> <code>AnyModelConfig</code> After successful completion, contains the configuration record written to the database <code>inplace</code> <code>boolean</code> True if the caller asked to install the model in place using its local path <code>source</code> <code>ModelSource</code> The local path, remote URL or repo_id of the model to be installed <code>local_path</code> <code>Path</code> If a remote model, holds the path of the model after it is downloaded; if a local model, same as <code>source</code> <code>error_type</code> <code>str</code> Name of the exception that led to an error status <code>error</code> <code>str</code> Traceback of the error <p>If the <code>event_bus</code> argument was provided, events will also be broadcast to the InvokeAI event bus. The events will appear on the bus as an event of type <code>EventServiceBase.model_event</code>, a timestamp and the following event names:</p>"},{"location":"contributing/MODEL_MANAGER/#model_install_downloading","title":"<code>model_install_downloading</code>","text":"<p>For remote models only, <code>model_install_downloading</code> events will be issued at regular intervals as the download progresses. The event's payload contains the following keys:</p> Key Type Description <code>source</code> str String representation of the requested source <code>local_path</code> str String representation of the path to the downloading model (usually a temporary directory) <code>bytes</code> int How many bytes downloaded so far <code>total_bytes</code> int Total size of all the files that make up the model <code>parts</code> List[Dict] Information on the progress of the individual files that make up the model <p>The parts is a list of dictionaries that give information on each of the components pieces of the download. The dictionary's keys are <code>source</code>, <code>local_path</code>, <code>bytes</code> and <code>total_bytes</code>, and correspond to the like-named keys in the main event.</p> <p>Note that downloading events will not be issued for local models, and that downloading events occur before the running event.</p>"},{"location":"contributing/MODEL_MANAGER/#model_install_running","title":"<code>model_install_running</code>","text":"<p><code>model_install_running</code> is issued when all the required downloads have completed (if applicable) and the model probing, copying and registration process has now started.</p> <p>The payload will contain the key <code>source</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#model_install_completed","title":"<code>model_install_completed</code>","text":"<p><code>model_install_completed</code> is issued once at the end of a successful installation. The payload will contain the keys <code>source</code>, <code>total_bytes</code> and <code>key</code>, where <code>key</code> is the ID under which the model has been registered.</p>"},{"location":"contributing/MODEL_MANAGER/#model_install_error","title":"<code>model_install_error</code>","text":"<p><code>model_install_error</code> is emitted if the installation process fails for some reason. The payload will contain the keys <code>source</code>, <code>error_type</code> and <code>error</code>. <code>error_type</code> is a short message indicating the nature of the error, and <code>error</code> is the long traceback to help debug the problem.</p>"},{"location":"contributing/MODEL_MANAGER/#model_install_cancelled","title":"<code>model_install_cancelled</code>","text":"<p><code>model_install_cancelled</code> is issued if the model installation is cancelled, or if one or more of its files' downloads are cancelled. The payload will contain <code>source</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#following-the-model-status","title":"Following the model status","text":"<p>You may poll the <code>ModelInstallJob</code> object returned by <code>import_model()</code> to ascertain the state of the install. The job status can be read from the job's <code>status</code> attribute, an <code>InstallStatus</code> enum which has the enumerated values <code>WAITING</code>, <code>DOWNLOADING</code>, <code>RUNNING</code>, <code>COMPLETED</code>, <code>ERROR</code> and <code>CANCELLED</code>.</p> <p>For convenience, install jobs also provided the following boolean properties: <code>waiting</code>, <code>downloading</code>, <code>running</code>, <code>complete</code>, <code>errored</code> and <code>cancelled</code>, as well as <code>in_terminal_state</code>. The last will return True if the job is in the complete, errored or cancelled states.</p>"},{"location":"contributing/MODEL_MANAGER/#model-configuration-and-probing","title":"Model configuration and probing","text":"<p>The install service uses the <code>invokeai.backend.model_manager.probe</code> module during import to determine the model's type, base type, and other configuration parameters. Among other things, it assigns a default name and description for the model based on probed fields. </p> <p>When downloading remote models is implemented, additional configuration information, such as list of trigger terms, will be retrieved from the HuggingFace and Civitai model repositories.</p> <p>The probed values can be overriden by providing a dictionary in the optional <code>config</code> argument passed to <code>import_model()</code>. You may provide overriding values for any of the model's configuration attributes. Here is an example of setting the <code>SchedulerPredictionType</code> and <code>name</code> for an sd-2 model:</p> <pre><code>install_job = installer.import_model(\n               source=HFModelSource(repo_id='stabilityai/stable-diffusion-2-1',variant='fp32'),\n               config=dict(\n                     prediction_type=SchedulerPredictionType('v_prediction')\n                     name='stable diffusion 2 base model',\n               )\n          )\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#other-installer-methods","title":"Other installer methods","text":"<p>This section describes additional methods provided by the installer class.</p>"},{"location":"contributing/MODEL_MANAGER/#jobs-installerwait_for_installstimeout","title":"jobs = installer.wait_for_installs([timeout])","text":"<p>Block until all pending installs are completed or errored and then returns a list of completed jobs. The optional <code>timeout</code> argument will return from the call if jobs aren't completed in the specified time. An argument of 0 (the default) will block indefinitely.</p>"},{"location":"contributing/MODEL_MANAGER/#jobs-installerwait_for_jobjob-timeout","title":"jobs = installer.wait_for_job(job, [timeout])","text":"<p>Like <code>wait_for_installs()</code>, but block until a specific job has completed or errored, and then return the job.  The optional <code>timeout</code> argument will return from the call if the job doesn't complete in the specified time. An argument of 0 (the default) will block indefinitely.</p>"},{"location":"contributing/MODEL_MANAGER/#jobs-installerlist_jobs","title":"jobs = installer.list_jobs()","text":"<p>Return a list of all active and complete <code>ModelInstallJobs</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#jobs-installerget_job_by_sourcesource","title":"jobs = installer.get_job_by_source(source)","text":"<p>Return a list of <code>ModelInstallJob</code> corresponding to the indicated model source.</p>"},{"location":"contributing/MODEL_MANAGER/#jobs-installerget_job_by_idid","title":"jobs = installer.get_job_by_id(id)","text":"<p>Return a list of <code>ModelInstallJob</code> corresponding to the indicated model id.</p>"},{"location":"contributing/MODEL_MANAGER/#jobs-installercancel_jobjob","title":"jobs = installer.cancel_job(job)","text":"<p>Cancel the indicated job.</p>"},{"location":"contributing/MODEL_MANAGER/#installerprune_jobs","title":"installer.prune_jobs","text":"<p>Remove jobs that are in a terminal state (i.e. complete, errored or cancelled) from the job list returned by <code>list_jobs()</code> and <code>get_job()</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#installerapp_config-installerrecord_store-installerevent_bus","title":"installer.app_config, installer.record_store, installer.event_bus","text":"<p>Properties that provide access to the installer's <code>InvokeAIAppConfig</code>, <code>ModelRecordServiceBase</code> and <code>EventServiceBase</code> objects.</p>"},{"location":"contributing/MODEL_MANAGER/#key-installerregister_pathmodel_path-config-key-installerinstall_pathmodel_path-config","title":"key = installer.register_path(model_path, config), key = installer.install_path(model_path, config)","text":"<p>These methods bypass the download queue and directly register or install the model at the indicated path, returning the unique ID for the installed model.</p> <p>Both methods accept a Path object corresponding to a checkpoint or diffusers folder, and an optional dict of config attributes to use to override the values derived from model probing.</p> <p>The difference between <code>register_path()</code> and <code>install_path()</code> is that the former creates a model configuration record without changing the location of the model in the filesystem. The latter makes a copy of the model inside the InvokeAI models directory before registering it.</p>"},{"location":"contributing/MODEL_MANAGER/#installerunregisterkey","title":"installer.unregister(key)","text":"<p>This will remove the model config record for the model at key, and is equivalent to <code>installer.record_store.del_model(key)</code></p>"},{"location":"contributing/MODEL_MANAGER/#installerdeletekey","title":"installer.delete(key)","text":"<p>This is similar to <code>unregister()</code> but has the additional effect of conditionally deleting the underlying model file(s) if they reside within the InvokeAI models directory</p>"},{"location":"contributing/MODEL_MANAGER/#installerunconditionally_deletekey","title":"installer.unconditionally_delete(key)","text":"<p>This method is similar to <code>unregister()</code>, but also unconditionally deletes the corresponding model weights file(s), regardless of whether they are inside or outside the InvokeAI models hierarchy.</p>"},{"location":"contributing/MODEL_MANAGER/#path-installerdownload_and_cacheremote_source-access_token-timeout","title":"path = installer.download_and_cache(remote_source, [access_token], [timeout])","text":"<p>This utility routine will download the model file located at source, cache it, and return the path to the cached file. It does not attempt to determine the model type, probe its configuration values, or register it with the models database.</p> <p>You may provide an access token if the remote source requires authorization. The call will block indefinitely until the file is completely downloaded, cancelled or raises an error of some sort. If you provide a timeout (in seconds), the call will raise a <code>TimeoutError</code> exception if the download hasn't completed in the specified period.</p> <p>You may use this mechanism to request any type of file, not just a model. The file will be stored in a subdirectory of <code>INVOKEAI_ROOT/models/.cache</code>. If the requested file is found in the cache, its path will be returned without redownloading it.</p> <p>Be aware that the models cache is cleared of infrequently-used files and directories at regular intervals when the size of the cache exceeds the value specified in Invoke's <code>convert_cache</code> configuration variable.</p>"},{"location":"contributing/MODEL_MANAGER/#liststrinstallerscan_directoryscan_dir-path-install-bool","title":"List[str]=installer.scan_directory(scan_dir: Path, install: bool)","text":"<p>This method will recursively scan the directory indicated in <code>scan_dir</code> for new models and either install them in the models directory or register them in place, depending on the setting of <code>install</code> (default False).</p> <p>The return value is the list of keys of the new installed/registered models.</p>"},{"location":"contributing/MODEL_MANAGER/#installersync_to_config","title":"installer.sync_to_config()","text":"<p>This method synchronizes models in the models directory and autoimport directory to those in the <code>ModelConfigRecordService</code> database. New models are registered and orphan models are unregistered.</p>"},{"location":"contributing/MODEL_MANAGER/#installerstartinvoker","title":"installer.start(invoker)","text":"<p>The <code>start</code> method is called by the API intialization routines when the API starts up. Its effect is to call <code>sync_to_config()</code> to synchronize the model record store database with what's currently on disk.</p>"},{"location":"contributing/MODEL_MANAGER/#get-on-line-the-download-queue","title":"Get on line: The Download Queue","text":"<p>InvokeAI can download arbitrary files using a multithreaded background download queue. Internally, the download queue is used for installing models located at remote locations. The queue is implemented by the <code>DownloadQueueService</code> defined in <code>invokeai.app.services.download_manager</code>. However, most of the implementation is spread out among several files in <code>invokeai/backend/model_manager/download/*</code></p> <p>A default download queue is located in <code>ApiDependencies.invoker.services.download_queue</code>. However, you can create additional instances if you need to isolate your queue from the main one.</p>"},{"location":"contributing/MODEL_MANAGER/#a-job-for-every-task","title":"A job for every task","text":"<p>The queue operates on a series of download job objects. These objects specify the source and destination of the download, and keep track of the progress of the download. Jobs come in a variety of shapes and colors as they are progressively specialized for particular download task.</p> <p>The basic job is the <code>DownloadJobBase</code>, a pydantic object with the following fields:</p> Field Type Default Description <code>id</code> int Job ID, an integer &gt;= 0 <code>priority</code> int 10 Job priority. Lower priorities run before higher priorities <code>source</code> str Where to download from (specialized types used in subclasses) <code>destination</code> Path Where to download to <code>status</code> DownloadJobStatus Idle Job's status (see below) <code>event_handlers</code> List[DownloadEventHandler] Event handlers (see below) <code>job_started</code> float Timestamp for when the job started running <code>job_ended</code> float Timestamp for when the job completed or errored out <code>job_sequence</code> int A counter that is incremented each time a model is dequeued <code>error</code> Exception A copy of the Exception that caused an error during download <p>When you create a job, you can assign it a <code>priority</code>. If multiple jobs are queued, the job with the lowest priority runs first. (Don't blame me! The Unix developers came up with this convention.) </p> <p>Every job has a <code>source</code> and a <code>destination</code>. <code>source</code> is a string in the base class, but subclassses redefine it more specifically.</p> <p>The <code>destination</code> must be the Path to a file or directory on the local filesystem. If the Path points to a new or existing file, then the source will be stored under that filename. If the Path ponts to an existing directory, then the downloaded file will be stored inside the directory, usually using the name assigned to it at the remote site in the <code>content-disposition</code> http field.</p> <p>When the job is submitted, it is assigned a numeric <code>id</code>. The id can then be used to control the job, such as starting, stopping and cancelling its download.</p> <p>The <code>status</code> field is updated by the queue to indicate where the job is in its lifecycle. Values are defined in the string enum <code>DownloadJobStatus</code>, a symbol available from <code>invokeai.app.services.download_manager</code>. Possible values are:</p> Value String Value ** Description ** <code>IDLE</code> idle Job created, but not submitted to the queue <code>ENQUEUED</code> enqueued Job is patiently waiting on the queue <code>RUNNING</code> running Job is running! <code>PAUSED</code> paused Job was paused and can be restarted <code>COMPLETED</code> completed Job has finished its work without an error <code>ERROR</code> error Job encountered an error and will not run again <code>CANCELLED</code> cancelled Job was cancelled and will not run (again) <p><code>job_started</code>, <code>job_ended</code> and <code>job_sequence</code> indicate when the job was started (using a python timestamp), when it completed, and the order in which it was taken off the queue. These are mostly used for debugging and performance testing.</p> <p>In case of an error, the Exception that caused the error will be placed in the <code>error</code> field, and the job's status will be set to <code>DownloadJobStatus.ERROR</code>. </p> <p>After an error occurs, any partially downloaded files will be deleted from disk, unless <code>preserve_partial_downloads</code> was set to True at job creation time (or set to True any time before the error occurred). Note that since all InvokeAI model install operations involve downloading files to a temporary directory that has a limited lifetime, this flag is not used by the model installer.</p> <p>There are a series of subclasses of <code>DownloadJobBase</code> that provide support for specific types of downloads. These are:</p>"},{"location":"contributing/MODEL_MANAGER/#downloadjobpath","title":"DownloadJobPath","text":"<p>This subclass redefines <code>source</code> to be a filesystem Path. It is used to move a file or directory from the <code>source</code> to the <code>destination</code> paths in the background using a uniform event-based infrastructure.</p>"},{"location":"contributing/MODEL_MANAGER/#downloadjobremotesource","title":"DownloadJobRemoteSource","text":"<p>This subclass adds the following fields to the job:</p> Field Type Default Description <code>bytes</code> int 0 bytes downloaded so far <code>total_bytes</code> int 0 total size to download <code>access_token</code> Any None an authorization token to present to the remote source <p>The job will start out with 0/0 in its bytes/total_bytes fields. Once it starts running, <code>total_bytes</code> will be populated from information provided in the HTTP download header (if available), and the number of bytes downloaded so far will be progressively incremented.</p>"},{"location":"contributing/MODEL_MANAGER/#downloadjoburl","title":"DownloadJobURL","text":"<p>This is a subclass of <code>DownloadJobBase</code>. It redefines <code>source</code> to be a Pydantic <code>AnyHttpUrl</code> object, which enforces URL validation checking on the field.</p> <p>Note that the installer service defines an additional subclass of <code>DownloadJobRemoteSource</code> that accepts HuggingFace repo_ids in addition to URLs. This is discussed later in this document.</p>"},{"location":"contributing/MODEL_MANAGER/#event-handlers","title":"Event handlers","text":"<p>While a job is being downloaded, the queue will emit events at periodic intervals. A typical series of events during a successful download session will look like this:</p> <ul> <li>enqueued</li> <li>running</li> <li>running</li> <li>running</li> <li>completed</li> </ul> <p>There will be a single enqueued event, followed by one or more running events, and finally one <code>completed</code>, <code>error</code> or <code>cancelled</code> events.</p> <p>It is possible for a caller to pause download temporarily, in which case the events may look something like this:</p> <ul> <li>enqueued</li> <li>running</li> <li>running</li> <li>paused</li> <li>running</li> <li>completed</li> </ul> <p>The download queue logs when downloads start and end (unless <code>quiet</code> is set to True at initialization time) but doesn't log any progress events. You will probably want to be alerted to events during the download job and provide more user feedback. In order to intercept and respond to events you may install a series of one or more event handlers in the job. Whenever the job's status changes, the chain of event handlers is traversed and executed in the same thread that the download job is running in.</p> <p>Event handlers have the signature <code>Callable[[\"DownloadJobBase\"], None]</code>, i.e.</p> <pre><code>def handler(job: DownloadJobBase):\n   pass\n</code></pre> <p>A typical handler will examine <code>job.status</code> and decide if there's something to be done. This can include cancelling or erroring the job, but more typically is used to report on the job status to the user interface or to perform certain actions on successful completion of the job.</p> <p>Event handlers can be attached to a job at creation time. In addition, you can create a series of default handlers that are attached to the queue object itself. These handlers will be executed for each job after the job's own handlers (if any) have run.</p> <p>During a download, running events are issued every time roughly 1% of the file is transferred. This is to provide just enough granularity to update a tqdm progress bar smoothly.</p> <p>Handlers can be added to a job after the fact using the job's <code>add_event_handler</code> method:</p> <pre><code>job.add_event_handler(my_handler)\n</code></pre> <p>All handlers can be cleared using the job's <code>clear_event_handlers()</code> method. Note that it might be a good idea to pause the job before altering its handlers.</p>"},{"location":"contributing/MODEL_MANAGER/#creating-a-download-queue-object","title":"Creating a download queue object","text":"<p>The <code>DownloadQueueService</code> constructor takes the following arguments:</p> Argument Type Default Description <code>event_handlers</code> List[DownloadEventHandler] [] Event handlers <code>max_parallel_dl</code> int 5 Maximum number of simultaneous downloads allowed <code>requests_session</code> requests.sessions.Session None An alternative requests Session object to use for the download <code>quiet</code> bool False Do work quietly without issuing log messages <p>A typical initialization sequence will look like:</p> <pre><code>from invokeai.app.services.download_manager import DownloadQueueService\n\ndef log_download_event(job: DownloadJobBase):\n    logger.info(f'job={job.id}: status={job.status}')\n\nqueue = DownloadQueueService(\n                      event_handlers=[log_download_event]\n                          )\n</code></pre> <p>Event handlers can be provided to the queue at initialization time as shown in the example. These will be automatically appended to the handler list for any job that is submitted to this queue.</p> <p><code>max_parallel_dl</code> sets the number of simultaneous active downloads that are allowed. The default of five has not been benchmarked in any way, but seems to give acceptable performance.</p> <p><code>requests_session</code> can be used to provide a <code>requests</code> module Session object that will be used to stream remote URLs to disk. This facility was added for use in the module's unit tests to simulate a remote web server, but may be useful in other contexts.</p> <p><code>quiet</code> will prevent the queue from issuing any log messages at the INFO or higher levels.</p>"},{"location":"contributing/MODEL_MANAGER/#submitting-a-download-job","title":"Submitting a download job","text":"<p>You can submit a download job to the queue either by creating the job manually and passing it to the queue's <code>submit_download_job()</code> method, or using the <code>create_download_job()</code> method, which will do the same thing on your behalf.</p> <p>To use the former method, follow this example:</p> <pre><code>job = DownloadJobRemoteSource(\n         source='http://www.civitai.com/models/13456',\n         destination='/tmp/models/',\n         event_handlers=[my_handler1, my_handler2], # if desired\n         )\nqueue.submit_download_job(job, start=True)\n</code></pre> <p><code>submit_download_job()</code> takes just two arguments: the job to submit, and a flag indicating whether to immediately start the job (defaulting to True). If you choose not to start the job immediately, you can start it later by calling the queue's <code>start_job()</code> or <code>start_all_jobs()</code> methods, which are described later.</p> <p>To have the queue create the job for you, follow this example instead:</p> <pre><code>job = queue.create_download_job(\n         source='http://www.civitai.com/models/13456',\n         destdir='/tmp/models/',\n         filename='my_model.safetensors',\n         event_handlers=[my_handler1, my_handler2], # if desired\n         start=True,\n    )\n</code></pre> <p>The <code>filename</code> argument forces the downloader to use the specified name for the file rather than the name provided by the remote source, and is equivalent to manually specifying a destination of `/tmp/models/my_model.safetensors' in the submitted job.</p> <p>Here is the full list of arguments that can be provided to <code>create_download_job()</code>:</p> Argument Type Default Description <code>source</code> Union[str, Path, AnyHttpUrl] Download remote or local source <code>destdir</code> Path Destination directory for downloaded file <code>filename</code> Path None Filename for downloaded file <code>start</code> bool True Enqueue the job immediately <code>priority</code> int 10 Starting priority for this job <code>access_token</code> str None Authorization token for this resource <code>event_handlers</code> List[DownloadEventHandler] [] Event handlers for this job <p>Internally, <code>create_download_job()</code> has a little bit of internal logic that looks at the type of the source and selects the right subclass of <code>DownloadJobBase</code> to create and enqueue. </p> <p>TODO: move this logic into its own method for overriding in subclasses.</p>"},{"location":"contributing/MODEL_MANAGER/#job-control","title":"Job control","text":"<p>Prior to completion, jobs can be controlled with a series of queue method calls. Do not attempt to modify jobs by directly writing to their fields, as this is likely to lead to unexpected results.</p> <p>Any method that accepts a job argument may raise an <code>UnknownJobIDException</code> if the job has not yet been submitted to the queue or was not created by this queue.</p>"},{"location":"contributing/MODEL_MANAGER/#queuejoin","title":"queue.join()","text":"<p>This method will block until all the active jobs in the queue have reached a terminal state (completed, errored or cancelled).</p>"},{"location":"contributing/MODEL_MANAGER/#queuewait_for_jobjob-timeout","title":"queue.wait_for_job(job, [timeout])","text":"<p>This method will block until the indicated job has reached a terminal state (completed, errored or cancelled). If the optional timeout is provided, the call will block for at most timeout seconds, and raise a TimeoutError otherwise.</p>"},{"location":"contributing/MODEL_MANAGER/#jobs-queuelist_jobs","title":"jobs = queue.list_jobs()","text":"<p>This will return a list of all jobs, including ones that have not yet been enqueued and those that have completed or errored out.</p>"},{"location":"contributing/MODEL_MANAGER/#job-queueid_to_jobint","title":"job = queue.id_to_job(int)","text":"<p>This method allows you to recover a submitted job using its ID.</p>"},{"location":"contributing/MODEL_MANAGER/#queueprune_jobs","title":"queue.prune_jobs()","text":"<p>Remove completed and errored jobs from the job list.</p>"},{"location":"contributing/MODEL_MANAGER/#queuestart_jobjob","title":"queue.start_job(job)","text":"<p>If the job was submitted with <code>start=False</code>, then it can be started using this method.</p>"},{"location":"contributing/MODEL_MANAGER/#queuepause_jobjob","title":"queue.pause_job(job)","text":"<p>This will temporarily pause the job, if possible. It can later be restarted and pick up where it left off using <code>queue.start_job()</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#queuecancel_jobjob","title":"queue.cancel_job(job)","text":"<p>This will cancel the job if possible and clean up temporary files and other resources that it might have been using.</p>"},{"location":"contributing/MODEL_MANAGER/#queuestart_all_jobs-queuepause_all_jobs-queuecancel_all_jobs","title":"queue.start_all_jobs(), queue.pause_all_jobs(), queue.cancel_all_jobs()","text":"<p>This will start/pause/cancel all jobs that have been submitted to the queue and have not yet reached a terminal state.</p>"},{"location":"contributing/MODEL_MANAGER/#this-meta-be-good-model-metadata-storage","title":"This Meta be Good: Model Metadata Storage","text":"<p>The modules found under <code>invokeai.backend.model_manager.metadata</code> provide a straightforward API for fetching model metadatda from online repositories. Currently two repositories are supported: HuggingFace and Civitai. However, the modules are easily extended for additional repos, provided that they have defined APIs for metadata access.</p> <p>Metadata comprises any descriptive information that is not essential for getting the model to run. For example \"author\" is metadata, while \"type\", \"base\" and \"format\" are not. The latter fields are part of the model's config, as defined in <code>invokeai.backend.model_manager.config</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#example-usage","title":"Example Usage:","text":"<pre><code>from invokeai.backend.model_manager.metadata import (\n   AnyModelRepoMetadata,\n   CivitaiMetadataFetch,\n   CivitaiMetadata\n   ModelMetadataStore,\n)\n# to access the initialized sql database\nfrom invokeai.app.api.dependencies import ApiDependencies\n\ncivitai = CivitaiMetadataFetch()\n\n# fetch the metadata\nmodel_metadata = civitai.from_url(\"https://civitai.com/models/215796\")\n\n# get some common metadata fields\nauthor = model_metadata.author\ntags = model_metadata.tags\n\n# get some Civitai-specific fields\nassert isinstance(model_metadata, CivitaiMetadata)\n\ntrained_words = model_metadata.trained_words\nbase_model = model_metadata.base_model_trained_on\nthumbnail = model_metadata.thumbnail_url\n\n# cache the metadata to the database using the key corresponding to\n# an existing model config record in the `model_config` table\nsql_cache = ModelMetadataStore(ApiDependencies.invoker.services.db)\nsql_cache.add_metadata('fb237ace520b6716adc98bcb16e8462c', model_metadata)\n\n# now we can search the database by tag, author or model name\n# matches will contain a list of model keys that match the search\nmatches = sql_cache.search_by_tag({\"tool\", \"turbo\"})\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#structure-of-the-metadata-objects","title":"Structure of the Metadata objects","text":"<p>There is a short class hierarchy of Metadata objects, all of which descend from the Pydantic <code>BaseModel</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#modelmetadatabase","title":"<code>ModelMetadataBase</code>","text":"<p>This is the common base class for metadata:</p> Field Name Type Description <code>name</code> str Repository's name for the model <code>author</code> str Model's author <code>tags</code> Set[str] Model tags <p>Note that the model config record also has a <code>name</code> field. It is intended that the config record version be locally customizable, while the metadata version is read-only. However, enforcing this is expected to be part of the business logic.</p> <p>Descendents of the base add additional fields.</p>"},{"location":"contributing/MODEL_MANAGER/#huggingfacemetadata","title":"<code>HuggingFaceMetadata</code>","text":"<p>This descends from <code>ModelMetadataBase</code> and adds the following fields:</p> Field Name Type Description <code>type</code> Literal[\"huggingface\"] Used for the discriminated union of metadata classes <code>id</code> str HuggingFace repo_id <code>tag_dict</code> Dict[str, Any] A dictionary of tag/value pairs provided in addition to <code>tags</code> <code>last_modified</code> datetime Date of last commit of this model to the repo <code>files</code> List[Path] List of the files in the model repo"},{"location":"contributing/MODEL_MANAGER/#civitaimetadata","title":"<code>CivitaiMetadata</code>","text":"<p>This descends from <code>ModelMetadataBase</code> and adds the following fields:</p> Field Name Type Description <code>type</code> Literal[\"civitai\"] Used for the discriminated union of metadata classes <code>id</code> int Civitai model id <code>version_name</code> str Name of this version of the model (distinct from model name) <code>version_id</code> int Civitai model version id (distinct from model id) <code>created</code> datetime Date this version of the model was created <code>updated</code> datetime Date this version of the model was last updated <code>published</code> datetime Date this version of the model was published to Civitai <code>description</code> str Model description. Quite verbose and contains HTML tags <code>version_description</code> str Model version description, usually describes changes to the model <code>nsfw</code> bool Whether the model tends to generate NSFW content <code>restrictions</code> LicenseRestrictions An object that describes what is and isn't allowed with this model <code>trained_words</code> Set[str] Trigger words for this model, if any <code>download_url</code> AnyHttpUrl URL for downloading this version of the model <code>base_model_trained_on</code> str Name of the model that this version was trained on <code>thumbnail_url</code> AnyHttpUrl URL to access a representative thumbnail image of the model's output <code>weight_min</code> int For LoRA sliders, the minimum suggested weight to apply <code>weight_max</code> int For LoRA sliders, the maximum suggested weight to apply <p>Note that <code>weight_min</code> and <code>weight_max</code> are not currently populated and take the default values of (-1.0, +2.0). The issue is that these values aren't part of the structured data but appear in the text description. Some regular expression or LLM coding may be able to extract these values.</p> <p>Also be aware that <code>base_model_trained_on</code> is free text and doesn't correspond to our <code>ModelType</code> enum.</p> <p><code>CivitaiMetadata</code> also defines some convenience properties relating to licensing restrictions: <code>credit_required</code>, <code>allow_commercial_use</code>, <code>allow_derivatives</code> and <code>allow_different_license</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#anymodelrepometadata","title":"<code>AnyModelRepoMetadata</code>","text":"<p>This is a discriminated Union of <code>CivitaiMetadata</code> and <code>HuggingFaceMetadata</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#fetching-metadata-from-online-repos","title":"Fetching Metadata from Online Repos","text":"<p>The <code>HuggingFaceMetadataFetch</code> and <code>CivitaiMetadataFetch</code> classes will retrieve metadata from their corresponding repositories and return <code>AnyModelRepoMetadata</code> objects. Their base class <code>ModelMetadataFetchBase</code> is an abstract class that defines two methods: <code>from_url()</code> and <code>from_id()</code>. The former accepts the type of model URLs that the user will try to cut and paste into the model import form. The latter accepts a string ID in the format recognized by the repository of choice. Both methods return an <code>AnyModelRepoMetadata</code>.</p> <p>The base class also has a class method <code>from_json()</code> which will take the JSON representation of a <code>ModelMetadata</code> object, validate it, and return the corresponding <code>AnyModelRepoMetadata</code> object.</p> <p>When initializing one of the metadata fetching classes, you may provide a <code>requests.Session</code> argument. This allows you to customize the low-level HTTP fetch requests and is used, for instance, in the testing suite to avoid hitting the internet.</p> <p>The HuggingFace and Civitai fetcher subclasses add additional repo-specific fetching methods:</p>"},{"location":"contributing/MODEL_MANAGER/#huggingfacemetadatafetch","title":"HuggingFaceMetadataFetch","text":"<p>This overrides its base class <code>from_json()</code> method to return a <code>HuggingFaceMetadata</code> object directly.</p>"},{"location":"contributing/MODEL_MANAGER/#civitaimetadatafetch","title":"CivitaiMetadataFetch","text":"<p>This adds the following methods:</p> <p><code>from_civitai_modelid()</code> This takes the ID of a model, finds the default version of the model, and then retrieves the metadata for that version, returning a <code>CivitaiMetadata</code> object directly.</p> <p><code>from_civitai_versionid()</code> This takes the ID of a model version and retrieves its metadata. Functionally equivalent to <code>from_id()</code>, the only difference is that it returna a <code>CivitaiMetadata</code> object rather than an <code>AnyModelRepoMetadata</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#metadata-storage","title":"Metadata Storage","text":"<p>The <code>ModelMetadataStore</code> provides a simple facility to store model metadata in the <code>invokeai.db</code> database. The data is stored as a JSON blob, with a few common fields (<code>name</code>, <code>author</code>, <code>tags</code>) broken out to be searchable. </p> <p>When a metadata object is saved to the database, it is identified using the model key, and this key must correspond to an existing model key in the model_config table. There is a foreign key integrity constraint between the <code>model_config.id</code> field and the <code>model_metadata.id</code> field such that if you attempt to save metadata under an unknown key, the attempt will result in an <code>UnknownModelException</code>. Likewise, when a model is deleted from <code>model_config</code>, the deletion of the corresponding metadata record will be triggered.</p> <p>Tags are stored in a normalized fashion in the tables <code>model_tags</code> and <code>tags</code>. Triggers keep the tag table in sync with the <code>model_metadata</code> table.</p> <p>To create the storage object, initialize it with the InvokeAI <code>SqliteDatabase</code> object. This is often done this way:</p> <pre><code>from invokeai.app.api.dependencies import ApiDependencies\nmetadata_store = ModelMetadataStore(ApiDependencies.invoker.services.db)\n</code></pre> <p>You can then access the storage with the following methods:</p>"},{"location":"contributing/MODEL_MANAGER/#add_metadatakey-metadata","title":"<code>add_metadata(key, metadata)</code>","text":"<p>Add the metadata using a previously-defined model key.</p> <p>There is currently no <code>delete_metadata()</code> method. The metadata will persist until the matching config is deleted from the <code>model_config</code> table.</p>"},{"location":"contributing/MODEL_MANAGER/#get_metadatakey-anymodelrepometadata","title":"<code>get_metadata(key) -&gt; AnyModelRepoMetadata</code>","text":"<p>Retrieve the metadata corresponding to the model key.</p>"},{"location":"contributing/MODEL_MANAGER/#update_metadatakey-new_metadata","title":"<code>update_metadata(key, new_metadata)</code>","text":"<p>Update an existing metadata record with new metadata.</p>"},{"location":"contributing/MODEL_MANAGER/#search_by_tagtags-setstr-setstr","title":"<code>search_by_tag(tags: Set[str]) -&gt; Set[str]</code>","text":"<p>Given a set of tags, find models that are tagged with them. If multiple tags are provided then a matching model must be tagged with all the tags in the set. This method returns a set of model keys and is intended to be used in conjunction with the <code>ModelRecordService</code>:</p> <pre><code>model_config_store = ApiDependencies.invoker.services.model_records\nmatches = metadata_store.search_by_tag({'license:other'})\nmodels = [model_config_store.get(x) for x in matches]\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#search_by_namename-str-setstr","title":"`search_by_name(name: str) -&gt; Set[str]","text":"<p>Find all model metadata records that have the given name and return a set of keys to the corresponding model config objects.</p>"},{"location":"contributing/MODEL_MANAGER/#search_by_authorauthor-str-setstr","title":"`search_by_author(author: str) -&gt; Set[str]","text":"<p>Find all model metadata records that have the given author and return a set of keys to the corresponding model config objects.</p>"},{"location":"contributing/MODEL_MANAGER/#the-lowdown-on-the-modelloadservice","title":"The Lowdown on the ModelLoadService","text":"<p>The <code>ModelLoadService</code> is responsible for loading a named model into memory so that it can be used for inference. Despite the fact that it does a lot under the covers, it is very straightforward to use.</p> <p>An application-wide model loader is created at API initialization time and stored in <code>ApiDependencies.invoker.services.model_loader</code>. However, you can create alternative instances if you wish.</p>"},{"location":"contributing/MODEL_MANAGER/#creating-a-modelloadservice-object","title":"Creating a ModelLoadService object","text":"<p>The class is defined in <code>invokeai.app.services.model_load</code>. It is initialized with an InvokeAIAppConfig object, from which it gets configuration information such as the user's desired GPU and precision, and with a previously-created <code>ModelRecordServiceBase</code> object, from which it loads the requested model's configuration information.</p> <p>Here is a typical initialization pattern:</p> <pre><code>from invokeai.app.services.config import InvokeAIAppConfig\nfrom invokeai.app.services.model_load import ModelLoadService, ModelLoaderRegistry\n\nconfig = InvokeAIAppConfig.get_config()\nram_cache = ModelCache(\n    max_cache_size=config.ram_cache_size, max_vram_cache_size=config.vram_cache_size, logger=logger\n)\nconvert_cache = ModelConvertCache(\n    cache_path=config.models_convert_cache_path, max_size=config.convert_cache_size\n)\nloader = ModelLoadService(\n    app_config=config,\n    ram_cache=ram_cache,\n    convert_cache=convert_cache,\n    registry=ModelLoaderRegistry\n)\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#load_modelmodel_config-submodel_type-context-loadedmodel","title":"load_model(model_config, [submodel_type], [context]) -&gt; LoadedModel","text":"<p>The <code>load_model()</code> method takes an <code>AnyModelConfig</code> returned by <code>ModelRecordService.get_model()</code> and returns the corresponding loaded model.  It loads the model into memory, gets the model ready for use, and returns a <code>LoadedModel</code> object.</p> <p>The optional second argument, <code>subtype</code> is a <code>SubModelType</code> string enum, such as \"vae\". It is mandatory when used with a main model, and is used to select which part of the main model to load.</p> <p>The optional third argument, <code>context</code> can be provided by an invocation to trigger model load event reporting. See below for details.</p> <p>The returned <code>LoadedModel</code> object contains a copy of the configuration record returned by the model record <code>get_model()</code> method, as well as the in-memory loaded model:</p> Attribute Name Type Description <code>config</code> AnyModelConfig A copy of the model's configuration record for retrieving base type, etc. <code>model</code> AnyModel The instantiated model (details below) <code>locker</code> ModelLockerBase A context manager that mediates the movement of the model into VRAM <p>Because the loader can return multiple model types, it is typed to return <code>AnyModel</code>, a Union <code>ModelMixin</code>, <code>torch.nn.Module</code>, <code>IAIOnnxRuntimeModel</code>, <code>IPAdapter</code>, <code>IPAdapterPlus</code>, and <code>EmbeddingModelRaw</code>. <code>ModelMixin</code> is the base class of all diffusers models, <code>EmbeddingModelRaw</code> is used for LoRA and TextualInversion models. The others are obvious.</p> <p><code>LoadedModel</code> acts as a context manager. The context loads the model into the execution device (e.g. VRAM on CUDA systems), locks the model in the execution device for the duration of the context, and returns the model. Use it like this:</p> <pre><code>model_info = loader.get_model_by_key('f13dd932c0c35c22dcb8d6cda4203764', SubModelType('vae'))\nwith model_info as vae:\n    image = vae.decode(latents)[0]\n</code></pre> <p><code>get_model_by_key()</code> may raise any of the following exceptions:</p> <ul> <li><code>UnknownModelException</code>   -- key not in database</li> <li><code>ModelNotFoundException</code>  -- key in database but model not found at path</li> <li><code>NotImplementedException</code> -- the loader doesn't know how to load this type of model</li> </ul>"},{"location":"contributing/MODEL_MANAGER/#emitting-model-loading-events","title":"Emitting model loading events","text":"<p>When the <code>context</code> argument is passed to <code>load_model_*()</code>, it will retrieve the invocation event bus from the passed <code>InvocationContext</code> object to emit events on the invocation bus. The two events are \"model_load_started\" and \"model_load_completed\". Both carry the following payload:</p> <pre><code>payload=dict(\n    queue_id=queue_id,\n    queue_item_id=queue_item_id,\n    queue_batch_id=queue_batch_id,\n    graph_execution_state_id=graph_execution_state_id,\n    model_key=model_key,\n    submodel_type=submodel,\n    hash=model_info.hash,\n    location=str(model_info.location),\n    precision=str(model_info.precision),\n)\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#adding-model-loaders","title":"Adding Model Loaders","text":"<p>Model loaders are small classes that inherit from the <code>ModelLoader</code> base class. They typically implement one method <code>_load_model()</code> whose signature is:</p> <pre><code>def _load_model(\n    self,\n    model_path: Path,\n    model_variant: Optional[ModelRepoVariant] = None,\n    submodel_type: Optional[SubModelType] = None,\n) -&gt; AnyModel:\n</code></pre> <p><code>_load_model()</code> will be passed the path to the model on disk, an optional repository variant (used by the diffusers loaders to select, e.g.  the <code>fp16</code> variant, and an optional submodel_type for main and onnx models.</p> <p>To install a new loader, place it in <code>invokeai/backend/model_manager/load/model_loaders</code>. Inherit from <code>ModelLoader</code> and use the <code>@ModelLoaderRegistry.register()</code> decorator to indicate what type of models the loader can handle.</p> <p>Here is a complete example from <code>generic_diffusers.py</code>, which is able to load several different diffusers types:</p> <pre><code>from pathlib import Path\nfrom typing import Optional\n\nfrom invokeai.backend.model_manager import (\n    AnyModel,\n    BaseModelType,\n    ModelFormat,\n    ModelRepoVariant,\n    ModelType,\n    SubModelType,\n)\nfrom .. import ModelLoader, ModelLoaderRegistry\n\n\n@ModelLoaderRegistry.register(base=BaseModelType.Any, type=ModelType.CLIPVision, format=ModelFormat.Diffusers)\n@ModelLoaderRegistry.register(base=BaseModelType.Any, type=ModelType.T2IAdapter, format=ModelFormat.Diffusers)\nclass GenericDiffusersLoader(ModelLoader):\n    \"\"\"Class to load simple diffusers models.\"\"\"\n\n    def _load_model(\n        self,\n        model_path: Path,\n        model_variant: Optional[ModelRepoVariant] = None,\n        submodel_type: Optional[SubModelType] = None,\n    ) -&gt; AnyModel:\n        model_class = self._get_hf_load_class(model_path)\n        if submodel_type is not None:\n            raise Exception(f\"There are no submodels in models of type {model_class}\")\n        variant = model_variant.value if model_variant else None\n        result: AnyModel = model_class.from_pretrained(model_path, torch_dtype=self._torch_dtype, variant=variant)  # type: ignore\n        return result\n</code></pre> <p>Note that a loader can register itself to handle several different model types. An exception will be raised if more than one loader tries to register the same model type.</p>"},{"location":"contributing/MODEL_MANAGER/#conversion","title":"Conversion","text":"<p>Some models require conversion to diffusers format before they can be loaded. These loaders should override two additional methods:</p> <pre><code>_needs_conversion(self, config: AnyModelConfig, model_path: Path, dest_path: Path) -&gt; bool\n_convert_model(self, config: AnyModelConfig, model_path: Path, output_path: Path) -&gt; Path:\n</code></pre> <p>The first method accepts the model configuration, the path to where the unmodified model is currently installed, and a proposed destination for the converted model. This method returns True if the model needs to be converted. It typically does this by comparing the last modification time of the original model file to the modification time of the converted model. In some cases you will also want to check the modification date of the configuration record, in the event that the user has changed something like the scheduler prediction type that will require the model to be re-converted. See <code>controlnet.py</code> for an example of this logic.</p> <p>The second method accepts the model configuration, the path to the original model on disk, and the desired output path for the converted model. It does whatever it needs to do to get the model into diffusers format, and returns the Path of the resulting model. (The path should ordinarily be the same as <code>output_path</code>.)</p>"},{"location":"contributing/MODEL_MANAGER/#the-modelmanagerservice-object","title":"The ModelManagerService object","text":"<p>For convenience, the API provides a <code>ModelManagerService</code> object which gives a single point of access to the major model manager services. This object is created at initialization time and can be found in the global <code>ApiDependencies.invoker.services.model_manager</code> object, or in <code>context.services.model_manager</code> from within an invocation.</p> <p>In the examples below, we have retrieved the manager using: <pre><code>mm = ApiDependencies.invoker.services.model_manager\n</code></pre></p> <p>The following properties and methods will be available:</p>"},{"location":"contributing/MODEL_MANAGER/#mmstore","title":"mm.store","text":"<p>This retrieves the <code>ModelRecordService</code> associated with the manager. Example:</p> <pre><code>configs = mm.store.get_model_by_attr(name='stable-diffusion-v1-5')\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#mminstall","title":"mm.install","text":"<p>This retrieves the <code>ModelInstallService</code> associated with the manager. Example:</p> <pre><code>job = mm.install.heuristic_import(`https://civitai.com/models/58390/detail-tweaker-lora-lora`)\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#mmload","title":"mm.load","text":"<p>This retrieves the <code>ModelLoaderService</code> associated with the manager. Example:</p> <pre><code>configs = mm.store.get_model_by_attr(name='stable-diffusion-v1-5')\nassert len(configs) &gt; 0\n\nloaded_model = mm.load.load_model(configs[0])\n</code></pre> <p>The model manager also offers a few convenience shortcuts for loading models:</p>"},{"location":"contributing/MODEL_MANAGER/#mmload_model_by_configmodel_config-submodel-context-loadedmodel","title":"mm.load_model_by_config(model_config, [submodel], [context]) -&gt; LoadedModel","text":"<p>Same as <code>mm.load.load_model()</code>.</p>"},{"location":"contributing/MODEL_MANAGER/#mmload_model_by_attrmodel_name-base_model-model_type-submodel-context-loadedmodel","title":"mm.load_model_by_attr(model_name, base_model, model_type, [submodel], [context]) -&gt; LoadedModel","text":"<p>This accepts the combination of the model's name, type and base, which it passes to the model record config store for retrieval. If a unique model config is found, this method returns a <code>LoadedModel</code>. It can raise the following exceptions:</p> <pre><code>UnknownModelException -- model with these attributes not known\nNotImplementedException -- the loader doesn't know how to load this type of model\nValueError -- more than one model matches this combination of base/type/name\n</code></pre>"},{"location":"contributing/MODEL_MANAGER/#mmload_model_by_keykey-submodel-context-loadedmodel","title":"mm.load_model_by_key(key, [submodel], [context]) -&gt; LoadedModel","text":"<p>This method takes a model key, looks it up using the <code>ModelRecordServiceBase</code> object in <code>mm.store</code>, and passes the returned model configuration to <code>load_model_by_config()</code>.  It may raise a <code>NotImplementedException</code>.</p>"},{"location":"contributing/TESTS/","title":"InvokeAI Backend Tests","text":"<p>We use <code>pytest</code> to run the backend python tests. (See pyproject.toml for the default <code>pytest</code> options.)</p>"},{"location":"contributing/TESTS/#fast-vs-slow","title":"Fast vs. Slow","text":"<p>All tests are categorized as either 'fast' (no test annotation) or 'slow' (annotated with the <code>@pytest.mark.slow</code> decorator).</p> <p>'Fast' tests are run to validate every PR, and are fast enough that they can be run routinely during development.</p> <p>'Slow' tests are currently only run manually on an ad-hoc basis. In the future, they may be automated to run nightly. Most developers are only expected to run the 'slow' tests that directly relate to the feature(s) that they are working on.</p> <p>As a rule of thumb, tests should be marked as 'slow' if there is a chance that they take &gt;1s (e.g. on a CPU-only machine with slow internet connection). Common examples of slow tests are tests that depend on downloading a model, or running model inference.</p>"},{"location":"contributing/TESTS/#running-tests","title":"Running Tests","text":"<p>Below are some common test commands: <pre><code># Run the fast tests. (This implicitly uses the configured default option: `-m \"not slow\"`.)\npytest tests/\n\n# Equivalent command to run the fast tests.\npytest tests/ -m \"not slow\"\n\n# Run the slow tests.\npytest tests/ -m \"slow\"\n\n# Run the slow tests from a specific file.\npytest tests/path/to/slow_test.py -m \"slow\"\n\n# Run all tests (fast and slow).\npytest tests -m \"\"\n</code></pre></p>"},{"location":"contributing/TESTS/#test-organization","title":"Test Organization","text":"<p>All backend tests are in the <code>tests/</code> directory. This directory mirrors the organization of the <code>invokeai/</code> directory. For example, tests for <code>invokeai/model_management/model_manager.py</code> would be found in <code>tests/model_management/test_model_manager.py</code>.</p> <p>TODO: The above statement is aspirational. A re-organization of legacy tests is required to make it true.</p>"},{"location":"contributing/TESTS/#tests-that-depend-on-models","title":"Tests that depend on models","text":"<p>There are a few things to keep in mind when adding tests that depend on models.</p> <ol> <li>If a required model is not already present, it should automatically be downloaded as part of the test setup.</li> <li>If a model is already downloaded, it should not be re-downloaded unnecessarily.</li> <li>Take reasonable care to keep the total number of models required for the tests low. Whenever possible, re-use models that are already required for other tests. If you are adding a new model, consider including a comment to explain why it is required/unique.</li> </ol> <p>There are several utilities to help with model setup for tests. Here is a sample test that depends on a model: <pre><code>import pytest\nimport torch\n\nfrom invokeai.backend.model_management.models.base import BaseModelType, ModelType\nfrom invokeai.backend.util.test_utils import install_and_load_model\n\n@pytest.mark.slow\ndef test_model(model_installer, torch_device):\n    model_info = install_and_load_model(\n        model_installer=model_installer,\n        model_path_id_or_url=\"HF/dummy_model_id\",\n        model_name=\"dummy_model\",\n        base_model=BaseModelType.StableDiffusion1,\n        model_type=ModelType.Dummy,\n    )\n\n    dummy_input = build_dummy_input(torch_device)\n\n    with torch.no_grad(), model_info as model:\n        model.to(torch_device, dtype=torch.float32)\n        output = model(dummy_input)\n\n    # Validate output...\n</code></pre></p>"},{"location":"contributing/TESTS/#test-coverage","title":"Test Coverage","text":"<p>To review test coverage, append <code>--cov</code> to your pytest command: <pre><code>pytest tests/ --cov\n</code></pre></p> <p>Test outcomes and coverage will be reported in the terminal. In addition, a more detailed report is created in both XML and HTML format in the <code>./coverage</code> folder. The HTML output is particularly helpful in identifying untested statements where coverage should be improved. The HTML report can be viewed by opening <code>./coverage/html/index.html</code>.</p> HTML coverage report output <p></p> <p></p>"},{"location":"contributing/contribution_guides/development/","title":"Development","text":""},{"location":"contributing/contribution_guides/development/#what-do-i-need-to-know-to-help","title":"What do I need to know to help?","text":"<p>If you are looking to help to with a code contribution, InvokeAI uses several different technologies under the hood: Python (Pydantic, FastAPI, diffusers) and Typescript (React, Redux Toolkit, ChakraUI, Mantine, Konva). Familiarity with StableDiffusion and image generation concepts is helpful, but not essential. </p>"},{"location":"contributing/contribution_guides/development/#get-started","title":"Get Started","text":"<p>To get started, take a look at our new contributors checklist</p> <p>Once you're setup, for more information, you can review the documentation specific to your area of interest:</p> <p>If you don't feel ready to make a code contribution yet, no problem! You can also help out in other ways, such as documentation, translation or helping support other users and triage issues as they're reported in GitHub.</p> <p>There are two paths to making a development contribution: </p> <ol> <li>Choosing an open issue to address. Open issues can be found in the Issues section of the InvokeAI repository. These are tagged by the issue type (bug, enhancement, etc.) along with the \u201cgood first issues\u201d tag denoting if they are suitable for first time contributors.<ol> <li>Additional items can be found on our roadmap. The roadmap is organized in terms of priority, and contains features of varying size and complexity. If there is an inflight item you\u2019d like to help with, reach out to the contributor assigned to the item to see how you can help. </li> </ol> </li> <li>Opening a new issue or feature to add. Please make sure you have searched through existing issues before creating new ones.</li> </ol> <p>Regardless of what you choose, please post in the  #dev-chat channel of the Discord before you start development in order to confirm that the issue or feature is aligned with the current direction of the project. We value our contributors time and effort and want to ensure that no one\u2019s time is being misspent.</p>"},{"location":"contributing/contribution_guides/development/#invokeai-architecure","title":"InvokeAI Architecure","text":""},{"location":"contributing/contribution_guides/development/#frontend-documentation","title":"Frontend Documentation","text":""},{"location":"contributing/contribution_guides/development/#node-documentation","title":"Node Documentation","text":""},{"location":"contributing/contribution_guides/development/#local-development","title":"Local Development","text":""},{"location":"contributing/contribution_guides/development/#best-practices","title":"Best Practices:","text":"<ul> <li>Keep your pull requests small. Smaller pull requests are more likely to be accepted and merged</li> <li>Comments! Commenting your code helps reviewers easily understand your contribution</li> <li>Use Python and Typescript\u2019s typing systems, and consider using an editor with LSP support to streamline development</li> <li>Make all communications public. This ensure knowledge is shared with the whole community</li> </ul>"},{"location":"contributing/contribution_guides/development/#where-can-i-go-for-help","title":"Where can I go for help?","text":"<p>If you need help, you can ask questions in the #dev-chat channel of the Discord.</p> <p>For frontend related work, @psychedelicious is the best person to reach out to. </p> <p>For backend related work, please reach out to @blessedcoolant, @lstein, @StAlKeR7779 or @psychedelicious.</p>"},{"location":"contributing/contribution_guides/development/#what-does-the-code-of-conduct-mean-for-me","title":"What does the Code of Conduct mean for me?","text":"<p>Our Code of Conduct  means that you are responsible for treating everyone on the project with respect and courtesy regardless of their identity. If you are the victim of any inappropriate behavior or comments as described in our Code of Conduct, we are here for you and will do the best to ensure that the abuser is reprimanded appropriately, per our code.</p>"},{"location":"contributing/contribution_guides/documentation/","title":"Documentation","text":"<p>Documentation is an important part of any open source project. It provides a clear and concise way to communicate how the software works, how to use it, and how to troubleshoot issues. Without proper documentation, it can be difficult for users to understand the purpose and functionality of the project. </p>"},{"location":"contributing/contribution_guides/documentation/#contributing","title":"Contributing","text":"<p>All documentation is maintained in the InvokeAI GitHub repository. If you come across documentation that is out of date or incorrect, please submit a pull request with the necessary changes. </p> <p>When updating or creating documentation, please keep in mind InvokeAI is a tool for everyone, not just those who have familiarity with generative art. </p>"},{"location":"contributing/contribution_guides/documentation/#help-questions","title":"Help &amp; Questions","text":"<p>Please ping @imic or @hipsterusername in the Discord if you have any questions.</p>"},{"location":"contributing/contribution_guides/newContributorChecklist/","title":"New Contributor Guide","text":"<p>If you're a new contributor to InvokeAI or Open Source Projects, this is the guide for you. </p>"},{"location":"contributing/contribution_guides/newContributorChecklist/#new-contributor-checklist","title":"New Contributor Checklist","text":"<ul> <li> Set up your local development environment &amp; fork of InvokAI by following the steps outlined here</li> <li> Set up your local tooling with this guide. Feel free to skip this step if you already have tooling you're comfortable with. </li> <li> Familiarize yourself with Git &amp; our project structure by reading through the development documentation</li> <li> Join the #dev-chat channel of the Discord</li> <li> Choose an issue to work on! This can be achieved by asking in the #dev-chat channel, tackling a good first issue or finding an item on the roadmap. If nothing in any of those places catches your eye, feel free to work on something of interest to you! </li> <li> Make your first Pull Request with the guide below</li> <li> Happy development! Don't be afraid to ask for help - we're happy to help you contribute!</li> </ul>"},{"location":"contributing/contribution_guides/newContributorChecklist/#how-do-i-make-a-contribution","title":"How do I make a contribution?","text":"<p>Never made an open source contribution before? Wondering how contributions work in our project? Here's a quick rundown!</p> <p>Before starting these steps, ensure you have your local environment configured for development.</p> <ol> <li>Find a good first issue that you are interested in addressing or a feature that you would like to add. Then, reach out to our team in the #dev-chat channel of the Discord to ensure you are  setup for success. </li> <li>Fork the InvokeAI repository to your GitHub profile. This means that you will have a copy of the repository under\u00a0your-GitHub-username/InvokeAI.</li> <li>Clone the repository to your local machine using: <pre><code>git clone https://github.com/your-GitHub-username/InvokeAI.git\n</code></pre> If you're unfamiliar with using Git through the commandline, GitHub Desktop is a easy-to-use alternative with a UI. You can do all the same steps listed here, but through the interface. </li> <li>Create a new branch for your fix using: <pre><code>git checkout -b branch-name-here\n</code></pre></li> <li>Make the appropriate changes for the issue you are trying to address or the feature that you want to add.</li> <li>Add the file contents of the changed files to the \"snapshot\" git uses to manage the state of the project, also known as the index: <pre><code>git add -A\n</code></pre></li> <li>Store the contents of the index with a descriptive message. <pre><code>git commit -m \"Insert a short message of the changes made here\"\n</code></pre></li> <li>Push the changes to the remote repository using <pre><code>git push origin branch-name-here\n</code></pre></li> <li>Submit a pull request to the main branch of the InvokeAI repository. If you're not sure how to, follow this guide</li> <li>Title the pull request with a short description of the changes made and the issue or bug number associated with your change. For example, you can title an issue like so \"Added more log outputting to resolve #1234\".</li> <li>In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer. It's OK if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it!</li> <li>Wait for the pull request to be reviewed by other collaborators.</li> <li>Make changes to the pull request if the reviewer(s) recommend them.</li> <li>Celebrate your success after your pull request is merged!</li> </ol> <p>If you\u2019d like to learn more about contributing to Open Source projects, here is a\u00a0Getting Started Guide. </p>"},{"location":"contributing/contribution_guides/newContributorChecklist/#best-practices","title":"Best Practices:","text":"<ul> <li>Keep your pull requests small. Smaller pull requests are more likely to be accepted and merged</li> <li>Comments! Commenting your code helps reviewers easily understand your contribution</li> <li>Use Python and Typescript\u2019s typing systems, and consider using an editor with LSP support to streamline development</li> <li>Make all communications public. This ensure knowledge is shared with the whole community</li> </ul>"},{"location":"contributing/contribution_guides/newContributorChecklist/#where-can-i-go-for-help","title":"Where can I go for help?","text":"<p>If you need help, you can ask questions in the #dev-chat channel of the Discord.</p> <p>For frontend related work, @pyschedelicious is the best person to reach out to. </p> <p>For backend related work, please reach out to @blessedcoolant, @lstein, @StAlKeR7779 or @pyschedelicious.</p>"},{"location":"contributing/contribution_guides/translation/","title":"Translation","text":"<p>InvokeAI uses\u00a0Weblate\u00a0for translation. Weblate is a FOSS project providing a scalable translation service. Weblate automates the tedious parts of managing translation of a growing project, and the service is generously provided at no cost to FOSS projects like InvokeAI.</p>"},{"location":"contributing/contribution_guides/translation/#contributing","title":"Contributing","text":"<p>If you'd like to contribute by adding or updating a translation, please visit our\u00a0Weblate project. You'll need to sign in with your GitHub account (a number of other accounts are supported, including Google).</p> <p>Once signed in, select a language and then the Web UI component. From here you can Browse and Translate strings from English to your chosen language. Zen mode offers a simpler translation experience.</p> <p>Your changes will be attributed to you in the automated PR process; you don't need to do anything else.</p>"},{"location":"contributing/contribution_guides/translation/#help-questions","title":"Help &amp; Questions","text":"<p>Please check Weblate's\u00a0documentation\u00a0or ping @Harvestor on Discord if you have any questions.</p>"},{"location":"contributing/contribution_guides/translation/#thanks","title":"Thanks","text":"<p>Thanks to the InvokeAI community for their efforts to translate the project!</p>"},{"location":"contributing/contribution_guides/tutorials/","title":"Tutorials","text":"<p>Tutorials help new &amp; existing users expand their abilty to use InvokeAI to the full extent of our features and services.  </p> <p>Currently, we have a set of tutorials available on our YouTube channel, but as InvokeAI continues to evolve with new updates, we want to ensure that we are giving our users the resources they need to succeed. </p> <p>Tutorials can be in the form of videos or article walkthroughs on a subject of your choice. We recommend focusing tutorials on the key image generation methods, or on a specific component within one of the image generation methods.</p>"},{"location":"contributing/contribution_guides/tutorials/#contributing","title":"Contributing","text":"<p>Please reach out to @imic or @hipsterusername on Discord to help create tutorials for InvokeAI.</p>"},{"location":"deprecated/2to3/","title":"InvokeAI 2.3","text":""},{"location":"deprecated/2to3/#important-changes-since-version-23","title":"Important Changes Since Version 2.3","text":""},{"location":"deprecated/2to3/#nodes","title":"Nodes","text":"<p>Behind the scenes, InvokeAI has been completely rewritten to support \"nodes,\" small unitary operations that can be combined into graphs to form arbitrary workflows. For example, there is a prompt node that processes the prompt string and feeds it to a text2latent node that generates a latent image. The latents are then fed to a latent2image node that translates the latent image into a PNG.</p> <p>The WebGUI has a node editor that allows you to graphically design and execute custom node graphs. The ability to save and load graphs is still a work in progress, but coming soon.</p>"},{"location":"deprecated/2to3/#command-line-interface-retired","title":"Command-Line Interface Retired","text":"<p>All \"invokeai\" command-line interfaces have been retired as of version 3.4.</p> <p>To launch the Web GUI from the command-line, use the command <code>invokeai-web</code> rather than the traditional <code>invokeai --web</code>.</p>"},{"location":"deprecated/2to3/#controlnet","title":"ControlNet","text":"<p>This version of InvokeAI features ControlNet, a system that allows you to achieve exact poses for human and animal figures by providing a model to follow. Full details are found in ControlNet</p>"},{"location":"deprecated/2to3/#new-schedulers","title":"New Schedulers","text":"<p>The list of schedulers has been completely revamped and brought up to date:</p> Short Name Scheduler Notes ddim DDIMScheduler ddpm DDPMScheduler deis DEISMultistepScheduler lms LMSDiscreteScheduler pndm PNDMScheduler heun HeunDiscreteScheduler original noise schedule heun_k HeunDiscreteScheduler using karras noise schedule euler EulerDiscreteScheduler original noise schedule euler_k EulerDiscreteScheduler using karras noise schedule kdpm_2 KDPM2DiscreteScheduler kdpm_2_a KDPM2AncestralDiscreteScheduler dpmpp_2s DPMSolverSinglestepScheduler dpmpp_2m DPMSolverMultistepScheduler original noise scnedule dpmpp_2m_k DPMSolverMultistepScheduler using karras noise schedule unipc UniPCMultistepScheduler CPU only lcm LCMScheduler <p>Please see 3.0.0 Release Notes for further details.</p>"},{"location":"deprecated/CLI/","title":"CLI","text":""},{"location":"deprecated/CLI/#interactive-command-line-interface","title":"Interactive Command Line Interface","text":"<p>The InvokeAI command line interface (CLI) provides scriptable access to InvokeAI's features.Some advanced features are only available through the CLI, though they eventually find their way into the WebUI.</p> <p>The CLI is accessible from the <code>invoke.sh</code>/<code>invoke.bat</code> launcher by selecting option (1). Alternatively, it can be launched directly from the command line by activating the InvokeAI environment and giving the command:</p> <pre><code>invokeai\n</code></pre> <p>After some startup messages, you will be presented with the <code>invoke&gt;</code> prompt. Here you can type prompts to generate images and issue other commands to load and manipulate generative models. The CLI has a large number of command-line options that control its behavior. To get a concise summary of the options, call <code>invokeai</code> with the <code>--help</code> argument:</p> <pre><code>invokeai --help\n</code></pre> <p>The script uses the readline library to allow for in-line editing, command history (Up and Down), autocompletion, and more. To help keep track of which prompts generated which images, the script writes a log file of image names and prompts to the selected output directory.</p> <p>Here is a typical session</p> <pre><code>PS1:C:\\Users\\fred&gt; invokeai\n* Initializing, be patient...\n* Initializing, be patient...\n&gt;&gt; Initialization file /home/lstein/invokeai/invokeai.init found. Loading...\n&gt;&gt; Internet connectivity is True\n&gt;&gt; InvokeAI, version 2.3.0-rc5\n&gt;&gt; InvokeAI runtime directory is \"/home/lstein/invokeai\"\n&gt;&gt; GFPGAN Initialized\n&gt;&gt; CodeFormer Initialized\n&gt;&gt; ESRGAN Initialized\n&gt;&gt; Using device_type cuda\n&gt;&gt; xformers memory-efficient attention is available and enabled\n     (...more initialization messages...)\n* Initialization done! Awaiting your command (-h for help, 'q' to quit)\ninvoke&gt; ashley judd riding a camel -n2 -s150\nOutputs:\n   outputs/img-samples/00009.png: \"ashley judd riding a camel\" -n2 -s150 -S 416354203\n   outputs/img-samples/00010.png: \"ashley judd riding a camel\" -n2 -s150 -S 1362479620\n\ninvoke&gt; \"there's a fly in my soup\" -n6 -g\n    outputs/img-samples/00011.png: \"there's a fly in my soup\" -n6 -g -S 2685670268\n    seeds for individual rows: [2685670268, 1216708065, 2335773498, 822223658, 714542046, 3395302430]\ninvoke&gt; q\n</code></pre> <p></p>"},{"location":"deprecated/CLI/#arguments","title":"Arguments","text":"<p>The script recognizes a series of command-line switches that will change important global defaults, such as the directory for image outputs and the location of the model weight files.</p>"},{"location":"deprecated/CLI/#list-of-arguments-recognized-at-the-command-line","title":"List of arguments recognized at the command line","text":"<p>These command-line arguments can be passed to <code>invoke.py</code> when you first run it from the Windows, Mac or Linux command line. Some set defaults that can be overridden on a per-prompt basis (see List of prompt arguments. Others</p> Argument  Shortcut  Default  Description <code>--help</code> <code>-h</code> Print a concise help message. <code>--outdir &lt;path&gt;</code> <code>-o&lt;path&gt;</code> <code>outputs/img_samples</code> Location for generated images. <code>--prompt_as_dir</code> <code>-p</code> <code>False</code> Name output directories using the prompt text. <code>--from_file &lt;path&gt;</code> <code>None</code> Read list of prompts from a file. Use <code>-</code> to read from standard input <code>--model &lt;modelname&gt;</code> <code>stable-diffusion-1.5</code> Loads the initial model specified in configs/models.yaml. <code>--ckpt_convert</code> <code>False</code> If provided both .ckpt and .safetensors files will be auto-converted into diffusers format in memory <code>--autoconvert &lt;path&gt;</code> <code>None</code> On startup, scan the indicated directory for new .ckpt/.safetensor files and automatically convert and import them <code>--precision</code> <code>fp16</code> Provide <code>fp32</code> for full precision mode, <code>fp16</code> for half-precision. <code>fp32</code> needed for Macintoshes and some NVidia cards. <code>--png_compression &lt;0-9&gt;</code> <code>-z&lt;0-9&gt;</code> <code>6</code> Select level of compression for output files, from 0 (no compression) to 9 (max compression) <code>--safety-checker</code> <code>False</code> Activate safety checker for NSFW and other potentially disturbing imagery <code>--patchmatch</code>, <code>--no-patchmatch</code> <code>--patchmatch</code> Load/Don't load the PatchMatch inpainting extension <code>--xformers</code>, <code>--no-xformers</code> <code>--xformers</code> Load/Don't load the Xformers memory-efficient attention module (CUDA only) <code>--web</code> <code>False</code> Start in web server mode <code>--host &lt;ip addr&gt;</code> <code>localhost</code> Which network interface web server should listen on. Set to 0.0.0.0 to listen on any. <code>--port &lt;port&gt;</code> <code>9090</code> Which port web server should listen for requests on. <code>--config &lt;path&gt;</code> <code>configs/models.yaml</code> Configuration file for models and their weights. <code>--iterations &lt;int&gt;</code> <code>-n&lt;int&gt;</code> <code>1</code> How many images to generate per prompt. <code>--width &lt;int&gt;</code> <code>-W&lt;int&gt;</code> <code>512</code> Width of generated image <code>--height &lt;int&gt;</code> <code>-H&lt;int&gt;</code> <code>512</code> Height of generated image <code>--strength &lt;float&gt;</code> <code>-s&lt;float&gt;</code> <code>0.75</code> For img2img: how hard to try to match the prompt to the initial image. Ranges from 0.0-0.99, with higher values replacing the initial image completely. <code>--fit</code> <code>-F</code> <code>False</code> For img2img: scale the init image to fit into the specified -H and -W dimensions <code>--grid</code> <code>-g</code> <code>False</code> Save all image series as a grid rather than individually. <code>--sampler &lt;sampler&gt;</code> <code>-A&lt;sampler&gt;</code> <code>k_lms</code> Sampler to use. Use <code>-h</code> to get list of available samplers. <code>--seamless</code> <code>False</code> Create interesting effects by tiling elements of the image. <code>--embedding_path &lt;path&gt;</code> <code>None</code> Path to pre-trained embedding manager checkpoints, for custom models <code>--gfpgan_model_path</code> <code>experiments/pretrained_models/GFPGANv1.4.pth</code> Path to GFPGAN model file. <code>--free_gpu_mem</code> <code>False</code> Free GPU memory after sampling, to allow image decoding and saving in low VRAM conditions <code>--precision</code> <code>auto</code> Set model precision, default is selected by device. Options: auto, float32, float16, autocast <p>These arguments are deprecated but still work</p> Argument Shortcut Default Description <code>--full_precision</code> <code>False</code> Same as <code>--precision=fp32</code> <code>--weights &lt;path&gt;</code> <code>None</code> Path to weights file; use <code>--model stable-diffusion-1.4</code> instead <code>--laion400m</code> <code>-l</code> <code>False</code> Use older LAION400m weights; use <code>--model=laion400m</code> instead <p>Tip</p> <p>On Windows systems, you may run into   problems when passing the invoke script standard backslashed path   names because the Python interpreter treats \"\\\" as an escape.   You can either double your slashes (ick): <code>C:\\\\path\\\\to\\\\my\\\\file</code>, or   use Linux/Mac style forward slashes (better): <code>C:/path/to/my/file</code>.</p>"},{"location":"deprecated/CLI/#the-invokeai-initialization-file","title":"The .invokeai initialization file","text":"<p>To start up invoke.py with your preferred settings, place your desired startup options in a file in your home directory named <code>.invokeai</code> The file should contain the startup options as you would type them on the command line (<code>--steps=10 --grid</code>), one argument per line, or a mixture of both using any of the accepted command switch formats:</p> <p>my unmodified initialization file</p> ~/.invokeai<pre><code># InvokeAI initialization file\n# This is the InvokeAI initialization file, which contains command-line default values.\n# Feel free to edit. If anything goes wrong, you can re-initialize this file by deleting\n# or renaming it and then running invokeai-configure again.\n\n# The --root option below points to the folder in which InvokeAI stores its models, configs and outputs.\n--root=\"/Users/mauwii/invokeai\"\n\n# the --outdir option controls the default location of image files.\n--outdir=\"/Users/mauwii/invokeai/outputs\"\n\n# You may place other  frequently-used startup commands here, one or more per line.\n# Examples:\n# --web --host=0.0.0.0\n# --steps=20\n# -Ak_euler_a -C10.0\n</code></pre> <p>Note</p> <p>The  initialization file only accepts the command line arguments. There are additional arguments that you can provide on the <code>invoke&gt;</code> command line (such as <code>-n</code> or <code>--iterations</code>) that cannot be entered into this file. Also be alert for empty blank lines at the end of the file, which will cause an arguments error at startup time.</p>"},{"location":"deprecated/CLI/#list-of-prompt-arguments","title":"List of prompt arguments","text":"<p>After the invoke.py script initializes, it will present you with a <code>invoke&gt;</code> prompt. Here you can enter information to generate images from text (txt2img), to embellish an existing image or sketch (img2img), or to selectively alter chosen regions of the image (inpainting).</p>"},{"location":"deprecated/CLI/#txt2img","title":"txt2img","text":"<pre><code>invoke&gt; waterfall and rainbow -W640 -H480\n</code></pre> <p>This will create the requested image with the dimensions 640 (width) and 480 (height).</p> <p>Here are the invoke&gt; command that apply to txt2img:</p> Argument  Shortcut  Default  Description \"my prompt\" Text prompt to use. The quotation marks are optional. <code>--width &lt;int&gt;</code> <code>-W&lt;int&gt;</code> <code>512</code> Width of generated image <code>--height &lt;int&gt;</code> <code>-H&lt;int&gt;</code> <code>512</code> Height of generated image <code>--iterations &lt;int&gt;</code> <code>-n&lt;int&gt;</code> <code>1</code> How many images to generate from this prompt <code>--steps &lt;int&gt;</code> <code>-s&lt;int&gt;</code> <code>50</code> How many steps of refinement to apply <code>--cfg_scale &lt;float&gt;</code> <code>-C&lt;float&gt;</code> <code>7.5</code> How hard to try to match the prompt to the generated image; any number greater than 1.0 works, but the useful range is roughly 5.0 to 20.0 <code>--seed &lt;int&gt;</code> <code>-S&lt;int&gt;</code> <code>None</code> Set the random seed for the next series of images. This can be used to recreate an image generated previously. <code>--sampler &lt;sampler&gt;</code> <code>-A&lt;sampler&gt;</code> <code>k_lms</code> Sampler to use. Use -h to get list of available samplers. <code>--karras_max &lt;int&gt;</code> <code>29</code> When using k_* samplers, set the maximum number of steps before shifting from using the Karras noise schedule (good for low step counts) to the LatentDiffusion noise schedule (good for high step counts) This value is sticky. [29] <code>--hires_fix</code> Larger images often have duplication artefacts. This option suppresses duplicates by generating the image at low res, and then using img2img to increase the resolution <code>--png_compression &lt;0-9&gt;</code> <code>-z&lt;0-9&gt;</code> <code>6</code> Select level of compression for output files, from 0 (no compression) to 9 (max compression) <code>--grid</code> <code>-g</code> <code>False</code> Turn on grid mode to return a single image combining all the images generated by this prompt <code>--individual</code> <code>-i</code> <code>True</code> Turn off grid mode (deprecated; leave off --grid instead) <code>--outdir &lt;path&gt;</code> <code>-o&lt;path&gt;</code> <code>outputs/img_samples</code> Temporarily change the location of these images <code>--seamless</code> <code>False</code> Activate seamless tiling for interesting effects <code>--seamless_axes</code> <code>x,y</code> Specify which axes to use circular convolution on. <code>--log_tokenization</code> <code>-t</code> <code>False</code> Display a color-coded list of the parsed tokens derived from the prompt <code>--skip_normalization</code> <code>-x</code> <code>False</code> Weighted subprompts will not be normalized. See Weighted Prompts <code>--upscale &lt;int&gt; &lt;float&gt;</code> <code>-U &lt;int&gt; &lt;float&gt;</code> <code>-U 1 0.75</code> Upscale image by magnification factor (2, 4), and set strength of upscaling (0.0-1.0). If strength not set, will default to 0.75. <code>--facetool_strength &lt;float&gt;</code> <code>-G &lt;float&gt;</code> <code>-G0</code> Fix faces (defaults to using the GFPGAN algorithm); argument indicates how hard the algorithm should try (0.0-1.0) <code>--facetool &lt;name&gt;</code> <code>-ft &lt;name&gt;</code> <code>-ft gfpgan</code> Select face restoration algorithm to use: gfpgan, codeformer <code>--codeformer_fidelity</code> <code>-cf &lt;float&gt;</code> <code>0.75</code> Used along with CodeFormer. Takes values between 0 and 1. 0 produces high quality but low accuracy. 1 produces high accuracy but low quality <code>--save_original</code> <code>-save_orig</code> <code>False</code> When upscaling or fixing faces, this will cause the original image to be saved rather than replaced. <code>--variation &lt;float&gt;</code> <code>-v&lt;float&gt;</code> <code>0.0</code> Add a bit of noise (0.0=none, 1.0=high) to the image in order to generate a series of variations. Usually used in combination with <code>-S&lt;seed&gt;</code> and <code>-n&lt;int&gt;</code> to generate a series a riffs on a starting image. See Variations. <code>--with_variations &lt;pattern&gt;</code> <code>None</code> Combine two or more variations. See Variations for now to use this. <code>--save_intermediates &lt;n&gt;</code> <code>None</code> Save the image from every nth step into an \"intermediates\" folder inside the output directory <code>--h_symmetry_time_pct &lt;float&gt;</code> <code>None</code> Create symmetry along the X axis at the desired percent complete of the generation process. (Must be between 0.0 and 1.0; set to a very small number like 0.0001 for just after the first step of generation.) <code>--v_symmetry_time_pct &lt;float&gt;</code> <code>None</code> Create symmetry along the Y axis at the desired percent complete of the generation process. (Must be between 0.0 and 1.0; set to a very small number like 0.0001 for just after the first step of generation.) <p>Note</p> <p>the width and height of the image must be multiples of 64. You can provide different values, but they will be rounded down to the nearest multiple of 64.</p> <p>This is a example of img2img</p> <pre><code>invoke&gt; waterfall and rainbow -I./vacation-photo.png -W640 -H480 --fit\n</code></pre> <p>This will modify the indicated vacation photograph by making it more like the prompt. Results will vary greatly depending on what is in the image. We also ask to --fit the image into a box no bigger than 640x480. Otherwise the image size will be identical to the provided photo and you may run out of memory if it is large.</p> <p>In addition to the command-line options recognized by txt2img, img2img accepts additional options:</p> Argument  Shortcut Default Description <code>--init_img &lt;path&gt;</code> <code>-I&lt;path&gt;</code> <code>None</code> Path to the initialization image <code>--fit</code> <code>-F</code> <code>False</code> Scale the image to fit into the specified -H and -W dimensions <code>--strength &lt;float&gt;</code> <code>-s&lt;float&gt;</code> <code>0.75</code> How hard to try to match the prompt to the initial image. Ranges from 0.0-0.99, with higher values replacing the initial image completely."},{"location":"deprecated/CLI/#inpainting","title":"inpainting","text":"<pre><code>invoke&gt; waterfall and rainbow -I./vacation-photo.png -M./vacation-mask.png -W640 -H480 --fit\n</code></pre> <p>This will do the same thing as img2img, but image alterations will only occur within transparent areas defined by the mask file specified by <code>-M</code>. You may also supply just a single initial image with the areas to overpaint made transparent, but you must be careful not to destroy the pixels underneath when you create the transparent areas. See Inpainting for details.</p> <p>inpainting accepts all the arguments used for txt2img and img2img, as well as the --mask (-M) and --text_mask (-tm) arguments:</p> Argument  Shortcut Default Description <code>--init_mask &lt;path&gt;</code> <code>-M&lt;path&gt;</code> <code>None</code> Path to an image the same size as the initial_image, with areas for inpainting made transparent. <code>--invert_mask</code> False If true, invert the mask so that transparent areas are opaque and vice versa. <code>--text_mask &lt;prompt&gt; [&lt;float&gt;]</code> <code>-tm &lt;prompt&gt; [&lt;float&gt;]</code> Create a mask from a text prompt describing part of the image <p>The mask may either be an image with transparent areas, in which case the inpainting will occur in the transparent areas only, or a black and white image, in which case all black areas will be painted into.</p> <p><code>--text_mask</code> (short form <code>-tm</code>) is a way to generate a mask using a text description of the part of the image to replace. For example, if you have an image of a breakfast plate with a bagel, toast and scrambled eggs, you can selectively mask the bagel and replace it with a piece of cake this way:</p> <pre><code>invoke&gt; a piece of cake -I /path/to/breakfast.png -tm bagel\n</code></pre> <p>The algorithm uses clipseg to classify different regions of the image. The classifier puts out a confidence score for each region it identifies. Generally regions that score above 0.5 are reliable, but if you are getting too much or too little masking you can adjust the threshold down (to get more mask), or up (to get less). In this example, by passing <code>-tm</code> a higher value, we are insisting on a more stringent classification.</p> <pre><code>invoke&gt; a piece of cake -I /path/to/breakfast.png -tm bagel 0.6\n</code></pre>"},{"location":"deprecated/CLI/#custom-styles-and-subjects","title":"Custom Styles and Subjects","text":"<p>You can load and use hundreds of community-contributed Textual Inversion models just by typing the appropriate trigger phrase. Please see Concepts Library for more details.</p>"},{"location":"deprecated/CLI/#other-commands","title":"Other Commands","text":"<p>The CLI offers a number of commands that begin with \"!\".</p>"},{"location":"deprecated/CLI/#postprocessing-images","title":"Postprocessing images","text":"<p>To postprocess a file using face restoration or upscaling, use the <code>!fix</code> command.</p>"},{"location":"deprecated/CLI/#fix","title":"<code>!fix</code>","text":"<p>This command runs a post-processor on a previously-generated image. It takes a PNG filename or path and applies your choice of the <code>-U</code>, <code>-G</code>, or <code>--embiggen</code> switches in order to fix faces or upscale. If you provide a filename, the script will look for it in the current output directory. Otherwise you can provide a full or partial path to the desired file.</p> <p>Some examples:</p> <p>Upscale to 4X its original size and fix faces using codeformer</p> <pre><code>invoke&gt; !fix 0000045.4829112.png -G1 -U4 -ft codeformer\n</code></pre> <p>Use the GFPGAN algorithm to fix faces, then upscale to 3X using --embiggen</p> <pre><code>invoke&gt; !fix 0000045.4829112.png -G0.8 -ft gfpgan\n&gt;&gt; fixing outputs/img-samples/0000045.4829112.png\n&gt;&gt; retrieved seed 4829112 and prompt \"boy enjoying a banana split\"\n&gt;&gt; GFPGAN - Restoring Faces for image seed:4829112\nOutputs:\n[1] outputs/img-samples/000017.4829112.gfpgan-00.png: !fix \"outputs/img-samples/0000045.4829112.png\" -s 50 -S  -W 512 -H 512 -C 7.5 -A k_lms -G 0.8\n</code></pre>"},{"location":"deprecated/CLI/#mask","title":"<code>!mask</code>","text":"<p>This command takes an image, a text prompt, and uses the <code>clipseg</code> algorithm to automatically generate a mask of the area that matches the text prompt. It is useful for debugging the text masking process prior to inpainting with the <code>--text_mask</code> argument. See [INPAINTING.md] for details.</p>"},{"location":"deprecated/CLI/#model-selection-and-importation","title":"Model selection and importation","text":"<p>The CLI allows you to add new models on the fly, as well as to switch among them rapidly without leaving the script. There are several different model formats, each described in the Model Installation Guide.</p>"},{"location":"deprecated/CLI/#models","title":"<code>!models</code>","text":"<p>This prints out a list of the models defined in `config/models.yaml'. The active model is bold-faced</p> <p>Example:</p> <pre>\ninpainting-1.5            not loaded  Stable Diffusion inpainting model\nstable-diffusion-1.5          active  Stable Diffusion v1.5\nwaifu-diffusion           not loaded  Waifu Diffusion v1.4\n</pre>"},{"location":"deprecated/CLI/#switch-model","title":"<code>!switch &lt;model&gt;</code>","text":"<p>This quickly switches from one model to another without leaving the CLI script. <code>invoke.py</code> uses a memory caching system; once a model has been loaded, switching back and forth is quick. The following example shows this in action. Note how the second column of the <code>!models</code> table changes to <code>cached</code> after a model is first loaded, and that the long initialization step is not needed when loading a cached model.</p>"},{"location":"deprecated/CLI/#import_model-hugging_face_repo_id","title":"<code>!import_model &lt;hugging_face_repo_ID&gt;</code>","text":"<p>This imports and installs a <code>diffusers</code>-style model that is stored on the HuggingFace Web Site. You can look up any Stable Diffusion diffusers model and install it with a command like the following:</p> <pre><code>!import_model prompthero/openjourney\n</code></pre>"},{"location":"deprecated/CLI/#import_model-pathtodiffusersdirectory","title":"<code>!import_model &lt;path/to/diffusers/directory&gt;</code>","text":"<p>If you have a copy of a <code>diffusers</code>-style model saved to disk, you can import it by passing the path to model's top-level directory.</p>"},{"location":"deprecated/CLI/#import_model-url","title":"<code>!import_model &lt;url&gt;</code>","text":"<p>For a <code>.ckpt</code> or <code>.safetensors</code> file, if you have a direct download URL for the file, you can provide it to <code>!import_model</code> and the file will be downloaded and installed for you.</p>"},{"location":"deprecated/CLI/#import_model-pathtomodelweightsckpt","title":"<code>!import_model &lt;path/to/model/weights.ckpt&gt;</code>","text":"<p>This command imports a new model weights file into InvokeAI, makes it available for image generation within the script, and writes out the configuration for the model into <code>config/models.yaml</code> for use in subsequent sessions.</p> <p>Provide <code>!import_model</code> with the path to a weights file ending in <code>.ckpt</code>. If you type a partial path and press tab, the CLI will autocomplete. Although it will also autocomplete to <code>.vae</code> files, these are not currenty supported (but will be soon).</p> <p>When you hit return, the CLI will prompt you to fill in additional information about the model, including the short name you wish to use for it with the <code>!switch</code> command, a brief description of the model, the default image width and height to use with this model, and the model's configuration file. The latter three fields are automatically filled with reasonable defaults. In the example below, the bold-faced text shows what the user typed in with the exception of the width, height and configuration file paths, which were filled in automatically.</p>"},{"location":"deprecated/CLI/#import_model-pathtodirectory_of_models","title":"<code>!import_model &lt;path/to/directory_of_models&gt;</code>","text":"<p>If you provide the path of a directory that contains one or more <code>.ckpt</code> or <code>.safetensors</code> files, the CLI will scan the directory and interactively offer to import the models it finds there. Also see the <code>--autoconvert</code> command-line option.</p>"},{"location":"deprecated/CLI/#edit_model-name_of_model","title":"<code>!edit_model &lt;name_of_model&gt;</code>","text":"<p>The <code>!edit_model</code> command can be used to modify a model that is already defined in <code>config/models.yaml</code>. Call it with the short name of the model you wish to modify, and it will allow you to modify the model's <code>description</code>, <code>weights</code> and other fields.</p> <p>Example:</p> <pre>\ninvoke&gt; !edit_model waifu-diffusion\n&gt;&gt; Editing model waifu-diffusion from configuration file ./configs/models.yaml\ndescription: Waifu diffusion v1.4beta\nweights: models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt\nconfig: configs/stable-diffusion/v1-inference.yaml\nwidth: 512\nheight: 512\n\n&gt;&gt; New configuration:\nwaifu-diffusion:\n  config: configs/stable-diffusion/v1-inference.yaml\n  description: Waifu diffusion v1.4beta\n  weights: models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt\n  height: 512\n  width: 512\n\nOK to import [n]? y\n&gt;&gt; Caching model stable-diffusion-1.4 in system RAM\n&gt;&gt; Loading waifu-diffusion from models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt\n...\n</pre>"},{"location":"deprecated/CLI/#history-processing","title":"History processing","text":"<p>The CLI provides a series of convenient commands for reviewing previous actions, retrieving them, modifying them, and re-running them.</p>"},{"location":"deprecated/CLI/#history","title":"<code>!history</code>","text":"<p>The invoke script keeps track of all the commands you issue during a session, allowing you to re-run them. On Mac and Linux systems, it also writes the command-line history out to disk, giving you access to the most recent 1000 commands issued.</p> <p>The <code>!history</code> command will return a numbered list of all the commands issued during the session (Windows), or the most recent 1000 commands (Mac|Linux). You can then repeat a command by using the command <code>!NNN</code>, where \"NNN\" is the history line number. For example:</p> <pre><code>invoke&gt; !history\n...\n[14] happy woman sitting under tree wearing broad hat and flowing garment\n[15] beautiful woman sitting under tree wearing broad hat and flowing garment\n[18] beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6\n[20] watercolor of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194\n[21] surrealist painting of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194\n...\ninvoke&gt; !20\ninvoke&gt; watercolor of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194\n</code></pre>"},{"location":"deprecated/CLI/#fetch","title":"<code>!fetch</code>","text":"<p>This command retrieves the generation parameters from a previously generated image and either loads them into the command line (Linux|Mac), or prints them out in a comment for copy-and-paste (Windows). You may provide either the name of a file in the current output directory, or a full file path. Specify path to a folder with image png files, and wildcard *.png to retrieve the dream command used to generate the images, and save them to a file commands.txt for further processing.</p> <p>load the generation command for a single png file</p> <pre><code>invoke&gt; !fetch 0000015.8929913.png\n# the script returns the next line, ready for editing and running:\ninvoke&gt; a fantastic alien landscape -W 576 -H 512 -s 60 -A plms -C 7.5\n</code></pre> <p>fetch the generation commands from a batch of files and store them into <code>selected.txt</code></p> <pre><code>invoke&gt; !fetch outputs\\selected-imgs\\*.png selected.txt\n</code></pre>"},{"location":"deprecated/CLI/#replay","title":"<code>!replay</code>","text":"<p>This command replays a text file generated by !fetch or created manually</p> <p>Example</p> <pre><code>invoke&gt; !replay outputs\\selected-imgs\\selected.txt\n</code></pre> <p>Note</p> <p>These commands may behave unexpectedly if given a PNG file that was not generated by InvokeAI.</p>"},{"location":"deprecated/CLI/#search-search-string","title":"<code>!search &lt;search string&gt;</code>","text":"<p>This is similar to !history but it only returns lines that contain <code>search string</code>. For example:</p> <pre><code>invoke&gt; !search surreal\n[21] surrealist painting of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194\n</code></pre>"},{"location":"deprecated/CLI/#clear","title":"<code>!clear</code>","text":"<p>This clears the search history from memory and disk. Be advised that this operation is irreversible and does not issue any warnings!</p>"},{"location":"deprecated/CLI/#command-line-editing-and-completion","title":"Command-line editing and completion","text":"<p>The command-line offers convenient history tracking, editing, and command completion.</p> <ul> <li>To scroll through previous commands and potentially edit/reuse them, use the   Up and Down keys.</li> <li>To edit the current command, use the Left and Right keys to position   the cursor, and then Backspace, Del or insert characters.</li> <li>To move to the very beginning of the command, type Ctrl+A (or   Cmd+A on the Mac)</li> <li>To move to the end of the command, type Ctrl+E.</li> <li>To cut a section of the command, position the cursor where you want to start   cutting and type Ctrl+K</li> <li>To paste a cut section back in, position the cursor where you want to paste,   and type Ctrl+Y</li> </ul> <p>Windows users can get similar, but more limited, functionality if they launch <code>invoke.py</code> with the <code>winpty</code> program and have the <code>pyreadline3</code> library installed:</p> <pre><code>&gt; winpty python scripts\\invoke.py\n</code></pre> <p>On the Mac and Linux platforms, when you exit invoke.py, the last 1000 lines of your command-line history will be saved. When you restart <code>invoke.py</code>, you can access the saved history using the Up key.</p> <p>In addition, limited command-line completion is installed. In various contexts, you can start typing your command and press Tab. A list of potential completions will be presented to you. You can then type a little more, hit Tab again, and eventually autocomplete what you want.</p> <p>When specifying file paths using the one-letter shortcuts, the CLI will attempt to complete pathnames for you. This is most handy for the <code>-I</code> (init image) and <code>-M</code> (init mask) paths. To initiate completion, start the path with a slash (<code>/</code>) or <code>./</code>. For example:</p> <pre><code>invoke&gt; zebra with a mustache -I./test-pictures&lt;TAB&gt;\n-I./test-pictures/Lincoln-and-Parrot.png  -I./test-pictures/zebra.jpg        -I./test-pictures/madonna.png\n-I./test-pictures/bad-sketch.png          -I./test-pictures/man_with_eagle/\n</code></pre> <p>You can then type Z, hit Tab again, and it will autofill to <code>zebra.jpg</code>.</p> <p>More text completion features (such as autocompleting seeds) are on their way.</p>"},{"location":"deprecated/EMBIGGEN/","title":"Embiggen","text":"<p>upscale your images on limited memory machines</p> <p>GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work.</p> <p>In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images.</p> <p>If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the <code>-U</code> and <code>-G</code> prompt arguments to perform those actions.</p>"},{"location":"deprecated/EMBIGGEN/#embiggen_1","title":"Embiggen","text":"<p>If you wanted to be able to do more (pixels) without running out of VRAM, or you want to upscale with details that couldn't possibly appear without the context of a prompt, this is the feature to try out.</p> <p>Embiggen automates the process of taking an init image, upscaling it, cutting it into smaller tiles that slightly overlap, running all the tiles through img2img to refine details with respect to the prompt, and \"stitching\" the tiles back together into a cohesive image.</p> <p>It automatically computes how many tiles are needed, and so it can be fed ANY size init image and perform Img2Img on it (though it will be run only one tile at a time, which can cause problems, see the Note at the end).</p> <p>If you're familiar with \"GoBig\" (ala progrock-stable) it's similar to that, except it can work up to an arbitrarily large size (instead of just 2x), with tile overlaps configurable as a ratio, and has extra logic to re-run any number of the tile sub-sections of the image if for example a small part of a huge run got messed up.</p>"},{"location":"deprecated/EMBIGGEN/#usage","title":"Usage","text":"<p><code>-embiggen &lt;scaling_factor&gt; &lt;esrgan_strength&gt; &lt;overlap_ratio OR overlap_pixels&gt;</code></p> <p>Takes a scaling factor relative to the size of the <code>--init_img</code> (<code>-I</code>), followed by ESRGAN upscaling strength (0 - 1.0), followed by minimum amount of overlap between tiles as a decimal ratio (0 - 1.0) OR a number of pixels.</p> <p>The scaling factor is how much larger than the <code>--init_img</code> the output should be, and will multiply both x and y axis, so an image that is a scaling factor of 3.0 has 3*3= 9 times as many pixels, and will take (at least) 9 times as long (see overlap for why it might be longer). If the <code>--init_img</code> is already the right size <code>-embiggen 1</code>, and it can also be less than one if the init_img is too big.</p> <p>Esrgan_strength defaults to 0.75, and the overlap_ratio defaults to 0.25, both are optional.</p> <p>Unlike Img2Img, the <code>--width</code> (<code>-W</code>) and <code>--height</code> (<code>-H</code>) arguments do not control the size of the image as a whole, but the size of the tiles used to Embiggen the image.</p> <p>ESRGAN is used to upscale the <code>--init_img</code> prior to cutting it into tiles/pieces to run through img2img and then stitch back together. Embiggen can be run without ESRGAN; just set the strength to zero (e.g. <code>-embiggen 1.75 0</code>). The output of Embiggen can also be upscaled after it's finished (<code>-U</code>).</p> <p>The overlap is the minimum that tiles will overlap with adjacent tiles, specified as either a ratio or a number of pixels. How much the tiles overlap determines the likelihood the tiling will be noticable, really small overlaps (e.g. a couple of pixels) may produce noticeable grid-like fuzzy distortions in the final stitched image. Though, as the overlapping space doesn't contribute to making the image bigger, and the larger the overlap the more tiles (and the more time) it will take to finish.</p> <p>Because the overlapping parts of tiles don't \"contribute\" to increasing size, every tile after the first in a row or column effectively only covers an extra <code>1 - overlap_ratio</code> on each axis. If the input/<code>--init_img</code> is same size as a tile, the ideal (for time) scaling factors with the default overlap (0.25) are 1.75, 2.5, 3.25, 4.0, etc.</p> <p><code>-embiggen_tiles &lt;spaced list of tiles&gt;</code></p> <p>An advanced usage useful if you only want to alter parts of the image while running Embiggen. It takes a list of tiles by number to run and replace onto the initial image e.g. <code>1 3 5</code>. It's useful for either fixing problem spots from a previous Embiggen run, or selectively altering the prompt for sections of an image - for creative or coherency reasons.</p> <p>Tiles are numbered starting with one, and left-to-right, top-to-bottom.  So, if you are generating a 3x3 tiled image, the middle row would be <code>4 5 6</code>.</p> <p><code>-embiggen_strength &lt;strength&gt;</code></p> <p>Another advanced option if you want to experiment with the strength parameter that embiggen uses when it calls Img2Img. Values range from 0.0 to 1.0 and lower values preserve more of the character of the initial image. Values that are too high will result in a completely different end image, while values that are too low will result in an image not dissimilar to one you would get with ESRGAN upscaling alone. The default value is 0.4.</p>"},{"location":"deprecated/EMBIGGEN/#examples","title":"Examples","text":"<p>Running Embiggen with 512x512 tiles on an existing image, scaling up by a factor of 2.5x; and doing the same again (default ESRGAN strength is 0.75, default overlap between tiles is 0.25):</p> <pre><code>invoke &gt; a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0.4 -embiggen 2.5\ninvoke &gt; a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0.4 -embiggen 2.5 0.75 0.25\n</code></pre> <p>If your starting image was also 512x512 this should have taken 9 tiles.</p> <p>If there weren't enough clouds in the sky of that forest you just made (and that image is about 1280 pixels (512*2.5) wide A.K.A. three 512x512 tiles with 0.25 overlaps wide) we can replace that top row of tiles:</p> <pre><code>invoke&gt; a photo of puffy clouds over a forest at sunset -s 100 -W 512 -H 512 -I outputs/000002.seed.png -f 0.5 -embiggen_tiles 1 2 3\n</code></pre>"},{"location":"deprecated/EMBIGGEN/#fixing-previously-generated-images","title":"Fixing Previously-Generated Images","text":"<p>It is easy to apply embiggen to any previously-generated file without having to look up the original prompt and provide an initial image. Just use the syntax <code>!fix path/to/file.png &lt;embiggen&gt;</code>. For example, you can rewrite the previous command to look like this:</p> <pre><code>invoke&gt; !fix ./outputs/000002.seed.png -embiggen_tiles 1 2 3\n</code></pre> <p>A new file named <code>000002.seed.fixed.png</code> will be created in the output directory. Note that the <code>!fix</code> command does not replace the original file, unlike the behavior at generate time. You do not need to provide the prompt, and <code>!fix</code> automatically selects a good strength for embiggen-ing.</p> <p>Note</p> <p>Because the same prompt is used on all the tiled images, and the model doesn't have the context of anything outside the tile being run - it can end up creating repeated pattern (also called 'motifs') across all the tiles based on that prompt. The best way to combat this is lowering the <code>--strength</code> (<code>-f</code>) to stay more true to the init image, and increasing the number of steps so there is more compute-time to create the detail.  Anecdotally <code>--strength</code> 0.35-0.45 works pretty well on most things. It may also work great in some examples even with the <code>--strength</code> set high for patterns, landscapes, or subjects that are more abstract. Because this is (relatively) fast, you can also preserve the best parts from each.</p> <p>Author: Travco</p>"},{"location":"deprecated/INPAINTING/","title":"Inpainting","text":""},{"location":"deprecated/INPAINTING/#creating-transparent-regions-for-inpainting","title":"Creating Transparent Regions for Inpainting","text":"<p>Inpainting is really cool. To do it, you start with an initial image and use a photoeditor to make one or more regions transparent (i.e. they have a \"hole\" in them). You then provide the path to this image at the dream&gt; command line using the <code>-I</code> switch. Stable Diffusion will only paint within the transparent region.</p> <p>There's a catch. In the current implementation, you have to prepare the initial image correctly so that the underlying colors are preserved under the transparent area. Many imaging editing applications will by default erase the color information under the transparent pixels and replace them with white or black, which will lead to suboptimal inpainting. It often helps to apply incomplete transparency, such as any value between 1 and 99%</p> <p>You also must take care to export the PNG file in such a way that the color information is preserved. There is often an option in the export dialog that lets you specify this.</p> <p>If your photoeditor is erasing the underlying color information, <code>dream.py</code> will give you a big fat warning. If you can't find a way to coax your photoeditor to retain color values under transparent areas, then you can combine the <code>-I</code> and <code>-M</code> switches to provide both the original unedited image and the masked (partially transparent) image:</p> <pre><code>invoke&gt; \"man with cat on shoulder\" -I./images/man.png -M./images/man-transparent.png\n</code></pre>"},{"location":"deprecated/INPAINTING/#masking-using-text","title":"Masking using Text","text":"<p>You can also create a mask using a text prompt to select the part of the image you want to alter, using the clipseg algorithm. This works on any image, not just ones generated by InvokeAI.</p> <p>The <code>--text_mask</code> (short form <code>-tm</code>) option takes two arguments. The first argument is a text description of the part of the image you wish to mask (paint over). If the text description contains a space, you must surround it with quotation marks. The optional second argument is the minimum threshold for the mask classifier's confidence score, described in more detail below.</p> <p>To see how this works in practice, here's an image of a still life painting that I got off the web.</p> <p></p> <p>You can selectively mask out the orange and replace it with a baseball in this way:</p> <pre><code>invoke&gt; a baseball -I /path/to/still_life.png -tm orange\n</code></pre> <p></p> <p>The clipseg classifier produces a confidence score for each region it identifies. Generally regions that score above 0.5 are reliable, but if you are getting too much or too little masking you can adjust the threshold down (to get more mask), or up (to get less). In this example, by passing <code>-tm</code> a higher value, we are insisting on a tigher mask. However, if you make it too high, the orange may not be picked up at all!</p> <pre><code>invoke&gt; a baseball -I /path/to/breakfast.png -tm orange 0.6\n</code></pre> <p>The <code>!mask</code> command may be useful for debugging problems with the text2mask feature. The syntax is <code>!mask /path/to/image.png -tm &lt;text&gt; &lt;threshold&gt;</code></p> <p>It will generate three files:</p> <ul> <li>The image with the selected area highlighted.</li> <li>it will be named XXXXX...selected.png <li>The image with the un-selected area highlighted.</li> <li>it will be named XXXXX...deselected.png <li>The image with the selected area converted into a black and white image   according to the threshold level</li> <li>it will be named XXXXX...masked.png <p>The <code>.masked.png</code> file can then be directly passed to the <code>invoke&gt;</code> prompt in the CLI via the <code>-M</code> argument. Do not attempt this with the <code>selected.png</code> or <code>deselected.png</code> files, as they contain some transparency throughout the image and will not produce the desired results.</p> <p>Here is an example of how <code>!mask</code> works:</p> <pre><code>invoke&gt; !mask ./test-pictures/curly.png -tm hair 0.5\n&gt;&gt; generating masks from ./test-pictures/curly.png\n&gt;&gt; Initializing clipseg model for text to mask inference\nOutputs:\n[941.1] outputs/img-samples/000019.curly.hair.deselected.png: !mask ./test-pictures/curly.png -tm hair 0.5\n[941.2] outputs/img-samples/000019.curly.hair.selected.png: !mask ./test-pictures/curly.png -tm hair 0.5\n[941.3] outputs/img-samples/000019.curly.hair.masked.png: !mask ./test-pictures/curly.png -tm hair 0.5\n</code></pre> <p></p> Original image \"curly.png\" <p></p> 000019.curly.hair.selected.png <p></p> 000019.curly.hair.deselected.png <p></p> 000019.curly.hair.masked.png <p>It looks like we selected the hair pretty well at the 0.5 threshold (which is the default, so we didn't actually have to specify it), so let's have some fun:</p> <pre><code>invoke&gt; medusa with cobras -I ./test-pictures/curly.png -M 000019.curly.hair.masked.png -C20\n&gt;&gt; loaded input image of size 512x512 from ./test-pictures/curly.png\n...\nOutputs:\n[946] outputs/img-samples/000024.801380492.png: \"medusa with cobras\" -s 50 -S 801380492 -W 512 -H 512 -C 20.0 -I ./test-pictures/curly.png -A k_lms -f 0.75\n</code></pre> <p></p> <p>You can also skip the <code>!mask</code> creation step and just select the masked</p> <p>region directly:</p> <pre><code>invoke&gt; medusa with cobras -I ./test-pictures/curly.png -tm hair -C20\n</code></pre>"},{"location":"deprecated/INPAINTING/#using-the-runwayml-inpainting-model","title":"Using the RunwayML inpainting model","text":"<p>The RunwayML Inpainting Model v1.5 is a specialized version of Stable Diffusion v1.5 that contains extra channels specifically designed to enhance inpainting and outpainting. While it can do regular <code>txt2img</code> and <code>img2img</code>, it really shines when filling in missing regions. It has an almost uncanny ability to blend the new regions with existing ones in a semantically coherent way.</p> <p>To install the inpainting model, follow the instructions for installing a new model. You may use either the CLI (<code>invoke.py</code> script) or directly edit the <code>configs/models.yaml</code> configuration file to do this. The main thing to watch out for is that the the model <code>config</code> option must be set up to use <code>v1-inpainting-inference.yaml</code> rather than the <code>v1-inference.yaml</code> file that is used by Stable Diffusion 1.4 and 1.5.</p> <p>After installation, your <code>models.yaml</code> should contain an entry that looks like this one:</p> <pre><code>inpainting-1.5:\n  weights: models/ldm/stable-diffusion-v1/sd-v1-5-inpainting.ckpt\n  description: SD inpainting v1.5\n  config: configs/stable-diffusion/v1-inpainting-inference.yaml\n  vae: models/ldm/stable-diffusion-v1/vae-ft-mse-840000-ema-pruned.ckpt\n  width: 512\n  height: 512\n</code></pre> <p>As shown in the example, you may include a VAE fine-tuning weights file as well. This is strongly recommended.</p> <p>To use the custom inpainting model, launch <code>invoke.py</code> with the argument <code>--model inpainting-1.5</code> or alternatively from within the script use the <code>!switch inpainting-1.5</code> command to load and switch to the inpainting model.</p> <p>You can now do inpainting and outpainting exactly as described above, but there will (likely) be a noticeable improvement in coherence. Txt2img and Img2img will work as well.</p> <p>There are a few caveats to be aware of:</p> <ol> <li> <p>The inpainting model is larger than the standard model, and will use nearly 4    GB of GPU VRAM. This makes it unlikely to run on a 4 GB graphics card.</p> </li> <li> <p>When operating in Img2img mode, the inpainting model is much less steerable    than the standard model. It is great for making small changes, such as    changing the pattern of a fabric, or slightly changing a subject's expression    or hair, but the model will resist making the dramatic alterations that the    standard model lets you do.</p> </li> <li> <p>While the <code>--hires</code> option works fine with the inpainting model, some special    features, such as <code>--embiggen</code> are disabled.</p> </li> <li> <p>Prompt weighting (<code>banana++ sushi</code>) and merging work well with the inpainting    model, but prompt swapping    (<code>a (\"fluffy cat\").swap(\"smiling dog\") eating a hotdog</code>) will not have any    effect due to the way the model is set up. You may use text masking (with    <code>-tm thing-to-mask</code>) as an effective replacement.</p> </li> <li> <p>The model tends to oversharpen image if you use high step or CFG values. If    you need to do large steps, use the standard model.</p> </li> <li> <p>The <code>--strength</code> (<code>-f</code>) option has no effect on the inpainting model due to    its fundamental differences with the standard model. It will always take the    full number of steps you specify.</p> </li> </ol>"},{"location":"deprecated/INPAINTING/#troubleshooting","title":"Troubleshooting","text":"<p>Here are some troubleshooting tips for inpainting and outpainting.</p>"},{"location":"deprecated/INPAINTING/#inpainting-is-not-changing-the-masked-region-enough","title":"Inpainting is not changing the masked region enough!","text":"<p>One of the things to understand about how inpainting works is that it is equivalent to running img2img on just the masked (transparent) area. img2img builds on top of the existing image data, and therefore will attempt to preserve colors, shapes and textures to the best of its ability. Unfortunately this means that if you want to make a dramatic change in the inpainted region, for example replacing a red wall with a blue one, the algorithm will fight you.</p> <p>You have a couple of options. The first is to increase the values of the requested steps (<code>-sXXX</code>), strength (<code>-f0.XX</code>), and/or condition-free guidance (<code>-CXX.X</code>). If this is not working for you, a more extreme step is to provide the <code>--inpaint_replace 0.X</code> (<code>-r0.X</code>) option. This value ranges from 0.0 to 1.0. The higher it is the less attention the algorithm will pay to the data underneath the masked region. At high values this will enable you to replace colored regions entirely, but beware that the masked region mayl not blend in with the surrounding unmasked regions as well.</p>"},{"location":"deprecated/INPAINTING/#recipe-for-gimp","title":"Recipe for GIMP","text":"<p>GIMP is a popular Linux photoediting tool.</p> <ol> <li>Open image in GIMP.</li> <li>Layer-&gt;Transparency-&gt;Add Alpha Channel</li> <li>Use lasso tool to select region to mask</li> <li>Choose Select -&gt; Float to create a floating selection</li> <li>Open the Layers toolbar (^L) and select \"Floating Selection\"</li> <li>Set opacity to a value between 0% and 99%</li> <li>Export as PNG</li> <li>In the export dialogue, Make sure the \"Save colour values from transparent    pixels\" checkbox is selected.</li> </ol>"},{"location":"deprecated/INPAINTING/#recipe-for-adobe-photoshop","title":"Recipe for Adobe Photoshop","text":"<ol> <li> <p>Open image in Photoshop</p> <p> </p> </li> <li> <p>Use any of the selection tools (Marquee, Lasso, or Wand) to select the area    you desire to inpaint.</p> <p> </p> </li> <li> <p>Because we'll be applying a mask over the area we want to preserve, you    should now select the inverse by using the Shift+Ctrl+I shortcut, or    right clicking and using the \"Select Inverse\" option.</p> </li> <li> <p>You'll now create a mask by selecting the image layer, and Masking the    selection. Make sure that you don't delete any of the underlying image, or    your inpainting results will be dramatically impacted.</p> <p> </p> </li> <li> <p>Make sure to hide any background layers that are present. You should see the    mask applied to your image layer, and the image on your canvas should display    the checkered background.</p> <p> </p> </li> <li> <p>Save the image as a transparent PNG by using <code>File</code>\u2192<code>Save a Copy</code> from the    menu bar, or by using the keyboard shortcut Alt+Ctrl+S</p> <p> </p> </li> <li> <p>After following the inpainting instructions above (either through the CLI or    the Web UI), marvel at your newfound ability to selectively invoke. Lookin'    good!</p> <p> </p> </li> <li> <p>In the export dialogue, Make sure the \"Save colour values from transparent    pixels\" checkbox is selected.</p> </li> </ol>"},{"location":"deprecated/OUTPAINTING/","title":"Outpainting","text":""},{"location":"deprecated/OUTPAINTING/#outpainting-and-outcropping","title":"Outpainting and outcropping","text":"<p>Outpainting is a process by which the AI generates parts of the image that are outside its original frame. It can be used to fix up images in which the subject is off center, or when some detail (often the top of someone's head!) is cut off.</p> <p>InvokeAI supports two versions of outpainting, one called \"outpaint\" and the other \"outcrop.\" They work slightly differently and each has its advantages and drawbacks.</p>"},{"location":"deprecated/OUTPAINTING/#outpainting_1","title":"Outpainting","text":"<p>Outpainting is the same as inpainting, except that the painting occurs in the regions outside of the original image. To outpaint using the <code>invoke.py</code> command line script, prepare an image in which the borders to be extended are pure black. Add an alpha channel (if there isn't one already), and make the borders completely transparent and the interior completely opaque. If you wish to modify the interior as well, you may create transparent holes in the transparency layer, which <code>img2img</code> will paint into as usual.</p> <p>Pass the image as the argument to the <code>-I</code> switch as you would for regular inpainting:</p> <pre><code>invoke&gt; a stream by a river -I /path/to/transparent_img.png\n</code></pre> <p>You'll likely be delighted by the results.</p>"},{"location":"deprecated/OUTPAINTING/#tips","title":"Tips","text":"<ol> <li> <p>Do not try to expand the image too much at once. Generally it is best to    expand the margins in 64-pixel increments. 128 pixels often works, but your    mileage may vary depending on the nature of the image you are trying to    outpaint into.</p> </li> <li> <p>There are a series of switches that can be used to adjust how the inpainting    algorithm operates. In particular, you can use these to minimize the seam    that sometimes appears between the original image and the extended part.    These switches are:</p> </li> </ol> switch default description <code>--seam_size SEAM_SIZE</code> <code>0</code> Size of the mask around the seam between original and outpainted image <code>--seam_blur SEAM_BLUR</code> <code>0</code> The amount to blur the seam inwards <code>--seam_strength STRENGTH</code> <code>0.7</code> The img2img strength to use when filling the seam <code>--seam_steps SEAM_STEPS</code> <code>10</code> The number of steps to use to fill the seam. <code>--tile_size TILE_SIZE</code> <code>32</code> The tile size to use for filling outpaint areas"},{"location":"deprecated/OUTPAINTING/#outcrop","title":"Outcrop","text":"<p>The <code>outcrop</code> extension gives you a convenient <code>!fix</code> postprocessing command that allows you to extend a previously-generated image in 64 pixel increments in any direction. You can apply the module to any image previously-generated by InvokeAI. Note that it works with arbitrary PNG photographs, but not currently with JPG or other formats. Outcropping is particularly effective when combined with the runwayML custom inpainting model.</p> <p>Consider this image:</p> <p></p> <p>Pretty nice, but it's annoying that the top of her head is cut off. She's also a bit off center. Let's fix that!</p> <pre><code>invoke&gt; !fix images/curly.png --outcrop top 128 right 64 bottom 64\n</code></pre> <p>This is saying to apply the <code>outcrop</code> extension by extending the top of the image by 128 pixels, and the right and bottom of the image by 64 pixels. You can use any combination of top|left|right|bottom, and specify any number of pixels to extend. You can also abbreviate <code>--outcrop</code> to <code>-c</code>.</p> <p>The result looks like this:</p> <p></p> <p>The new image is larger than the original (576x704) because 64 pixels were added to the top and right sides. You will need enough VRAM to process an image of this size.</p>"},{"location":"deprecated/OUTPAINTING/#outcropping-non-invokeai-images","title":"Outcropping non-InvokeAI images","text":"<p>You can outcrop an arbitrary image that was not generated by InvokeAI, but your results will vary. The <code>inpainting-1.5</code> model is highly recommended, but if not feasible, then you may be able to improve the output by conditioning the outcropping with a text prompt that describes the scene using the <code>--new_prompt</code> argument:</p> <pre><code>invoke&gt; !fix images/vacation.png --outcrop top 128 --new_prompt \"family vacation\"\n</code></pre> <p>You may also provide a different seed for outcropping to use by passing <code>-S&lt;seed&gt;</code>. A negative seed will generate a new random seed.</p> <p>A number of caveats:</p> <ol> <li> <p>Although you can specify any pixel values, they will be rounded up to the    nearest multiple of 64. Smaller values are better. Larger extensions are more    likely to generate artefacts. However, if you wish you can run the !fix    command repeatedly to cautiously expand the image.</p> </li> <li> <p>The extension is stochastic, meaning that each time you run it you'll get a    slightly different result. You can run it repeatedly until you get an image    you like. Unfortunately <code>!fix</code> does not currently respect the <code>-n</code>    (<code>--iterations</code>) argument.</p> </li> <li> <p>Your results will be much better if you use the <code>inpaint-1.5</code> model    released by runwayML and installed by default by <code>invokeai-configure</code>.    This model was trained specifically to harmoniously fill in image gaps. The    standard model will work as well, but you may notice color discontinuities at    the border.</p> </li> <li> <p>When using the <code>inpaint-1.5</code> model, you may notice subtle changes to the area    outside the masked region. This is because the model performs an    encoding/decoding on the image as a whole. This does not occur with the    standard model.</p> </li> </ol>"},{"location":"deprecated/OUTPAINTING/#outpaint","title":"Outpaint","text":"<p>The <code>outpaint</code> extension does the same thing, but with subtle differences. Starting with the same image, here is how we would add an additional 64 pixels to the top of the image:</p> <pre><code>invoke&gt; !fix images/curly.png --out_direction top 64\n</code></pre> <p>(you can abbreviate <code>--out_direction</code> as <code>-D</code>.</p> <p>The result is shown here:</p> <p></p> <p>Although the effect is similar, there are significant differences from outcropping:</p> <ul> <li>You can only specify one direction to extend at a time.</li> <li>The image is not resized. Instead, the image is shifted by the specified   number of pixels. If you look carefully, you'll see that less of the lady's   torso is visible in the image.</li> <li>Because the image dimensions remain the same, there's no rounding to multiples   of 64.</li> <li>Attempting to outpaint larger areas will frequently give rise to ugly ghosting   effects.</li> <li>For best results, try increasing the step number.</li> <li>If you don't specify a pixel value in <code>-D</code>, it will default to half of the   whole image, which is likely not what you want.</li> </ul> <p>Tip</p> <p>Neither <code>outpaint</code> nor <code>outcrop</code> are perfect, but we continue to tune and improve them. If one doesn't work, try the other. You may also wish to experiment with other <code>img2img</code> arguments, such as <code>-C</code>, <code>-f</code> and <code>-s</code>.</p>"},{"location":"deprecated/TRANSLATION/","title":"Translation","text":"<p>InvokeAI uses Weblate for translation. Weblate is a FOSS project providing a scalable translation service. Weblate automates the tedious parts of managing translation of a growing project, and the service is generously provided at no cost to FOSS projects like InvokeAI.</p>"},{"location":"deprecated/TRANSLATION/#contributing","title":"Contributing","text":"<p>If you'd like to contribute by adding or updating a translation, please visit our Weblate project. You'll need to sign in with your GitHub account (a number of other accounts are supported, including Google).</p> <p>Once signed in, select a language and then the Web UI component. From here you can Browse and Translate strings from English to your chosen language. Zen mode offers a simpler translation experience.</p> <p>Your changes will be attributed to you in the automated PR process; you don't need to do anything else.</p>"},{"location":"deprecated/TRANSLATION/#help-questions","title":"Help &amp; Questions","text":"<p>Please check Weblate's documentation or ping @psychedelicious or @blessedcoolant on Discord if you have any questions.</p>"},{"location":"deprecated/TRANSLATION/#thanks","title":"Thanks","text":"<p>Thanks to the InvokeAI community for their efforts to translate the project!</p>"},{"location":"deprecated/VARIATIONS/","title":"Variations","text":""},{"location":"deprecated/VARIATIONS/#intro","title":"Intro","text":"<p>InvokeAI's support for variations enables you to do the following:</p> <ol> <li> <p>Generate a series of systematic variations of an image, given a prompt. The    amount of variation from one image to the next can be controlled.</p> </li> <li> <p>Given two or more variations that you like, you can combine them in a    weighted fashion.</p> </li> </ol> <p>This cheat sheet provides a quick guide for how this works in practice, using variations to create the desired image of Xena, Warrior Princess.</p>"},{"location":"deprecated/VARIATIONS/#step-1-find-a-base-image-that-you-like","title":"Step 1 -- Find a base image that you like","text":"<p>The prompt we will use throughout is:</p> <p><code>\"lucy lawless as xena, warrior princess, character portrait, high resolution.\"</code></p> <p>This will be indicated as <code>\"prompt\"</code> in the examples below.</p> <p>First we let SD create a series of images in the usual way, in this case requesting six iterations.</p> <p></p>  Seed 3357757885 looks nice"},{"location":"deprecated/VARIATIONS/#step-2-generating-variations","title":"Step 2 - Generating Variations","text":"<p>Let's try to generate some variations on this image. We select the \"*\" symbol in the line of icons above the image in order to fix the prompt and seed. Then we open up the \"Variations\" section of the generation panel and use the slider to set the variation amount to 0.2. The higher this value, the more each generated image will differ from the previous one.</p> <p>Now we run the prompt a second time, requesting six iterations. You will see six images that are thematically related to each other. Try increasing and decreasing the variation amount and see what happens.</p>"},{"location":"deprecated/VARIATIONS/#variation-sub-seeding","title":"Variation Sub Seeding","text":"<p>Note that the output for each image has a <code>-V</code> option giving the \"variant subseed\" for that image, consisting of a seed followed by the variation amount used to generate it.</p> <p>This gives us a series of closely-related variations, including the two shown here.</p> <p></p> subseed 3647897225 <p></p> subseed 1614299449 <p>I like the expression on Xena's face in the first one (subseed 3647897225), and the armor on her shoulder in the second one (subseed 1614299449). Can we combine them to get the best of both worlds?</p> <p>We combine the two variations using <code>-V</code> (<code>--with_variations</code>). Again, we must provide the seed for the originally-chosen image in order for this to work.</p> <pre><code>invoke&gt; \"prompt\"  -S3357757885 -V3647897225,0.1,1614299449,0.1\nOutputs:\n./outputs/Xena/000003.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1 -S3357757885\n</code></pre> <p>Here we are providing equal weights (0.1 and 0.1) for both the subseeds. The resulting image is close, but not exactly what I wanted:</p> <p></p>  subseed 1614299449  <p>We could either try combining the images with different weights, or we can generate more variations around the almost-but-not-quite image. We do the latter, using both the <code>-V</code> (combining) and <code>-v</code> (variation strength) options. Note that we use <code>-n6</code> to generate 6 variations:</p> <pre><code>invoke&gt; \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 -v0.05 -n6\nOutputs:\n./outputs/Xena/000004.3279757577.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,3279757577:0.05 -S3357757885\n./outputs/Xena/000004.2853129515.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2853129515:0.05 -S3357757885\n./outputs/Xena/000004.3747154981.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,3747154981:0.05 -S3357757885\n./outputs/Xena/000004.2664260391.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2664260391:0.05 -S3357757885\n./outputs/Xena/000004.1642517170.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,1642517170:0.05 -S3357757885\n./outputs/Xena/000004.2183375608.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2183375608:0.05 -S3357757885\n</code></pre> <p>This produces six images, all slight variations on the combination of the chosen two images. Here's the one I like best:</p> <p></p>  subseed 3747154981  <p>As you can see, this is a very powerful tool, which when combined with subprompt weighting, gives you great control over the content and quality of your generated images.</p>"},{"location":"deprecated/VARIATIONS/#variations-and-samplers","title":"Variations and Samplers","text":"<p>The sampler you choose has a strong effect on variation strength. Some samplers, such as <code>k_euler_a</code> are very \"creative\" and produce significant amounts of image-to-image variation even when the seed is fixed and the <code>-v</code> argument is very low. Others are more deterministic. Feel free to experiment until you find the combination that you like.</p> <p>Also be aware of the Perlin Noise feature, which provides another way of introducing variability into your image generation requests.</p>"},{"location":"features/","title":"Overview","text":"<p>Here you can find the documentation for InvokeAI's various features.</p>"},{"location":"features/#the-getting-started-guide","title":"The Getting Started Guide","text":"<p>A getting started guide for those new to AI image generation. </p>"},{"location":"features/#the-basics","title":"The Basics","text":""},{"location":"features/#the-web-user-interface","title":"* The Web User Interface","text":"<p>Guide to the Web interface. Also see the WebUI Hotkeys Reference Guide</p>"},{"location":"features/#the-unified-canvas","title":"* The Unified Canvas","text":"<p>Build complex scenes by combine and modifying multiple images in a stepwise fashion. This feature combines img2img, inpainting and outpainting in a single convenient digital artist-optimized user interface.</p>"},{"location":"features/#image-generation","title":"Image Generation","text":""},{"location":"features/#prompt-engineering","title":"* Prompt Engineering","text":"<p>Get the images you want with the InvokeAI  prompt engineering language.</p>"},{"location":"features/#the-lora-lycoris-lcm-lora-models","title":"* The LoRA, LyCORIS, LCM-LoRA Models","text":"<p>Add custom subjects and styles using a variety of fine-tuned models.</p>"},{"location":"features/#controlnet","title":"* ControlNet","text":"<p>Learn how to install and use ControlNet models for fine control over image output.</p>"},{"location":"features/#image-to-image-guide","title":"* Image-to-Image Guide","text":"<p>Use a seed image to build new creations.</p>"},{"location":"features/#model-management","title":"Model Management","text":""},{"location":"features/#model-installation","title":"* Model Installation","text":"<p>Learn how to import third-party models and switch among them. This guide also covers optimizing models to load quickly.</p>"},{"location":"features/#merging-models","title":"* Merging Models","text":"<p>Teach an old model new tricks. Merge 2-3 models together to create a new model that combines characteristics of the originals.</p>"},{"location":"features/#textual-inversion","title":"* Textual Inversion","text":"<p>Personalize models by adding your own style or subjects.</p>"},{"location":"features/#other-features","title":"Other Features","text":""},{"location":"features/#the-nsfw-checker","title":"* The NSFW Checker","text":"<p>Prevent InvokeAI from displaying unwanted racy images.</p>"},{"location":"features/#controlling-logging","title":"* Controlling Logging","text":"<p>Control how InvokeAI logs status messages.</p>"},{"location":"features/#command-line-utilities","title":"* Command-line Utilities","text":"<p>A list of the command-line utilities available with InvokeAI.</p>"},{"location":"features/CONFIGURATION/","title":"InvokeAI Configuration","text":""},{"location":"features/CONFIGURATION/#intro","title":"Intro","text":"<p>InvokeAI has numerous runtime settings which can be used to adjust many aspects of its operations, including the location of files and directories, memory usage, and performance. These settings can be viewed and customized in several ways:</p> <ol> <li>By editing settings in the <code>invokeai.yaml</code> file.</li> <li>By setting environment variables.</li> <li>On the command-line, when InvokeAI is launched.</li> </ol> <p>In addition, the most commonly changed settings are accessible graphically via the <code>invokeai-configure</code> script.</p>"},{"location":"features/CONFIGURATION/#how-the-configuration-system-works","title":"How the Configuration System Works","text":"<p>When InvokeAI is launched, the very first thing it needs to do is to find its \"root\" directory, which contains its configuration files, installed models, its database of images, and the folder(s) of generated images themselves. In this document, the root directory will be referred to as ROOT.</p>"},{"location":"features/CONFIGURATION/#finding-the-root-directory","title":"Finding the Root Directory","text":"<p>To find its root directory, InvokeAI uses the following recipe:</p> <ol> <li> <p>It first looks for the argument <code>--root &lt;path&gt;</code> on the command line it was launched from, and uses the indicated path if present.</p> </li> <li> <p>Next it looks for the environment variable INVOKEAI_ROOT, and uses the directory path found there if present.</p> </li> <li> <p>If neither of these are present, then InvokeAI looks for the folder containing the <code>.venv</code> Python virtual environment directory for the currently active environment. This directory is checked for files expected inside the InvokeAI root before it is used.</p> </li> <li> <p>Finally, InvokeAI looks for a directory in the current user's home directory named <code>invokeai</code>.</p> </li> </ol>"},{"location":"features/CONFIGURATION/#reading-the-invokeai-configuration-file","title":"Reading the InvokeAI Configuration File","text":"<p>Once the root directory has been located, InvokeAI looks for a file named <code>ROOT/invokeai.yaml</code>, and if present reads configuration values from it. The top of this file looks like this:</p> <pre><code>InvokeAI:\n  Web Server:\n    host: localhost\n    port: 9090\n    allow_origins: []\n    allow_credentials: true\n    allow_methods:\n    - '*'\n    allow_headers:\n    - '*'\n  Features:\n    esrgan: true\n    internet_available: true\n    log_tokenization: false\n    patchmatch: true\n    restore: true\n...\n</code></pre> <p>This lines in this file are used to establish default values for Invoke's settings. In the above fragment, the Web Server's listening port is set to 9090 by the <code>port</code> setting.</p> <p>You can edit this file with a text editor such as \"Notepad\" (do not use Word or any other word processor). When editing, be careful to maintain the indentation, and do not add extraneous text, as syntax errors will prevent InvokeAI from launching. A basic guide to the format of YAML files can be found here.</p> <p>You can fix a broken <code>invokeai.yaml</code> by deleting it and running the configuration script again -- option [6] in the launcher, \"Re-run the configure script\".</p>"},{"location":"features/CONFIGURATION/#reading-environment-variables","title":"Reading Environment Variables","text":"<p>Next InvokeAI looks for defined environment variables in the format <code>INVOKEAI_&lt;setting_name&gt;</code>, for example <code>INVOKEAI_port</code>. Environment variable values take precedence over configuration file variables. On a Macintosh system, for example, you could change the port that the web server listens on by setting the environment variable this way:</p> <pre><code>export INVOKEAI_port=8000\ninvokeai-web\n</code></pre> <p>Please check out these Macintosh and Windows guides for setting temporary and permanent environment variables.</p>"},{"location":"features/CONFIGURATION/#reading-the-command-line","title":"Reading the Command Line","text":"<p>Lastly, InvokeAI takes settings from the command line, which override everything else. The command-line settings have the same name as the corresponding configuration file settings, preceded by a <code>--</code>, for example <code>--port 8000</code>.</p> <p>If you are using the launcher (<code>invoke.sh</code> or <code>invoke.bat</code>) to launch InvokeAI, then just pass the command-line arguments to the launcher:</p> <pre><code>invoke.bat --port 8000 --host 0.0.0.0\n</code></pre> <p>The arguments will be applied when you select the web server option (and the other options as well).</p> <p>If, on the other hand, you prefer to launch InvokeAI directly from the command line, you would first activate the virtual environment (known as the \"developer's console\" in the launcher), and run <code>invokeai-web</code>:</p> <pre><code>&gt; C:\\Users\\Fred\\invokeai\\.venv\\scripts\\activate\n(.venv) &gt; invokeai-web --port 8000 --host 0.0.0.0\n</code></pre> <p>You can get a listing and brief instructions for each of the command-line options by giving the <code>--help</code> argument:</p> <pre><code>(.venv) &gt; invokeai-web --help\nusage: InvokeAI [-h] [--host HOST] [--port PORT] [--allow_origins [ALLOW_ORIGINS ...]] [--allow_credentials | --no-allow_credentials] [--allow_methods [ALLOW_METHODS ...]]\n                [--allow_headers [ALLOW_HEADERS ...]] [--esrgan | --no-esrgan] [--internet_available | --no-internet_available] [--log_tokenization | --no-log_tokenization]\n                [--patchmatch | --no-patchmatch] [--restore | --no-restore]\n                [--always_use_cpu | --no-always_use_cpu] [--free_gpu_mem | --no-free_gpu_mem] [--max_loaded_models MAX_LOADED_MODELS] [--max_cache_size MAX_CACHE_SIZE]\n                [--max_vram_cache_size MAX_VRAM_CACHE_SIZE] [--gpu_mem_reserved GPU_MEM_RESERVED] [--precision {auto,float16,float32,autocast}]\n                [--sequential_guidance | --no-sequential_guidance] [--xformers_enabled | --no-xformers_enabled] [--tiled_decode | --no-tiled_decode] [--root ROOT]\n                [--autoimport_dir AUTOIMPORT_DIR] [--lora_dir LORA_DIR] [--embedding_dir EMBEDDING_DIR] [--controlnet_dir CONTROLNET_DIR] [--conf_path CONF_PATH]\n                [--models_dir MODELS_DIR] [--legacy_conf_dir LEGACY_CONF_DIR] [--db_dir DB_DIR] [--outdir OUTDIR] [--from_file FROM_FILE]\n                [--use_memory_db | --no-use_memory_db] [--model MODEL] [--log_handlers [LOG_HANDLERS ...]] [--log_format {plain,color,syslog,legacy}]\n                [--log_level {debug,info,warning,error,critical}] [--version | --no-version]\n</code></pre>"},{"location":"features/CONFIGURATION/#the-configuration-settings","title":"The Configuration Settings","text":"<p>The configuration settings are divided into several distinct groups in <code>invokeia.yaml</code>:</p>"},{"location":"features/CONFIGURATION/#web-server","title":"Web Server","text":"Setting Default Value Description <code>host</code> <code>localhost</code> Name or IP address of the network interface that the web server will listen on <code>port</code> <code>9090</code> Network port number that the web server will listen on <code>allow_origins</code> <code>[]</code> A list of host names or IP addresses that are allowed to connect to the InvokeAI API in the format <code>['host1','host2',...]</code> <code>allow_credentials</code> <code>true</code> Require credentials for a foreign host to access the InvokeAI API (don't change this) <code>allow_methods</code> <code>*</code> List of HTTP methods (\"GET\", \"POST\") that the web server is allowed to use when accessing the API <code>allow_headers</code> <code>*</code> List of HTTP headers that the web server will accept when accessing the API <code>ssl_certfile</code> null Path to an SSL certificate file, used to enable HTTPS. <code>ssl_keyfile</code> null Path to an SSL keyfile, if the key is not included in the certificate file. <p>The documentation for InvokeAI's API can be accessed by browsing to the following URL: [http://localhost:9090/docs].</p>"},{"location":"features/CONFIGURATION/#features","title":"Features","text":"<p>These configuration settings allow you to enable and disable various InvokeAI features:</p> Setting Default Value Description <code>esrgan</code> <code>true</code> Activate the ESRGAN upscaling options <code>internet_available</code> <code>true</code> When a resource is not available locally, try to fetch it via the internet <code>log_tokenization</code> <code>false</code> Before each text2image generation, print a color-coded representation of the prompt to the console; this can help understand why a prompt is not working as expected <code>patchmatch</code> <code>true</code> Activate the \"patchmatch\" algorithm for improved inpainting"},{"location":"features/CONFIGURATION/#generation","title":"Generation","text":"<p>These options tune InvokeAI's memory and performance characteristics.</p> Setting Default Value Description <code>sequential_guidance</code> <code>false</code> Calculate guidance in serial rather than in parallel, lowering memory requirements at the cost of some performance loss <code>attention_type</code> <code>auto</code> Select the type of attention to use. One of <code>auto</code>,<code>normal</code>,<code>xformers</code>,<code>sliced</code>, or <code>torch-sdp</code> <code>attention_slice_size</code> <code>auto</code> When \"sliced\" attention is selected, set the slice size. One of <code>auto</code>, <code>balanced</code>, <code>max</code> or the integers 1-8 <code>force_tiled_decode</code> <code>false</code> Force the VAE step to decode in tiles, reducing memory consumption at the cost of performance"},{"location":"features/CONFIGURATION/#device","title":"Device","text":"<p>These options configure the generation execution device.</p> Setting Default Value Description <code>device</code> <code>auto</code> Preferred execution device. One of <code>auto</code>, <code>cpu</code>, <code>cuda</code>, <code>cuda:1</code>, <code>mps</code>. <code>auto</code> will choose the device depending on the hardware platform and the installed torch capabilities. <code>precision</code> <code>auto</code> Floating point precision. One of <code>auto</code>, <code>float16</code> or <code>float32</code>. <code>float16</code> will consume half the memory of <code>float32</code> but produce slightly lower-quality images. The <code>auto</code> setting will guess the proper precision based on your video card and operating system"},{"location":"features/CONFIGURATION/#paths","title":"Paths","text":"<p>These options set the paths of various directories and files used by InvokeAI. Relative paths are interpreted relative to INVOKEAI_ROOT, so if INVOKEAI_ROOT is <code>/home/fred/invokeai</code> and the path is <code>autoimport/main</code>, then the corresponding directory will be located at <code>/home/fred/invokeai/autoimport/main</code>.</p> Setting Default Value Description <code>autoimport_dir</code> <code>autoimport/main</code> At startup time, read and import any main model files found in this directory <code>lora_dir</code> <code>autoimport/lora</code> At startup time, read and import any LoRA/LyCORIS models found in this directory <code>embedding_dir</code> <code>autoimport/embedding</code> At startup time, read and import any textual inversion (embedding) models found in this directory <code>controlnet_dir</code> <code>autoimport/controlnet</code> At startup time, read and import any ControlNet models found in this directory <code>conf_path</code> <code>configs/models.yaml</code> Location of the <code>models.yaml</code> model configuration file <code>models_dir</code> <code>models</code> Location of the directory containing models installed by InvokeAI's model manager <code>legacy_conf_dir</code> <code>configs/stable-diffusion</code> Location of the directory containing the .yaml configuration files for legacy checkpoint models <code>db_dir</code> <code>databases</code> Location of the directory containing InvokeAI's image, schema and session database <code>outdir</code> <code>outputs</code> Location of the directory in which the gallery of generated and uploaded images will be stored <code>use_memory_db</code> <code>false</code> Keep database information in memory rather than on disk; this will not preserve image gallery information across restarts <p>Note that the autoimport directories will be searched recursively, allowing you to organize the models into folders and subfolders in any way you wish. In addition, while we have split up autoimport directories by the type of model they contain, this isn't necessary. You can combine different model types in the same folder and InvokeAI will figure out what they are. So you can easily use just one autoimport directory by commenting out the unneeded paths:</p> <pre><code>Paths:\n  autoimport_dir: autoimport\n#  lora_dir: null\n#  embedding_dir: null\n#  controlnet_dir: null\n</code></pre>"},{"location":"features/CONFIGURATION/#logging","title":"Logging","text":"<p>These settings control the information, warning, and debugging messages printed to the console log while InvokeAI is running:</p> Setting Default Value Description <code>log_handlers</code> <code>console</code> This controls where log messages are sent, and can be a list of one or more destinations. Values include <code>console</code>, <code>file</code>, <code>syslog</code> and <code>http</code>. These are described in more detail below <code>log_format</code> <code>color</code> This controls the formatting of the log messages. Values are <code>plain</code>, <code>color</code>, <code>legacy</code> and <code>syslog</code> <code>log_level</code> <code>debug</code> This filters messages according to the level of severity and can be one of <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code> and <code>critical</code>. For example, setting to <code>warning</code> will display all messages at the warning level or higher, but won't display \"debug\" or \"info\" messages <p>Several different log handler destinations are available, and multiple destinations are supported by providing a list:</p> <pre><code>  log_handlers:\n     - console\n     - syslog=localhost\n     - file=/var/log/invokeai.log\n</code></pre> <ul> <li> <p><code>console</code> is the default. It prints log messages to the command-line window from which InvokeAI was launched.</p> </li> <li> <p><code>syslog</code> is only available on Linux and Macintosh systems. It uses   the operating system's \"syslog\" facility to write log file entries   locally or to a remote logging machine. <code>syslog</code> offers a variety   of configuration options:</p> </li> </ul> <pre><code>  syslog=/dev/log`      - log to the /dev/log device\n  syslog=localhost`     - log to the network logger running on the local machine\n  syslog=localhost:512` - same as above, but using a non-standard port\n  syslog=fredserver,facility=LOG_USER,socktype=SOCK_DRAM`\n                        - Log to LAN-connected server \"fredserver\" using the facility LOG_USER and datagram packets.\n</code></pre> <ul> <li><code>http</code> can be used to log to a remote web server. The server must be   properly configured to receive and act on log messages. The option   accepts the URL to the web server, and a <code>method</code> argument   indicating whether the message should be submitted using the GET or   POST method.</li> </ul> <pre><code> http=http://my.server/path/to/logger,method=POST\n</code></pre> <p>The <code>log_format</code> option provides several alternative formats:</p> <ul> <li><code>color</code>    - default format providing time, date and a message, using text colors to distinguish different log severities</li> <li><code>plain</code>    - same as above, but monochrome text only</li> <li><code>syslog</code>   - the log level and error message only, allowing the syslog system to attach the time and date</li> <li><code>legacy</code>   - a format similar to the one used by the legacy 2.3 InvokeAI releases.</li> </ul>"},{"location":"features/CONTROLNET/","title":"Control Adapters","text":""},{"location":"features/CONTROLNET/#controlnet","title":"ControlNet","text":"<p>ControlNet is a powerful set of features developed by the open-source community (notably, Stanford researcher @ilyasviel) that allows you to apply a secondary neural network model to your image generation process in Invoke.</p> <p>With ControlNet, you can get more control over the output of your image generation, providing you with a way to direct the network towards generating images that better fit your desired style or outcome.</p> <p>ControlNet works by analyzing an input image, pre-processing that image to identify relevant information that can be interpreted by each specific ControlNet model, and then inserting that control information into the generation process. This can be used to adjust the style, composition, or other aspects of the image to better achieve a specific result.</p>"},{"location":"features/CONTROLNET/#installation","title":"Installation","text":"<p>InvokeAI provides access to a series of ControlNet models that provide different effects or styles in your generated images.</p> <p>To install ControlNet Models:</p> <ol> <li>The easiest way to install them is to use the InvokeAI model installer application. Use the <code>invoke.sh</code>/<code>invoke.bat</code> launcher to select item [4] and then navigate to the CONTROLNETS section. Select the models you wish to install and press \"APPLY CHANGES\". You may also enter additional HuggingFace repo_ids in the \"Additional models\" textbox. </li> <li>Using the \"Add Model\" function of the  model manager, enter the HuggingFace Repo ID of the ControlNet. The ID is in the format \"author/repoName\"</li> </ol> <p>Be aware that some ControlNet models require additional code functionality in order to work properly, so just installing a third-party ControlNet model may not have the desired effect. Please read and follow the documentation for installing a third party model not currently included among InvokeAI's default list.</p> <p>Currently InvokeAI only supports \ud83e\udd17 Diffusers-format ControlNet models. These are folders that contain the files <code>config.json</code> and/or <code>diffusion_pytorch_model.safetensors</code> and <code>diffusion_pytorch_model.fp16.safetensors</code>. The name of the folder is the name of the model.</p> <p>\ud83e\udd17 Diffusers-format ControlNet models are available at HuggingFace (http://huggingface.co) and accessed via their repo IDs (identifiers in the format \"author/modelname\").</p>"},{"location":"features/CONTROLNET/#controlnet-models","title":"ControlNet Models","text":"<p>The models currently supported include:</p> <p>Canny:</p> <p>When the Canny model is used in ControlNet, Invoke will attempt to generate images that match the edges detected. </p> <p>Canny edge detection works by detecting the edges in an image by looking for abrupt changes in intensity. It is known for its ability to detect edges accurately while reducing noise and false edges, and the preprocessor can identify more information by decreasing the thresholds.</p> <p>M-LSD: </p> <p>M-LSD is another edge detection algorithm used in ControlNet. It stands for Multi-Scale Line Segment Detector. </p> <p>It detects straight line segments in an image by analyzing the local structure of the image at multiple scales.  It can be useful for architectural imagery, or anything where straight-line structural information is needed for the resulting output. </p> <p>Lineart: </p> <p>The Lineart model in ControlNet generates line drawings from an input image. The resulting pre-processed image is a simplified version of the original, with only the outlines of objects visible.The Lineart model in ControlNet is known for its ability to accurately capture the contours of the objects in an input sketch. </p> <p>Lineart Anime: </p> <p>A variant of the Lineart model that generates line drawings with a distinct style inspired by anime and manga art styles.</p> <p>Depth:  A model that generates depth maps of images, allowing you to create more realistic 3D models or to simulate depth effects in post-processing.</p> <p>Normal Map (BAE):  A model that generates normal maps from input images, allowing for more realistic lighting effects in 3D rendering.</p> <p>Image Segmentation:  A model that divides input images into segments or regions, each of which corresponds to a different object or part of the image. (More details coming soon)</p> <p>QR Code Monster: A model that helps generate creative QR codes that still scan. Can also be used to create images with text, logos or shapes within them. </p> <p>Openpose:  The OpenPose control model allows for the identification of the general pose of a character by pre-processing an existing image with a clear human structure. With advanced options, Openpose can also detect the face or hands in the image. </p> <p>Note: The DWPose Processor has replaced the OpenPose processor in Invoke. Workflows and generations that relied on the OpenPose Processor will need to be updated to use the DWPose Processor instead.</p> <p>Mediapipe Face:</p> <p>The MediaPipe Face identification processor is able to clearly identify facial features in order to capture vivid expressions of human faces.</p> <p>Tile:</p> <p>The Tile model fills out details in the image to match the image, rather than the prompt. The Tile Model is a versatile tool that offers a range of functionalities. Its primary capabilities can be boiled down to two main behaviors:</p> <ul> <li>It can reinterpret specific details within an image and create fresh, new elements.</li> <li>It has the ability to disregard global instructions if there's a discrepancy between them and the local context or specific parts of the image. In such cases, it uses the local context to guide the process.</li> </ul> <p>The Tile Model can be a powerful tool in your arsenal for enhancing image quality and details. If there are undesirable elements in your images, such as blurriness caused by resizing, this model can effectively eliminate these issues, resulting in cleaner, crisper images. Moreover, it can generate and add refined details to your images, improving their overall quality and appeal. </p> <p>Pix2Pix (experimental)</p> <p>With Pix2Pix, you can input an image into the controlnet, and then \"instruct\" the model to change it using your prompt. For example, you can say \"Make it winter\" to add more wintry elements to a scene.</p> <p>Each of these models can be adjusted and combined with other ControlNet models to achieve different results, giving you even more control over your image generation process.</p>"},{"location":"features/CONTROLNET/#using-controlnet","title":"Using ControlNet","text":"<p>To use ControlNet, you can simply select the desired model and adjust both the ControlNet and Pre-processor settings to achieve the desired result. You can also use multiple ControlNet models at the same time, allowing you to achieve even more complex effects or styles in your generated images.</p> <p>Each ControlNet has two settings that are applied to the ControlNet.</p> <p>Weight - Strength of the Controlnet model applied to the generation for the section, defined by start/end.</p> <p>Start/End  - 0 represents the start of the generation, 1 represents the end. The Start/end setting controls what steps during the generation process have the ControlNet applied.</p> <p>Additionally, each ControlNet section can be expanded in order to manipulate settings for the image pre-processor that adjusts your uploaded image before using it in when you Invoke.</p>"},{"location":"features/CONTROLNET/#t2i-adapter","title":"T2I-Adapter","text":"<p>T2I-Adapter is a tool similar to ControlNet that allows for control over the generation process by providing control information during the generation process. T2I-Adapter models tend to be smaller and more efficient than ControlNets. </p>"},{"location":"features/CONTROLNET/#installation_1","title":"Installation","text":"<p>To install T2I-Adapter Models:</p> <ol> <li>The easiest way to install models is to use the InvokeAI model installer application. Use the <code>invoke.sh</code>/<code>invoke.bat</code> launcher to select item [5] and then navigate to the T2I-Adapters section. Select the models you wish to install and press \"APPLY CHANGES\". You may also enter additional HuggingFace repo_ids in the \"Additional models\" textbox. </li> <li>Using the \"Add Model\" function of the  model manager, enter the HuggingFace Repo ID of the T2I-Adapter. The ID is in the format \"author/repoName\"</li> </ol>"},{"location":"features/CONTROLNET/#usage","title":"Usage","text":"<p>Each T2I Adapter has two settings that are applied.</p> <p>Weight - Strength of the model applied to the generation for the section, defined by start/end.</p> <p>Start/End  - 0 represents the start of the generation, 1 represents the end. The Start/end setting controls what steps during the generation process have the ControlNet applied.</p> <p>Additionally, each  section can be expanded with the \"Show Advanced\" button in order to manipulate settings for the image pre-processor that adjusts your uploaded image before using it in during the generation process.</p>"},{"location":"features/CONTROLNET/#ip-adapter","title":"IP-Adapter","text":"<p>IP-Adapter is a tooling that allows for image prompt capabilities with text-to-image diffusion models. IP-Adapter works by analyzing the given image prompt to extract features, then passing those features to the UNet along with any other conditioning provided. </p> <p></p> <p></p>"},{"location":"features/CONTROLNET/#installation_2","title":"Installation","text":"<p>There are several ways to install IP-Adapter models with an existing InvokeAI installation:</p> <ol> <li>Through the command line interface launched from the invoke.sh / invoke.bat scripts, option [4] to download models.</li> <li>Through the Model Manager UI with models from the Tools section of www.models.invoke.ai. To do this, copy the repo ID from the desired model page, and paste it in the Add Model field of the model manager. Note Both the IP-Adapter and the Image Encoder must be installed for IP-Adapter to work. For example, the SD 1.5 IP-Adapter and SD1.5 Image Encoder must be installed to use IP-Adapter with SD1.5 based models.  </li> <li>**Advanced -- Not recommended ** Manually downloading the IP-Adapter and Image Encoder files - Image Encoder folders shouid be placed in the <code>models\\any\\clip_vision</code> folders. IP Adapter Model folders should be placed in the relevant <code>ip-adapter</code> folder of relevant base model folder of Invoke root directory. For example, for the SDXL IP-Adapter, files should be added to the <code>model/sdxl/ip_adapter/</code> folder. </li> </ol>"},{"location":"features/CONTROLNET/#using-ip-adapter","title":"Using IP-Adapter","text":"<p>IP-Adapter can be used by navigating to the Control Adapters options and enabling IP-Adapter. </p> <p>IP-Adapter requires an image to be used as the Image Prompt. It can also be used in conjunction with text prompts, Image-to-Image, Inpainting, Outpainting, ControlNets and LoRAs.</p> <p>Each IP-Adapter has two settings that are applied to the IP-Adapter:</p> <ul> <li>Weight - Strength of the IP-Adapter model applied to the generation for the section, defined by start/end</li> <li>Start/End  - 0 represents the start of the generation, 1 represents the end. The Start/end setting controls what steps during the generation process have the IP-Adapter applied.</li> </ul>"},{"location":"features/IMG2IMG/","title":"Image-to-Image","text":"<p>InvokeAI provides an \"img2img\" feature that lets you seed your creations with an initial drawing or photo. This is a really cool feature that tells stable diffusion to build the prompt on top of the image you provide, preserving the original's basic shape and layout.</p> <p>For a walkthrough of using Image-to-Image in the Web UI, see InvokeAI Web Server.</p> <p>The main difference between <code>img2img</code> and <code>prompt2img</code> is the starting point. While <code>prompt2img</code> always starts with pure gaussian noise and progressively refines it over the requested number of steps, <code>img2img</code> skips some of these earlier steps (how many it skips is indirectly controlled by the <code>--strength</code> parameter), and uses instead your initial image mixed with gaussian noise as the starting image.</p> <p>Let's start by thinking about vanilla <code>prompt2img</code>, just generating an image from a prompt. If the step count is 10, then the \"latent space\" (Stable Diffusion's internal representation of the image) for the prompt \"fire\" with seed <code>1592514025</code> develops something like this:</p> <p> </p> <p>Put simply: starting from a frame of fuzz/static, SD finds details in each frame that it thinks look like \"fire\" and brings them a little bit more into focus, gradually scrubbing out the fuzz until a clear image remains.</p> <p>When you use <code>img2img</code> some of the earlier steps are cut, and instead an initial image of your choice is used. But because of how the maths behind Stable Diffusion works, this image needs to be mixed with just the right amount of noise (fuzz/static) for where it is being inserted. This is where the strength parameter comes in. Depending on the set strength, your image will be inserted into the sequence at the appropriate point, with just the right amount of noise.</p>"},{"location":"features/IMG2IMG/#a-concrete-example","title":"A concrete example","text":"<p>I want SD to draw a fire based on this hand-drawn image</p> <p></p> <p>Let's only do 10 steps, to make it easier to see what's happening. If strength is <code>0.7</code>, this is what the internal steps the algorithm has to take will look like:</p> <p> </p> <p>With strength <code>0.4</code>, the steps look more like this:</p> <p> </p> <p>Notice how much more fuzzy the starting image is for strength <code>0.7</code> compared to <code>0.4</code>, and notice also how much longer the sequence is with <code>0.7</code>:</p> strength = 0.7 strength = 0.4 initial image that SD sees steps argument to <code>invoke&gt;</code> <code>-S10</code> <code>-S10</code> steps actually taken <code>7</code> <code>4</code> latent space at each step output <p>Both of the outputs look kind of like what I was thinking of. With the strength higher, my input becomes more vague, and Stable Diffusion has more steps to refine its output. But it's not really making what I want, which is a picture of cheery open fire. With the strength lower, my input is more clear, but Stable Diffusion has less chance to refine itself, so the result ends up inheriting all the problems of my bad drawing.</p> <p>If you want to try this out yourself, all of these are using a seed of <code>1592514025</code> with a width/height of <code>384</code>, step count <code>10</code>, the <code>k_lms</code> sampler, and the single-word prompt <code>\"fire\"</code>.</p>"},{"location":"features/IMG2IMG/#compensating-for-the-reduced-step-count","title":"Compensating for the reduced step count","text":"<p>After putting this guide together I was curious to see how the difference would be if I increased the step count to compensate, so that SD could have the same amount of steps to develop the image regardless of the strength. So I ran the generation again using the same seed, but this time adapting the step count to give each generation 20 steps.</p> <p>Here's strength <code>0.4</code> (note step count <code>50</code>, which is <code>20 \u00f7 0.4</code> to make sure SD does <code>20</code> steps from my image):</p> <p></p> <p>and here is strength <code>0.7</code> (note step count <code>30</code>, which is roughly <code>20 \u00f7 0.7</code> to make sure SD does <code>20</code> steps from my image):</p> <p></p> <p>In both cases the image is nice and clean and \"finished\", but because at strength <code>0.7</code> Stable Diffusion has been give so much more freedom to improve on my badly-drawn flames, they've come out looking much better. You can really see the difference when looking at the latent steps. There's more noise on the first image with strength <code>0.7</code>:</p> <p></p> <p>than there is for strength <code>0.4</code>:</p> <p></p> <p>and that extra noise gives the algorithm more choices when it is evaluating how to denoise any particular pixel in the image.</p> <p>Unfortunately, it seems that <code>img2img</code> is very sensitive to the step count. Here's strength <code>0.7</code> with a step count of <code>29</code> (SD did 19 steps from my image):</p> <p></p> <p>By comparing the latents we can sort of see that something got interpreted differently enough on the third or fourth step to lead to a rather different interpretation of the flames.</p> <p></p> <p></p> <p>This is the result of a difference in the de-noising \"schedule\" - basically the noise has to be cleaned by a certain degree each step or the model won't \"converge\" on the image properly (see stable diffusion blog for more about that). A different step count means a different schedule, which means things get interpreted slightly differently at every step.</p>"},{"location":"features/LOGGING/","title":"Controlling Logging","text":""},{"location":"features/LOGGING/#controlling-how-invokeai-logs-status-messages","title":"Controlling How InvokeAI Logs Status Messages","text":"<p>InvokeAI logs status messages using a configurable logging system. You can log to the terminal window, to a designated file on the local machine, to the syslog facility on a Linux or Mac, or to a properly configured web server. You can configure several logs at the same time, and control the level of message logged and the logging format (to a limited extent).</p> <p>Three command-line options control logging:</p>"},{"location":"features/LOGGING/#-log_handlers-handler1-handler2","title":"<code>--log_handlers &lt;handler1&gt; &lt;handler2&gt; ...</code>","text":"<p>This option activates one or more log handlers. Options are \"console\", \"file\", \"syslog\" and \"http\". To specify more than one, separate them by spaces:</p> <pre><code>invokeai-web --log_handlers console syslog=/dev/log file=C:\\Users\\fred\\invokeai.log\n</code></pre> <p>The format of these options is described below.</p>"},{"location":"features/LOGGING/#-log_format-plaincolorlegacysyslog","title":"<code>--log_format {plain|color|legacy|syslog}</code>","text":"<p>This controls the format of log messages written to the console. Only the \"console\" log handler is currently affected by this setting.</p> <ul> <li>\"plain\" provides formatted messages like this:</li> </ul> <pre><code>[2023-05-24 23:18:2[2023-05-24 23:18:50,352]::[InvokeAI]::DEBUG --&gt; this is a debug message\n[2023-05-24 23:18:50,352]::[InvokeAI]::INFO --&gt; this is an informational messages\n[2023-05-24 23:18:50,352]::[InvokeAI]::WARNING --&gt; this is a warning\n[2023-05-24 23:18:50,352]::[InvokeAI]::ERROR --&gt; this is an error\n[2023-05-24 23:18:50,352]::[InvokeAI]::CRITICAL --&gt; this is a critical error\n</code></pre> <ul> <li> <p>\"color\" produces similar output, but the text will be color coded to indicate the severity of the message.</p> </li> <li> <p>\"legacy\" produces output similar to InvokeAI versions 2.3 and earlier:</p> </li> </ul> <pre><code>### this is a critical error\n*** this is an error\n** this is a warning\n&gt;&gt; this is an informational messages\n   | this is a debug message\n</code></pre> <ul> <li>\"syslog\" produces messages suitable for syslog entries:</li> </ul> <pre><code>InvokeAI [2691178] &lt;CRITICAL&gt; this is a critical error\nInvokeAI [2691178] &lt;ERROR&gt; this is an error\nInvokeAI [2691178] &lt;WARNING&gt; this is a warning\nInvokeAI [2691178] &lt;INFO&gt; this is an informational messages\nInvokeAI [2691178] &lt;DEBUG&gt; this is a debug message\n</code></pre> <p>(note that the date, time and hostname will be added by the syslog system)</p>"},{"location":"features/LOGGING/#-log_level-debuginfowarningerrorcritical","title":"<code>--log_level {debug|info|warning|error|critical}</code>","text":"<p>Providing this command-line option will cause only messages at the specified level or above to be emitted.</p>"},{"location":"features/LOGGING/#console-logging","title":"Console logging","text":"<p>When \"console\" is provided to <code>--log_handlers</code>, messages will be written to the command line window in which InvokeAI was launched. By default, the color formatter will be used unless overridden by <code>--log_format</code>.</p>"},{"location":"features/LOGGING/#file-logging","title":"File logging","text":"<p>When \"file\" is provided to <code>--log_handlers</code>, entries will be written to the file indicated in the path argument. By default, the \"plain\" format will be used:</p> <pre><code>invokeai-web --log_handlers file=/var/log/invokeai.log\n</code></pre>"},{"location":"features/LOGGING/#syslog-logging","title":"Syslog logging","text":"<p>When \"syslog\" is requested, entries will be sent to the syslog system. There are a variety of ways to control where the log message is sent:</p> <ul> <li>Send to the local machine using the <code>/dev/log</code> socket:</li> </ul> <pre><code>invokeai-web --log_handlers syslog=/dev/log\n</code></pre> <ul> <li>Send to the local machine using a UDP message:</li> </ul> <pre><code>invokeai-web --log_handlers syslog=localhost\n</code></pre> <ul> <li>Send to the local machine using a UDP message on a nonstandard   port:</li> </ul> <pre><code>invokeai-web --log_handlers syslog=localhost:512\n</code></pre> <ul> <li>Send to a remote machine named \"loghost\" on the local LAN using   facility LOG_USER and UDP packets:</li> </ul> <pre><code>invokeai-web --log_handlers syslog=loghost,facility=LOG_USER,socktype=SOCK_DGRAM\n</code></pre> <p>This can be abbreviated <code>syslog=loghost</code>, as LOG_USER and SOCK_DGRAM are defaults.</p> <ul> <li>Send to a remote machine named \"loghost\" using the facility LOCAL0   and using a TCP socket:</li> </ul> <pre><code>invokeai-web --log_handlers syslog=loghost,facility=LOG_LOCAL0,socktype=SOCK_STREAM\n</code></pre> <p>If no arguments are specified (just a bare \"syslog\"), then the logging system will look for a UNIX socket named <code>/dev/log</code>, and if not found try to send a UDP message to <code>localhost</code>. The Macintosh OS used to support logging to a socket named <code>/var/run/syslog</code>, but this feature has since been disabled.</p>"},{"location":"features/LOGGING/#web-logging","title":"Web logging","text":"<p>If you have access to a web server that is configured to log messages when a particular URL is requested, you can log using the \"http\" method:</p> <pre><code>invokeai-web --log_handlers http=http://my.server/path/to/logger,method=POST\n</code></pre> <p>The optional [,method=] part can be used to specify whether the URL accepts GET (default) or POST messages.</p> <p>Currently password authentication and SSL are not supported.</p>"},{"location":"features/LOGGING/#using-the-configuration-file","title":"Using the configuration file","text":"<p>You can set and forget logging options by adding a \"Logging\" section to <code>invokeai.yaml</code>:</p> <pre><code>InvokeAI:\n  [... other settings...]\n  Logging:\n    log_handlers:\n       - console\n       - syslog=/dev/log\n    log_level: info\n    log_format: color\n</code></pre>"},{"location":"features/LORAS/","title":"LoRAs &amp; LCM-LoRAs","text":"<p>With the advances in research, many new capabilities are available to customize the knowledge and understanding of novel concepts not originally contained in the base model. </p>"},{"location":"features/LORAS/#loras","title":"LoRAs","text":"<p>Low-Rank Adaptation (LoRA) files are models that customize the output of Stable Diffusion image generation.  Larger than embeddings, but much smaller than full models, they augment SD with improved understanding of subjects and artistic styles.</p> <p>Unlike TI files, LoRAs do not introduce novel vocabulary into the model's known tokens. Instead, LoRAs augment the model's weights that are applied to generate imagery. LoRAs may be supplied with a \"trigger\" word that they have been explicitly trained on, or may simply apply their effect without being triggered.</p> <p>LoRAs are typically stored in .safetensors files, which are the most secure way to store and transmit these types of weights. You may install any number of <code>.safetensors</code> LoRA files simply by copying them into the <code>autoimport/lora</code> directory of the corresponding InvokeAI models directory (usually <code>invokeai</code> in your home directory).</p> <p>To use these when generating, open the LoRA menu item in the options panel, select the LoRAs you want to apply and ensure that they have the appropriate weight recommended by the model provider. Typically, most LoRAs perform best at a weight of .75-1.</p>"},{"location":"features/LORAS/#lcm-loras","title":"LCM-LoRAs","text":"<p>Latent Consistency Models (LCMs) allowed a reduced number of steps to be used to generate images with Stable Diffusion. These are created by distilling base models, creating models that only require a small number of steps to generate images. However, LCMs require that any fine-tune of a base model be distilled to be used as an LCM. </p> <p>LCM-LoRAs are models that provide the benefit of LCMs but are able to be used as LoRAs and applied to any fine tune of a base model. LCM-LoRAs are created by training a small number of adapters, rather than distilling the entire fine-tuned base model. The resulting LoRA can be used the same way as a standard LoRA, but with a greatly reduced step count. This enables SDXL images to be generated up to 10x faster than without the use of LCM-LoRAs. </p> <p>Using LCM-LoRAs</p> <p>LCM-LoRAs are natively supported in InvokeAI throughout the application. To get started, install any diffusers format LCM-LoRAs using the model manager and select it in the LoRA field.</p> <p>There are a number parameter differences when using LCM-LoRAs and standard generation: </p> <ul> <li>When using LCM-LoRAs, the LoRA strength should be lower than if using a standard LoRA, with 0.35 recommended as a starting point.  </li> <li>The LCM scheduler should be used for generation</li> <li>CFG-Scale should be reduced to ~1</li> <li>Steps should be reduced in the range of 4-8</li> </ul> <p>Standard LoRAs can also be used alongside LCM-LoRAs, but will also require a lower strength, with 0.45 being recommended as a starting point. </p> <p>More information can be found here: https://huggingface.co/blog/lcm_lora#fast-inference-with-sdxl-lcm-loras</p>"},{"location":"features/MODEL_MERGING/","title":"Model Merging","text":"<p>InvokeAI provides the ability to merge two or three diffusers-type models into a new merged model. The resulting model will combine characteristics of the original, and can be used to teach an old model new tricks.</p>"},{"location":"features/MODEL_MERGING/#how-to-merge-models","title":"How to Merge Models","text":"<p>Model Merging can be be done by navigating to the Model Manager and clicking the \"Merge Models\" tab. From there, you can select the models and settings you want to use to merge th models. </p>"},{"location":"features/MODEL_MERGING/#settings","title":"Settings","text":"<ul> <li>Model Selection: there are three multiple choice fields that   display all the diffusers-style models that InvokeAI knows about.   If you do not see the model you are looking for, then it is probably   a legacy checkpoint model and needs to be converted using the   \"Convert\" option in the Web-based Model Manager tab.</li> </ul> <p>You must select at least two models to merge. The third can be left   at \"None\" if you desire.</p> <ul> <li> <p>Alpha: This is the ratio to use when combining models. It ranges   from 0 to 1. The higher the value, the more weight is given to the   2d and (optionally) 3d models. So if you have two models named \"A\"   and \"B\", an alpha value of 0.25 will give you a merged model that is   25% A and 75% B.</p> </li> <li> <p>Interpolation Method: This is the method used to combine   weights. The options are \"weighted_sum\" (the default), \"sigmoid\",   \"inv_sigmoid\" and \"add_difference\". Each produces slightly different   results. When three models are in use, only \"add_difference\" is   available.</p> </li> <li> <p>Save Location: The location you want the merged model to be saved in. Default is in the InvokeAI root folder</p> </li> <li> <p>Name for merged model: This is the name for the new model. Please   use InvokeAI conventions - only alphanumeric letters and the   characters \".+-\".</p> </li> <li> <p>Ignore Mismatches / Force: Not all models are compatible with each other. The merge   script will check for compatibility and refuse to merge ones that   are incompatible. Set this checkbox to try merging anyway.</p> </li> </ul> <p>You may run the merge script by starting the invoke launcher (<code>invoke.sh</code> or <code>invoke.bat</code>) and choosing the option (4) for merge models. This will launch a text-based interactive user interface that prompts you to select the models to merge, how to merge them, and the merged model name.</p> <p>Alternatively you may activate InvokeAI's virtual environment from the command line, and call the script via <code>merge_models --gui</code> to open up a version that has a nice graphical front end. To get the commandline- only version, omit <code>--gui</code>.</p> <p>The user interface for the text-based interactive script is straightforward. It shows you a series of setting fields. Use control-N (^N) to move to the next field, and control-P (^P) to move to the previous one. You can also use TAB and shift-TAB to move forward and backward. Once you are in a multiple choice field, use the up and down cursor arrows to move to your desired selection, and press  or  to select it. Change text fields by typing in them, and adjust scrollbars using the left and right arrow keys. <p>Once you are happy with your settings, press the OK button. Note that there may be two pages of settings, depending on the height of your screen, and the OK button may be on the second page. Advance past the last field of the first page to get to the second page, and reverse this to get back.</p> <p>If the merge runs successfully, it will create a new diffusers model under the selected name and register it with InvokeAI.</p>"},{"location":"features/OTHER/","title":"Others","text":""},{"location":"features/OTHER/#google-colab","title":"Google Colab","text":"<p>Open and follow instructions to use an isolated environment running Dream.</p> <p>Output Example:</p> <p></p>"},{"location":"features/OTHER/#invisible-watermark","title":"Invisible Watermark","text":"<p>In keeping with the principles for responsible AI generation, and to help AI researchers avoid synthetic images contaminating their training sets, InvokeAI adds an invisible watermark to each of the final images it generates. The watermark consists of the text \"InvokeAI\" and can be viewed using the invisible-watermarks tool.</p> <p>Watermarking is controlled using the <code>invisible-watermark</code> setting in <code>invokeai.yaml</code>. To turn it off, add the following line under the <code>Features</code> category.</p> <pre><code>invisible_watermark: false\n</code></pre>"},{"location":"features/OTHER/#weighted-prompts","title":"Weighted Prompts","text":"<p>You may weight different sections of the prompt to tell the sampler to attach different levels of priority to them, by adding <code>:&lt;percent&gt;</code> to the end of the section you wish to up- or downweight. For example consider this prompt:</p> <pre><code>(tabby cat):0.25 (white duck):0.75 hybrid\n</code></pre> <p>This will tell the sampler to invest 25% of its effort on the tabby cat aspect of the image and 75% on the white duck aspect (surprisingly, this example actually works). The prompt weights can use any combination of integers and floating point numbers, and they do not need to add up to 1.</p>"},{"location":"features/POSTPROCESS/","title":"Postprocessing","text":"<p>This sections details the ability to improve faces and upscale images.</p>"},{"location":"features/POSTPROCESS/#face-fixing","title":"Face Fixing","text":"<p>As of InvokeAI 3.0, the easiest way to improve faces created during image generation is through the Inpainting functionality of the Unified Canvas. Simply add the image containing the faces that you would like to improve to the canvas, mask the face to be improved and run the invocation. For best results, make sure to use an inpainting specific model; these are usually identified by the \"-inpainting\" term in the model name. </p>"},{"location":"features/POSTPROCESS/#upscaling","title":"Upscaling","text":"<p>Open the upscaling dialog by clicking on the \"expand\" icon located above the image display area in the Web UI:</p> <p></p> <p>The default upscaling option is Real-ESRGAN x2 Plus, which will scale your image by a factor of two. This means upscaling a 512x512 image will result in a new 1024x1024 image.</p> <p>Other options are the x4 upscalers, which will scale your image by a factor of 4. </p> <p>Note</p> <p>Real-ESRGAN is memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work.</p> <p>In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled after that process is complete. While the image generation is taking place, you will still be able to preview the base images.</p>"},{"location":"features/POSTPROCESS/#how-to-disable","title":"How to disable","text":"<p>If, for some reason, you do not wish to load the ESRGAN libraries, you can disable them on the invoke.py command line with the <code>--no_esrgan</code> options.</p>"},{"location":"features/PROMPTS/","title":"Prompting-Features","text":""},{"location":"features/PROMPTS/#prompt-syntax-features","title":"Prompt Syntax Features","text":"<p>The InvokeAI prompting language has the following features:</p>"},{"location":"features/PROMPTS/#attention-weighting","title":"Attention weighting","text":"<p>Append a word or phrase with <code>-</code> or <code>+</code>, or a weight between <code>0</code> and <code>2</code> (<code>1</code>=default), to decrease or increase \"attention\" (= a mix of per-token CFG weighting multiplier and, for <code>-</code>, a weighted blend with the prompt without the term).</p> <p>The following syntax is recognised:</p> <ul> <li>single words without parentheses: <code>a tall thin man picking apricots+</code></li> <li>single or multiple words with parentheses:   <code>a tall thin man picking (apricots)+</code> <code>a tall thin man picking (apricots)-</code> <code>a tall thin man (picking apricots)+</code> <code>a tall thin man (picking apricots)-</code></li> <li>more effect with more symbols <code>a tall thin man (picking apricots)++</code></li> <li>nesting <code>a tall thin man (picking apricots+)++</code> (<code>apricots</code> effectively gets   <code>+++</code>)</li> <li>all of the above with explicit numbers <code>a tall thin man picking (apricots)1.1</code> <code>a tall thin man (picking (apricots)1.3)1.1</code>. (<code>+</code> is equivalent to 1.1, <code>++</code>   is pow(1.1,2), <code>+++</code> is pow(1.1,3), etc; <code>-</code> means 0.9, <code>--</code> means pow(0.9,2),   etc.)</li> </ul> <p>You can use this to increase or decrease the amount of something. Starting from this prompt of <code>a man picking apricots from a tree</code>, let's see what happens if we increase and decrease how much attention we want Stable Diffusion to pay to the word <code>apricots</code>:</p> <p></p> <p>Using <code>-</code> to reduce apricot-ness:</p> <code>a man picking apricots- from a tree</code> <code>a man picking apricots-- from a tree</code> <code>a man picking apricots--- from a tree</code> <p>Using <code>+</code> to increase apricot-ness:</p> <code>a man picking apricots+ from a tree</code> <code>a man picking apricots++ from a tree</code> <code>a man picking apricots+++ from a tree</code> <code>a man picking apricots++++ from a tree</code> <code>a man picking apricots+++++ from a tree</code> <p>You can also change the balance between different parts of a prompt. For example, below is a <code>mountain man</code>:</p> <p></p> <p>And here he is with more mountain:</p> <code>mountain+ man</code> <code>mountain++ man</code> <code>mountain+++ man</code> <p>Or, alternatively, with more man:</p> <code>mountain man+</code> <code>mountain man++</code> <code>mountain man+++</code> <code>mountain man++++</code>"},{"location":"features/PROMPTS/#prompt-blending","title":"Prompt Blending","text":"<ul> <li><code>(\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,1)</code></li> <li>The existing prompt blending using <code>:&lt;weight&gt;</code> will continue to be supported -   <code>(\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,1)</code>   is equivalent to   <code>a tall thin man picking apricots:1 a tall thin man picking pears:1</code> in the   old syntax.</li> <li>Attention weights can be nested inside blends.</li> <li>Non-normalized blends are supported by passing <code>no_normalize</code> as an additional   argument to the blend weights, eg   <code>(\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,-1,no_normalize)</code>.   very fun to explore local maxima in the feature space, but also easy to   produce garbage output.</li> </ul> <p>See the section below on \"Prompt Blending\" for more information about how this works.</p>"},{"location":"features/PROMPTS/#prompt-conjunction","title":"Prompt Conjunction","text":"<p>Join multiple clauses together to create a conjoined prompt. Each clause will be passed to CLIP separately. </p> <p>For example, the prompt: </p> <pre><code>\"A mystical valley surround by towering granite cliffs, watercolor, warm\"\n</code></pre> <p>Can be used with .and(): <pre><code>(\"A mystical valley\", \"surround by towering granite cliffs\", \"watercolor\", \"warm\").and()\n</code></pre></p> <p>Each will give you different results - try them out and see what you prefer!</p>"},{"location":"features/PROMPTS/#cross-attention-control-prompt2prompt","title":"Cross-Attention Control ('prompt2prompt')","text":"<p>Sometimes an image you generate is almost right, and you just want to change one detail without affecting the rest. You could use a photo editor and inpainting to overpaint the area, but that's a pain. Here's where <code>prompt2prompt</code> comes in handy.</p> <p>Generate an image with a given prompt, record the seed of the image, and then use the <code>prompt2prompt</code> syntax to substitute words in the original prompt for words in a new prompt. This works for <code>img2img</code> as well.</p> <p>For example, consider the prompt <code>a cat.swap(dog) playing with a ball in the forest</code>. Normally, because the words interact with each other when doing a stable diffusion image generation, these two prompts would generate different compositions:   - <code>a cat playing with a ball in the forest</code>   - <code>a dog playing with a ball in the forest</code></p> <code>a cat playing with a ball in the forest</code> <code>a dog playing with a ball in the forest</code> img img <pre><code>  - For multiple word swaps, use parentheses: `a (fluffy cat).swap(barking dog) playing with a ball in the forest`.\n  - To swap a comma, use quotes: `a (\"fluffy, grey cat\").swap(\"big, barking dog\") playing with a ball in the forest`.\n</code></pre> <ul> <li>Supports options <code>t_start</code> and <code>t_end</code> (each 0-1) loosely corresponding to (bloc97's)[(https://github.com/bloc97/CrossAttentionControl)] <code>prompt_edit_tokens_start/_end</code> but with the math swapped to make it easier to   intuitively understand. <code>t_start</code> and <code>t_end</code> are used to control on which steps cross-attention control should run. With the default values <code>t_start=0</code> and <code>t_end=1</code>, cross-attention control is active on every step of image generation. Other values can be used to turn cross-attention control off for part of the image generation process.<ul> <li>For example, if doing a diffusion with 10 steps for the prompt is <code>a cat.swap(dog, t_start=0.3, t_end=1.0) playing with a ball in the forest</code>, the first 3 steps will be run as <code>a cat playing with a ball in the forest</code>, while the last 7 steps will run as <code>a dog playing with a ball in the forest</code>, but the pixels that represent <code>dog</code> will be locked to the pixels that would have represented <code>cat</code> if the <code>cat</code> prompt had been used instead.</li> <li>Conversely, for <code>a cat.swap(dog, t_start=0, t_end=0.7) playing with a ball in the forest</code>, the first 7 steps will run as <code>a dog playing with a ball in the forest</code> with the pixels that represent <code>dog</code> locked to the same pixels that would have represented <code>cat</code> if the <code>cat</code> prompt was being used instead. The final 3 steps will just run <code>a cat playing with a ball in the forest</code>. <p>For img2img, the step sequence does not start at 0 but instead at <code>(1.0-strength)</code> - so if the img2img <code>strength</code> is <code>0.7</code>, <code>t_start</code> and <code>t_end</code> must both be greater than <code>0.3</code> (<code>1.0-0.7</code>) to have any effect.</p> </li> </ul> </li> </ul> <p>Prompt2prompt <code>.swap()</code> is not compatible with xformers, which will be temporarily disabled when doing a <code>.swap()</code> - so you should expect to use more VRAM and run slower that with xformers enabled.</p> <p>The <code>prompt2prompt</code> code is based off bloc97's colab.</p>"},{"location":"features/PROMPTS/#escaping-parentheses-and-speech-marks","title":"Escaping parentheses and speech marks","text":"<p>If the model you are using has parentheses () or speech marks \"\" as part of its syntax, you will need to \"escape\" these using a backslash, so that<code>(my_keyword)</code> becomes <code>\\(my_keyword\\)</code>. Otherwise, the prompt parser will attempt to interpret the parentheses as part of the prompt syntax and it will get confused.</p>"},{"location":"features/PROMPTS/#prompt-blending_1","title":"Prompt Blending","text":"<p>You may blend together prompts to explore the AI's latent semantic space and generate interesting (and often surprising!) variations. The syntax is:</p> <pre><code>(\"prompt #1\", \"prompt #2\").blend(0.25, 0.75)\n</code></pre> <p>This will tell the sampler to blend 25% of the concept of prompt #1 with 75% of the concept of prompt #2. It is recommended to keep the sum of the weights to around 1.0, but interesting things might happen if you go outside of this range.</p> <p>Because you are exploring the \"mind\" of the AI, the AI's way of mixing two concepts may not match yours, leading to surprising effects. To illustrate, here are three images generated using various combinations of blend weights. As usual, unless you fix the seed, the prompts will give you different results each time you run them.</p> <p>Let's examine how this affects image generation results:</p> <pre><code>\"blue sphere, red cube, hybrid\"\n</code></pre> <p>This example doesn't use blending at all and represents the default way of mixing concepts.</p> <p></p> <p>It's interesting to see how the AI expressed the concept of \"cube\" within the sphere. If you look closely, there is depth there, so the enclosing frame is actually a cube.</p> <pre><code>(\"blue sphere\", \"red cube\").blend(0.25, 0.75)\n</code></pre> <p></p> <p>Now that's interesting. We get an image with a resemblance of a red cube, with a hint of blue shadows which represents a melding of concepts within the AI's \"latent space\" of semantic representations. </p> <pre><code>(\"blue sphere\", \"red cube\").blend(0.75, 0.25)\n</code></pre> <p></p> <p>Definitely more blue-spherey. </p> <pre><code>(\"blue sphere\", \"red cube\").blend(0.5, 0.5)\n</code></pre> <p></p> <p>Whoa...! I see blue and red, and if I squint, spheres and cubes.</p>"},{"location":"features/PROMPTS/#dynamic-prompts","title":"Dynamic Prompts","text":"<p>Dynamic Prompts are a powerful feature designed to produce a variety of prompts based on user-defined options. Using a special syntax, you can construct a prompt with multiple possibilities, and the system will automatically generate a series of permutations based on your settings. This is extremely beneficial for ideation, exploring various scenarios, or testing different concepts swiftly and efficiently.</p>"},{"location":"features/PROMPTS/#structure-of-a-dynamic-prompt","title":"Structure of a Dynamic Prompt","text":"<p>A Dynamic Prompt comprises of regular text, supplemented with alternatives enclosed within curly braces {} and separated by a vertical bar |. For example: {option1|option2|option3}. The system will then select one of the options to include in the final prompt. This flexible system allows for options to be placed throughout the text as needed.</p> <p>Furthermore, Dynamic Prompts can designate multiple selections from a single group of options. This feature is triggered by prefixing the options with a numerical value followed by \\(\\(. For example, in {2\\)\\)option1|option2|option3}, the system will select two distinct options from the set.</p>"},{"location":"features/PROMPTS/#creating-dynamic-prompts","title":"Creating Dynamic Prompts","text":"<p>To create a Dynamic Prompt, follow these steps:</p> <pre><code>Draft your sentence or phrase, identifying words or phrases with multiple possible options.\nEncapsulate the different options within curly braces {}.\nWithin the braces, separate each option using a vertical bar |.\nIf you want to include multiple options from a single group, prefix with the desired number and $$.\n</code></pre> <p>For instance: A {house|apartment|lodge|cottage} in {summer|winter|autumn|spring} designed in {style1|style2|style3}.</p>"},{"location":"features/PROMPTS/#how-dynamic-prompts-work","title":"How Dynamic Prompts Work","text":"<p>Once a Dynamic Prompt is configured, the system generates an array of combinations using the options provided. Each group of options in curly braces is treated independently, with the system selecting one option from each group. For a prefixed set (e.g., 2$$), the system will select two distinct options.</p> <p>For example, the following prompts could be generated from the above Dynamic Prompt:</p> <pre><code>A house in summer designed in style1, style2\nA lodge in autumn designed in style3, style1\nA cottage in winter designed in style2, style3\nAnd many more!\n</code></pre> <p>When the <code>Combinatorial</code> setting is on, Invoke will disable the \"Images\" selection, and generate every combination up until the setting for Max Prompts is reached. When the <code>Combinatorial</code> setting is off, Invoke will randomly generate combinations up until the setting for Images has been reached.</p>"},{"location":"features/PROMPTS/#tips-and-tricks-for-using-dynamic-prompts","title":"Tips and Tricks for Using Dynamic Prompts","text":"<p>Below are some useful strategies for creating Dynamic Prompts:</p> <pre><code>Utilize Dynamic Prompts to generate a wide spectrum of prompts, perfect for brainstorming and exploring diverse ideas.\nEnsure that the options within a group are contextually relevant to the part of the sentence where they are used. For instance, group building types together, and seasons together.\nApply the 2$$ prefix when you want to incorporate more than one option from a single group. This becomes quite handy when mixing and matching different elements.\nExperiment with different quantities for the prefix. For example, 3$$ will select three distinct options.\nBe aware of coherence in your prompts. Although the system can generate all possible combinations, not all may semantically make sense. Therefore, carefully choose the options for each group.\nAlways review and fine-tune the generated prompts as needed. While Dynamic Prompts can help you generate a multitude of combinations, the final polishing and refining remain in your hands.\n</code></pre>"},{"location":"features/PROMPTS/#sdxl-prompting","title":"SDXL Prompting","text":"<p>Prompting with SDXL is slightly different than prompting with SD1.5 or SD2.1 models - SDXL expects a prompt and a style. </p>"},{"location":"features/PROMPTS/#prompting","title":"Prompting","text":"<p>In the prompt box, enter a positive or negative prompt as you normally would. </p> <p>For the style box you can enter a style that you want the image to be generated in. You can use styles from this example list, or any other style you wish: anime, photographic, digital art, comic book, fantasy art, analog film, neon punk, isometric, low poly, origami, line art, cinematic, 3d model, pixel art, etc.</p>"},{"location":"features/PROMPTS/#concatenated-prompts","title":"Concatenated Prompts","text":"<p>InvokeAI also has the option to concatenate the prompt and style inputs, by pressing the \"link\" button in the Positive Prompt box. </p> <p>This concatenates the prompt &amp; style inputs, and passes the joined prompt and style to the SDXL model.  </p>"},{"location":"features/TEXTUAL_INVERSIONS/","title":"Textual Inversions","text":""},{"location":"features/TEXTUAL_INVERSIONS/#using-textual-inversion-files","title":"Using Textual Inversion Files","text":"<p>Textual inversion (TI) files are small models that customize the output of Stable Diffusion image generation. They can augment SD with specialized subjects and artistic styles. They are also known as \"embeds\" in the machine learning world.</p> <p>Each TI file introduces one or more vocabulary terms to the SD model. These are known in InvokeAI as \"triggers.\" Triggers are denoted using angle brackets  as in \"&lt;trigger-phrase&gt;\". The two most common type of TI files that you'll encounter are <code>.pt</code> and <code>.bin</code> files, which are produced by different TI training packages. InvokeAI supports both formats, but its built-in TI training system produces <code>.pt</code>.</p> <p>Hugging Face has amassed a large library of &gt;800 community-contributed TI files covering a broad range of subjects and styles. You can also install your own or others' TI files  by placing them in the designated directory for the compatible model type</p>"},{"location":"features/TEXTUAL_INVERSIONS/#an-example","title":"An Example","text":"<p>Here are a few examples to illustrate how it works. All these images were generated using the legacy command-line client and the Stable Diffusion 1.5 model:</p> Japanese gardener Japanese gardener &lt;ghibli-face&gt; Japanese gardener &lt;hoi4-leaders&gt; Japanese gardener &lt;cartoona-animals&gt; <p>You can also combine styles and concepts:</p> A portrait of &lt;alf&gt; in &lt;cartoona-animal&gt; style"},{"location":"features/TEXTUAL_INVERSIONS/#installing-your-own-ti-files","title":"Installing your Own TI Files","text":"<p>You may install any number of <code>.pt</code> and <code>.bin</code> files simply by copying them into the <code>embedding</code> directory of the corresponding InvokeAI models directory (usually <code>invokeai</code> in your home directory). For example, you can simply move a Stable Diffusion 1.5 embedding file to the <code>sd-1/embedding</code> folder. Be careful not to overwrite one file with another. For example, TI files generated by the Hugging Face toolkit share the named <code>learned_embedding.bin</code>. You can rename these, or use subdirectories to keep them distinct.</p> <p>At startup time, InvokeAI will scan the various <code>embedding</code> directories and load any TI files it finds there for compatible models. At startup you will see a message similar to this one:</p> <p><pre><code>&gt;&gt; Current embedding manager terms: &lt;HOI4-Leader&gt;, &lt;princess-knight&gt;\n</code></pre> To use these when generating, simply type the <code>&lt;</code> key in your prompt to open the Textual Inversion WebUI and  select the embedding you'd like to use. This UI has type-ahead support, so you can easily find supported embeddings.</p>"},{"location":"features/TRAINING/","title":"Training","text":""},{"location":"features/TRAINING/#textual-inversion-training","title":"Textual Inversion Training","text":""},{"location":"features/TRAINING/#personalizing-text-to-image-generation","title":"Personalizing Text-to-Image Generation","text":"<p>You may personalize the generated images to provide your own styles or objects by training a new LDM checkpoint and introducing a new vocabulary to the fixed model as a (.pt) embeddings file. Alternatively, you may use or train HuggingFace Concepts embeddings files (.bin) from https://huggingface.co/sd-concepts-library and its associated notebooks.</p>"},{"location":"features/TRAINING/#hardware-and-software-requirements","title":"Hardware and Software Requirements","text":"<p>You will need a GPU to perform training in a reasonable length of time, and at least 12 GB of VRAM. We recommend using the <code>xformers</code> library to accelerate the training process further. During training, about ~8 GB is temporarily needed in order to store intermediate models, checkpoints and logs.</p>"},{"location":"features/TRAINING/#preparing-for-training","title":"Preparing for Training","text":"<p>To train, prepare a folder that contains 3-5 images that illustrate the object or concept. It is good to provide a variety of examples or poses to avoid overtraining the system. Format these images as PNG (preferred) or JPG. You do not need to resize or crop the images in advance, but for more control you may wish to do so.</p> <p>Place the training images in a directory on the machine InvokeAI runs on. We recommend placing them in a subdirectory of the <code>text-inversion-training-data</code> folder located in the InvokeAI root directory, ordinarily <code>~/invokeai</code> (Linux/Mac), or <code>C:\\Users\\your_name\\invokeai</code> (Windows). For example, to create an embedding for the \"psychedelic\" style, you'd place the training images into the directory <code>~invokeai/text-inversion-training-data/psychedelic</code>.</p>"},{"location":"features/TRAINING/#launching-training-using-the-console-front-end","title":"Launching Training Using the Console Front End","text":"<p>InvokeAI 2.3 and higher comes with a text console-based training front end. From within the <code>invoke.sh</code>/<code>invoke.bat</code> Invoke launcher script, start training tool selecting choice (3):</p> <pre><code>1 \"Generate images with a browser-based interface\"\n2 \"Explore InvokeAI nodes using a command-line interface\"\n3 \"Textual inversion training\"\n4 \"Merge models (diffusers type only)\"\n5 \"Download and install models\"\n6 \"Change InvokeAI startup options\"\n7 \"Re-run the configure script to fix a broken install or to complete a major upgrade\"\n8 \"Open the developer console\"\n9 \"Update InvokeAI\"\n</code></pre> <p>Alternatively, you can select option (8) or from the command line, with the InvokeAI virtual environment active, you can then launch the front end with the command <code>invokeai-ti --gui</code>.</p> <p>This will launch a text-based front end that will look like this:</p> <p></p> <p>The interface is keyboard-based. Move from field to field using control-N (^N) to move to the next field and control-P (^P) to the previous one.  and  work as well. Once a field is active, use the cursor keys. In a checkbox group, use the up and down cursor keys to move from choice to choice, and  to select a choice. In a scrollbar, use the left and right cursor keys to increase and decrease the value of the scroll. In textfields, type the desired values. <p>The number of parameters may look intimidating, but in most cases the predefined defaults work fine. The red circled fields in the above illustration are the ones you will adjust most frequently.</p>"},{"location":"features/TRAINING/#model-name","title":"Model Name","text":"<p>This will list all the diffusers models that are currently installed. Select the one you wish to use as the basis for your embedding. Be aware that if you use a SD-1.X-based model for your training, you will only be able to use this embedding with other SD-1.X-based models. Similarly, if you train on SD-2.X, you will only be able to use the embeddings with models based on SD-2.X.</p>"},{"location":"features/TRAINING/#trigger-term","title":"Trigger Term","text":"<p>This is the prompt term you will use to trigger the embedding. Type a single word or phrase you wish to use as the trigger, example \"psychedelic\" (without angle brackets). Within InvokeAI, you will then be able to activate the trigger using the syntax <code>&lt;psychedelic&gt;</code>.</p>"},{"location":"features/TRAINING/#initializer","title":"Initializer","text":"<p>This is a single character that is used internally during the training process as a placeholder for the trigger term. It defaults to \"*\" and can usually be left alone.</p>"},{"location":"features/TRAINING/#resume-from-last-saved-checkpoint","title":"Resume from last saved checkpoint","text":"<p>As training proceeds, textual inversion will write a series of intermediate files that can be used to resume training from where it was left off in the case of an interruption. This checkbox will be automatically selected if you provide a previously used trigger term and at least one checkpoint file is found on disk.</p> <p>Note that as of 20 January 2023, resume does not seem to be working properly due to an issue with the upstream code.</p>"},{"location":"features/TRAINING/#data-training-directory","title":"Data Training Directory","text":"<p>This is the location of the images to be used for training. When you select a trigger term like \"my-trigger\", the frontend will prepopulate this field with <code>~/invokeai/text-inversion-training-data/my-trigger</code>, but you can change the path to wherever you want.</p>"},{"location":"features/TRAINING/#output-destination-directory","title":"Output Destination Directory","text":"<p>This is the location of the logs, checkpoint files, and embedding files created during training. When you select a trigger term like \"my-trigger\", the frontend will prepopulate this field with <code>~/invokeai/text-inversion-output/my-trigger</code>, but you can change the path to wherever you want.</p>"},{"location":"features/TRAINING/#image-resolution","title":"Image resolution","text":"<p>The images in the training directory will be automatically scaled to the value you use here. For best results, you will want to use the same default resolution of the underlying model (512 pixels for SD-1.5, 768 for the larger version of SD-2.1).</p>"},{"location":"features/TRAINING/#center-crop-images","title":"Center crop images","text":"<p>If this is selected, your images will be center cropped to make them square before resizing them to the desired resolution. Center cropping can indiscriminately cut off the top of subjects' heads for portrait aspect images, so if you have images like this, you may wish to use a photoeditor to manually crop them to a square aspect ratio.</p>"},{"location":"features/TRAINING/#mixed-precision","title":"Mixed precision","text":"<p>Select the floating point precision for the embedding. \"no\" will result in a full 32-bit precision, \"fp16\" will provide 16-bit precision, and \"bf16\" will provide mixed precision (only available when XFormers is used).</p>"},{"location":"features/TRAINING/#max-training-steps","title":"Max training steps","text":"<p>How many steps the training will take before the model converges. Most training sets will converge with 2000-3000 steps.</p>"},{"location":"features/TRAINING/#batch-size","title":"Batch size","text":"<p>This adjusts how many training images are processed simultaneously in each step. Higher values will cause the training process to run more quickly, but use more memory. The default size will run with GPUs with as little as 12 GB.</p>"},{"location":"features/TRAINING/#learning-rate","title":"Learning rate","text":"<p>The rate at which the system adjusts its internal weights during training. Higher values risk overtraining (getting the same image each time), and lower values will take more steps to train a good model. The default of 0.0005 is conservative; you may wish to increase it to 0.005 to speed up training.</p>"},{"location":"features/TRAINING/#scale-learning-rate-by-number-of-gpus-steps-and-batch-size","title":"Scale learning rate by number of GPUs, steps and batch size","text":"<p>If this is selected (the default) the system will adjust the provided learning rate to improve performance.</p>"},{"location":"features/TRAINING/#use-xformers-acceleration","title":"Use xformers acceleration","text":"<p>This will activate XFormers memory-efficient attention. You need to have XFormers installed for this to have an effect.</p>"},{"location":"features/TRAINING/#learning-rate-scheduler","title":"Learning rate scheduler","text":"<p>This adjusts how the learning rate changes over the course of training. The default \"constant\" means to use a constant learning rate for the entire training session. The other values scale the learning rate according to various formulas.</p> <p>Only \"constant\" is supported by the XFormers library.</p>"},{"location":"features/TRAINING/#gradient-accumulation-steps","title":"Gradient accumulation steps","text":"<p>This is a parameter that allows you to use bigger batch sizes than your GPU's VRAM would ordinarily accommodate, at the cost of some performance.</p>"},{"location":"features/TRAINING/#warmup-steps","title":"Warmup steps","text":"<p>If \"constant_with_warmup\" is selected in the learning rate scheduler, then this provides the number of warmup steps. Warmup steps have a very low learning rate, and are one way of preventing early overtraining.</p>"},{"location":"features/TRAINING/#the-training-run","title":"The training run","text":"<p>Start the training run by advancing to the OK button (bottom right) and pressing . A series of progress messages will be displayed as the training process proceeds. This may take an hour or two, depending on settings and the speed of your system. Various log and checkpoint files will be written into the output directory (ordinarily <code>~/invokeai/text-inversion-output/my-model/</code>) <p>At the end of successful training, the system will copy the file <code>learned_embeds.bin</code> into the InvokeAI root directory's <code>embeddings</code> directory, using a subdirectory named after the trigger token. For example, if the trigger token was <code>psychedelic</code>, then look for the embeddings file in <code>~/invokeai/embeddings/psychedelic/learned_embeds.bin</code></p> <p>You may now launch InvokeAI and try out a prompt that uses the trigger term. For example <code>a plate of banana sushi in &lt;psychedelic&gt; style</code>.</p>"},{"location":"features/TRAINING/#training-with-the-command-line-script","title":"Training with the Command-Line Script","text":"<p>Training can also be done using a traditional command-line script. It can be launched from within the \"developer's console\", or from the command line after activating InvokeAI's virtual environment.</p> <p>It accepts a large number of arguments, which can be summarized by passing the <code>--help</code> argument:</p> <pre><code>invokeai-ti --help\n</code></pre> <p>Typical usage is shown here: <pre><code>invokeai-ti \\\n       --model=stable-diffusion-1.5 \\\n       --resolution=512 \\\n       --learnable_property=style \\\n       --initializer_token='*' \\\n       --placeholder_token='&lt;psychedelic&gt;' \\\n       --train_data_dir=/home/lstein/invokeai/training-data/psychedelic \\\n       --output_dir=/home/lstein/invokeai/text-inversion-training/psychedelic \\\n       --scale_lr \\\n       --train_batch_size=8 \\\n       --gradient_accumulation_steps=4 \\\n       --max_train_steps=3000 \\\n       --learning_rate=0.0005 \\\n       --resume_from_checkpoint=latest \\\n       --lr_scheduler=constant \\\n       --mixed_precision=fp16 \\\n       --only_save_embeds\n</code></pre></p>"},{"location":"features/TRAINING/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/TRAINING/#cannot-load-embedding-for-trigger-it-was-trained-on-a-model-with-token-dimension-1024-but-the-current-model-has-token-dimension-768","title":"<code>Cannot load embedding for &lt;trigger&gt;. It was trained on a model with token dimension 1024, but the current model has token dimension 768</code>","text":"<p>Messages like this indicate you trained the embedding on a different base model than the currently selected one.</p> <p>For example, in the error above, the training was done on SD2.1 (768x768) but it was used on SD1.5 (512x512).</p>"},{"location":"features/TRAINING/#reading","title":"Reading","text":"<p>For more information on textual inversion, please see the following resources:</p> <ul> <li>The textual inversion repository and   associated paper for details and limitations.</li> <li>HuggingFace's textual inversion training   page</li> <li>HuggingFace example script   documentation   (Note that this script is similar to, but not identical, to   <code>textual_inversion</code>, but produces embed files that are completely compatible.</li> </ul> <p>copyright \u00a9 2023, Lincoln Stein and the InvokeAI Development Team</p>"},{"location":"features/UNIFIED_CANVAS/","title":"Unified Canvas","text":"<p>The Unified Canvas is a tool designed to streamline and simplify the process of composing an image using Stable Diffusion. It offers artists all of the available Stable Diffusion generation modes (Text To Image, Image To Image, Inpainting, and Outpainting) as a single unified workflow. The flexibility of the tool allows you to tweak and edit image generations, extend images beyond their initial size, and to create new content in a freeform way both inside and outside of existing images.</p> <p>This document explains the basics of using the Unified Canvas, introducing you to its features and tools one by one. It also describes some of the more advanced tools available to power users of the Canvas.</p>"},{"location":"features/UNIFIED_CANVAS/#basics","title":"Basics","text":"<p>The Unified Canvas consists of two layers: the Base Layer and the Mask Layer. You can swap from one layer to the other by selecting the layer you want in the drop-down menu on the top left corner of the Unified Canvas, or by pressing the (Q) hotkey.</p>"},{"location":"features/UNIFIED_CANVAS/#base-layer","title":"Base Layer","text":"<p>The Base Layer is the image content currently managed by the Canvas, and can be exported at any time to the gallery by using the Save to Gallery option. When the Base Layer is selected, the Brush (B) and Eraser (E) tools will directly manipulate the base layer. Any images uploaded to the Canvas, or sent to the Unified Canvas from the gallery, will clear out all existing content and set the Base layer to the new image.</p>"},{"location":"features/UNIFIED_CANVAS/#staging-area","title":"Staging Area","text":"<p>When you generate images, they will display in the Canvas's Staging Area, alongside the Staging Area toolbar buttons. While the Staging Area is active, you cannot interact with the Canvas itself.</p> <p></p> <p>Accepting generations will commit the new generation to the Base Layer. You can review all generated images using the Prev/Next arrows, save any individual generations to your gallery (without committing to the Base layer) or discard generations. While you can Undo a discard in an individual Canvas session, any generations that are not saved will be lost when the Canvas resets.</p>"},{"location":"features/UNIFIED_CANVAS/#mask-layer","title":"Mask Layer","text":"<p>The Mask Layer consists of any masked sections that have been created to inform Inpainting generations. You can paint a new mask, or edit an existing mask, using the Brush tool and the Eraser with the Mask layer set as your Active layer. Any masked areas will only affect generation inside of the current bounding box.</p>"},{"location":"features/UNIFIED_CANVAS/#bounding-box","title":"Bounding Box","text":"<p>When generating a new image, Invoke will process and apply new images within the area denoted by the Bounding Box. The Width &amp; Height settings of the Bounding Box, as well as its location within the Unified Canvas and pixels or empty space that it encloses, determine how new invocations are generated - see Inpainting &amp; Outpainting below. The Bounding Box can be moved and resized using the Move (V) tool. It can also be resized using the Bounding Box options in the Options Panel. By using these controls you can generate larger or smaller images, control which sections of the image are being processed, as well as control Bounding Box tools like the Bounding Box fill/erase.</p>"},{"location":"features/UNIFIED_CANVAS/#inpainting-outpainting","title":"Inpainting &amp; Outpainting","text":"<p>\"Inpainting\" means asking the AI to refine part of an image while leaving the rest alone. For example, updating a portrait of your grandmother to have her wear a biker's jacket.</p> masked original inpaint result <p>\"Outpainting\" means asking the AI to expand the original image beyond its original borders, making a bigger image that's still based on the original. For example, extending the above image of your Grandmother in a biker's jacket to include her wearing jeans (and while we're at it, a motorcycle!)</p> <p></p> <p>When you are using the Unified Canvas, Invoke decides automatically whether to do Inpainting, Outpainting, ImageToImage, or TextToImage by looking inside the area enclosed by the Bounding Box. It chooses the appropriate type of generation based on whether the Bounding Box contains empty (transparent) areas on the Base layer, or whether it contains colored areas from previous generations (or from painted brushstrokes) on the Base layer, and/or whether the Mask layer contains any brushstrokes. See Generation Methods below for more information.</p>"},{"location":"features/UNIFIED_CANVAS/#getting-started","title":"Getting Started","text":"<p>To get started with the Unified Canvas, you will want to generate a new base layer using Txt2Img or importing an initial image. We'll refer to either of these methods as the \"initial image\" in the below guide.</p> <p>From there, you can consider the following techniques to augment your image:</p> <ul> <li>New Images: Move the bounding box to an empty area of the Canvas, type in   your prompt, and Invoke, to generate a new image using the Text to Image   function.</li> <li>Image Correction: Use the color picker and brush tool to paint corrections   on the image, switch to the Mask layer, and brush a mask over your painted   area to use Inpainting. You can also use the ImageToImage generation   method to invoke new interpretations of the image.</li> <li>Image Expansion: Move the bounding box to include a portion of your   initial image, and a portion of transparent/empty pixels, then Invoke using a   prompt that describes what you'd like to see in that area. This will Outpaint   the image. You'll typically find more coherent results if you keep about   50-60% of the original image in the bounding box. Make sure that the Image To   Image Strength slider is set to a high value - you may need to set it higher   than you are used to.</li> <li>New Content on Existing Images: If you want to add new details or objects   into your image, use the brush tool to paint a sketch of what you'd like to   see on the image, switch to the Mask layer, and brush a mask over your painted   area to use Inpainting. If the masked area is small, consider using a   smaller bounding box to take advantage of Invoke's automatic Scaling features,   which can help to produce better details.</li> <li>And more: There are a number of creative ways to use the Canvas, and the   above are just starting points. We're excited to see what you come up with!</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#generation-methods","title":"Generation Methods","text":"<p>The Canvas can use all generation methods available (Txt2Img, Img2Img, Inpainting, and Outpainting), and these will be automatically selected and used based on the current selection area within the Bounding Box.</p>"},{"location":"features/UNIFIED_CANVAS/#text-to-image","title":"Text to Image","text":"<p>If the Bounding Box is placed over an area of Canvas with an empty Base Layer, invoking a new image will use TextToImage. This generates an entirely new image based on your prompt.</p>"},{"location":"features/UNIFIED_CANVAS/#image-to-image","title":"Image to Image","text":"<p>If the Bounding Box is placed over an area of Canvas with an existing Base Layer area with no transparent pixels or masks, invoking a new image will use ImageToImage. This uses the image within the bounding box and your prompt to interpret a new image. The image will be closer to your original image at lower Image to Image strengths.</p>"},{"location":"features/UNIFIED_CANVAS/#inpainting","title":"Inpainting","text":"<p>If the Bounding Box is placed over an area of Canvas with an existing Base Layer and any pixels selected using the Mask layer, invoking a new image will use Inpainting. Inpainting uses the existing colors/forms in the masked area in order to generate a new image for the masked area only. The unmasked portion of the image will remain the same. Image to Image strength applies to the inpainted area.</p> <p>If you desire something completely different from the original image in your new generation (i.e., if you want Invoke to ignore existing colors/forms), consider toggling the Inpaint Replace setting on, and use high values for both Inpaint Replace and Image To Image Strength.</p> <p>Note</p> <p>By default, the Scale Before Processing option \u2014 which inpaints more coherent details by generating at a larger resolution and then scaling \u2014 is only activated when the Bounding Box is relatively small. To get the best inpainting results you should therefore resize your Bounding Box to the smallest area that contains your mask and enough surrounding detail to help Stable Diffusion understand the context of what you want it to draw. You should also update your prompt so that it describes just the area within the Bounding Box.</p>"},{"location":"features/UNIFIED_CANVAS/#outpainting","title":"Outpainting","text":"<p>If the Bounding Box is placed over an area of Canvas partially filled by an existing Base Layer area and partially by transparent pixels or masks, invoking a new image will use Outpainting, as well as Inpainting any masked areas.</p>"},{"location":"features/UNIFIED_CANVAS/#advanced-features","title":"Advanced Features","text":"<p>Features with non-obvious behavior are detailed below, in order to provide clarity on the intent and common use cases we expect for utilizing them.</p>"},{"location":"features/UNIFIED_CANVAS/#toolbar","title":"Toolbar","text":""},{"location":"features/UNIFIED_CANVAS/#mask-options","title":"Mask Options","text":"<ul> <li>Enable Mask - This flag can be used to Enable or Disable the currently   painted mask. If you have painted a mask, but you don't want it affect the   next invocation, but you also don't want to delete it, then you can set this   option to Disable. When you want the mask back, set this back to Enable.</li> <li>Preserve Masked Area - When enabled, Preserve Masked Area inverts the   effect of the Mask on the Inpainting process. Pixels in masked areas will be   kept unchanged, and unmasked areas will be regenerated.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#creative-tools","title":"Creative Tools","text":"<ul> <li>Brush - Base/Mask Modes - The Brush tool switches automatically between   different modes of operation for the Base and Mask layers respectively.<ul> <li>On the Base layer, the brush will directly paint on the Canvas using the   color selected on the Brush Options menu.</li> <li>On the Mask layer, the brush will create a new mask. If you're finding the   mask difficult to see over the existing content of the Unified Canvas, you   can change the color it is drawn with using the color selector on the Mask   Options dropdown.</li> </ul> </li> <li>Erase Bounding Box - On the Base layer, erases all pixels within the   Bounding Box.</li> <li>Fill Bounding Box - On the Base layer, fills all pixels within the   Bounding Box with the currently selected color.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#canvas-tools","title":"Canvas Tools","text":"<ul> <li>Move Tool - Allows for manipulation of the Canvas view (by dragging on the   Canvas, outside the bounding box), the Bounding Box (by dragging the edges of   the box), or the Width/Height of the Bounding Box (by dragging one of the 9   directional handles).</li> <li>Reset View - Click to re-orients the view to the center of the Bounding   Box.</li> <li>Merge Visible - If your browser is having performance problems drawing the   image in the Unified Canvas, click this to consolidate all of the information   currently being rendered by your browser into a merged copy of the image. This   lowers the resource requirements and should improve performance.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#compositing-seam-correction","title":"Compositing / Seam Correction","text":"<p>When doing Inpainting or Outpainting, Invoke needs to merge the pixels generated by Stable Diffusion into your existing image. This is achieved through compositing - the area around the the boundary between your image and the new generation is automatically blended to produce a seamless output. In a fully automatic process, a mask is generated to cover the boundary, and then the area of the boundary is Inpainted.</p> <p>Although the default options should work well most of the time, sometimes it can help to alter the parameters that control the Compositing. A larger blur and a blur setting  have been noted as producing consistently strong results . Strength of 0.7 is best for reducing hard seams.</p> <ul> <li>Mode - What part of the image will have the the Compositing applied to it.</li> <li>Mask edge will apply Compositing to the edge of the masked area</li> <li>Mask will apply Compositing to the entire masked area</li> <li>Unmasked will apply Compositing to the entire image</li> <li>Steps - Number of generation steps that will occur during the Coherence Pass, similar to Denoising Steps. Higher step counts will generally have better results.</li> <li>Strength - How much noise is added for the Coherence Pass, similar to Denoising Strength. A strength of 0 will result in an unchanged image, while a strength of 1 will result in an image with a completely new area as defined by the Mode setting.</li> <li>Blur - Adjusts the pixel radius of the the mask. A larger blur radius will cause the mask to extend past the visibly masked area, while too small of a blur radius will result in a mask that is smaller than the visibly masked area.</li> <li>Blur Method - The method of blur applied to the masked area. </li> </ul>"},{"location":"features/UNIFIED_CANVAS/#infill-scaling","title":"Infill &amp; Scaling","text":"<ul> <li>Scale Before Processing &amp; W/H: When generating images with a bounding box   smaller than the optimized W/H of the model (e.g., 512x512 for SD1.5), this   feature first generates at a larger size with the same aspect ratio, and then   scales that image down to fill the selected area. This is particularly useful   when inpainting very small details. Scaling is optional but is enabled by   default.</li> <li>Inpaint Replace: When Inpainting, the default method is to utilize the   existing RGB values of the Base layer to inform the generation process. If   Inpaint Replace is enabled, noise is generated and blended with the existing   pixels (completely replacing the original RGB values at an Inpaint Replace   value of 1). This can help generate more variation from the pixels on the Base   layers.<ul> <li>When using Inpaint Replace you should use a higher Image To Image Strength   value, especially at higher Inpaint Replace values</li> </ul> </li> <li>Infill Method: Invoke currently supports two methods for producing RGB   values for use in the Outpainting process: Patchmatch and Tile. We believe   that Patchmatch is the superior method, however we provide support for Tile in   case Patchmatch cannot be installed or is unavailable on your computer.</li> <li>Tile Size: The Tile method for Outpainting sources small portions of the   original image and randomly place these into the areas being Outpainted. This   value sets the size of those tiles.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#hot-keys","title":"Hot Keys","text":"<p>The Unified Canvas is a tool that excels when you use hotkeys. You can view the full list of keyboard shortcuts, updated with all new features, by clicking the Keyboard Shortcuts icon at the top right of the InvokeAI WebUI.</p>"},{"location":"features/UTILITIES/","title":"Utilities","text":""},{"location":"features/UTILITIES/#command-line-utilities","title":"Command-line Utilities","text":"<p>InvokeAI comes with several scripts that are accessible via the command line. To access these commands, start the \"developer's console\" from the launcher (<code>invoke.bat</code> menu item [7]). Users who are familiar with Python can alternatively activate InvokeAI's virtual environment (typically, but not necessarily <code>invokeai/.venv</code>).</p> <p>In the developer's console, type the script's name to run it. To get a synopsis of what a utility does and the command-line arguments it accepts, pass it the <code>-h</code> argument, e.g.</p> <pre><code>invokeai-merge -h\n</code></pre>"},{"location":"features/UTILITIES/#invokeai-web","title":"invokeai-web","text":"<p>This script launches the web server and is effectively identical to selecting option [1] in the launcher. An advantage of launching the server from the command line is that you can override any setting configuration option in <code>invokeai.yaml</code> using like-named command-line arguments. For example, to temporarily change the size of the RAM cache to 7 GB, you can launch as follows:</p> <pre><code>invokeai-web --ram 7\n</code></pre>"},{"location":"features/UTILITIES/#invokeai-merge","title":"invokeai-merge","text":"<p>This is the model merge script, the same as launcher option [3]. Call it with the <code>--gui</code> command-line argument to start the interactive console-based GUI. Alternatively, you can run it non-interactively using command-line arguments as illustrated in the example below which merges models named <code>stable-diffusion-1.5</code> and <code>inkdiffusion</code> into a new model named <code>my_new_model</code>:</p> <pre><code>invokeai-merge --force --base-model sd-1 --models stable-diffusion-1.5 inkdiffusion --merged_model_name my_new_model\n</code></pre>"},{"location":"features/UTILITIES/#invokeai-ti","title":"invokeai-ti","text":"<p>This is the textual inversion training script that is run by launcher option [2]. Call it with <code>--gui</code> to run the interactive console-based front end. It can also be run non-interactively. It has about a zillion arguments, but a typical training session can be launched with:</p> <pre><code>invokeai-ti --model stable-diffusion-1.5 \\\n            --placeholder_token 'jello' \\\n            --learnable_property object \\\n            --num_train_epochs 50 \\\n            --train_data_dir /path/to/training/images \\\n            --output_dir /path/to/trained/model\n</code></pre> <p>(Note that \\ is the Linux/Mac long-line continuation character. Use ^ in Windows).</p>"},{"location":"features/UTILITIES/#invokeai-install","title":"invokeai-install","text":"<p>This is the console-based model install script that is run by launcher option [4]. If called without arguments, it will launch the interactive console-based interface. It can also be used non-interactively to list, add and remove models as shown by these examples:</p> <ul> <li>This will download and install three models from CivitAI, HuggingFace, and local disk:</li> </ul> <p><pre><code>invokeai-install --add https://civitai.com/api/download/models/161302 ^\n                  gsdf/Counterfeit-V3.0  ^\n                  D:\\Models\\merge_model_two.safetensors\n</code></pre> (Note that ^ is the Windows long-line continuation character. Use \\ on Linux/Mac).</p> <ul> <li>This will list installed models of type <code>main</code>:</li> </ul> <pre><code>invokeai-model-install --list-models main\n</code></pre> <ul> <li>This will delete the models named <code>voxel-ish</code> and <code>realisticVision</code>:</li> </ul> <pre><code>invokeai-model-install --delete voxel-ish realisticVision\n</code></pre>"},{"location":"features/UTILITIES/#invokeai-configure","title":"invokeai-configure","text":"<p>This is the console-based configure script that ran when InvokeAI was first installed. You can run it again at any time to change the configuration, repair a broken install.</p> <p>Called without any arguments, <code>invokeai-configure</code> enters interactive mode with two screens. The first screen is a form that provides access to most of InvokeAI's configuration options. The second screen lets you download, add, and delete models interactively. When you exit the second screen, the script will add any missing \"support models\" needed for core functionality, and any selected \"sd weights\" which are the model checkpoint/diffusers files.</p> <p>This behavior can be changed via a series of command-line arguments. Here are some of the useful ones:</p> <ul> <li> <p><code>invokeai-configure --skip-sd-weights --skip-support-models</code> This will run just the configuration part of the utility, skipping downloading of support models and stable diffusion weights.</p> </li> <li> <p><code>invokeai-configure --yes</code> This will run the configure script non-interactively. It will set the configuration options to their default values, install/repair support models, and download the \"recommended\" set of SD models.</p> </li> <li> <p><code>invokeai-configure --yes --default_only</code>  This will run the configure script non-interactively. In contrast to the previous command, it will only download the default SD model, Stable Diffusion v1.5</p> </li> <li> <p><code>invokeai-configure --yes --default_only --skip-sd-weights</code>  This is similar to the previous command, but will not download any SD models at all. It is usually used to repair a broken install.</p> </li> </ul> <p>By default, <code>invokeai-configure</code> runs on the currently active InvokeAI root folder. To run it against a different root, pass it the <code>--root &lt;/path/to/root&gt;</code> argument.</p> <p>Lastly, you can use <code>invokeai-configure</code> to create a working root directory entirely from scratch. Assuming you wish to make a root directory named <code>InvokeAI-New</code>, run this command:</p> <p><pre><code>invokeai-configure --root InvokeAI-New --yes --default_only\n</code></pre> This will create a minimally functional root directory. You can now launch the web server against it with <code>invokeai-web --root InvokeAI-New</code>.</p>"},{"location":"features/UTILITIES/#invokeai-update","title":"invokeai-update","text":"<p>This is the interactive console-based script that is run by launcher menu item [8] to update to a new version of InvokeAI. It takes no command-line arguments.</p>"},{"location":"features/UTILITIES/#invokeai-metadata","title":"invokeai-metadata","text":"<p>This is a script which takes a list of InvokeAI-generated images and outputs their metadata in the same JSON format that you get from the `` button in the Web GUI. For example:</p> <pre><code>$ invokeai-metadata ffe2a115-b492-493c-afff-7679aa034b50.png\nffe2a115-b492-493c-afff-7679aa034b50.png:\n{\n    \"app_version\": \"3.1.0\",\n    \"cfg_scale\": 8.0,\n    \"clip_skip\": 0,\n    \"controlnets\": [],\n    \"generation_mode\": \"sdxl_txt2img\",\n    \"height\": 1024,\n    \"loras\": [],\n    \"model\": {\n        \"base_model\": \"sdxl\",\n        \"model_name\": \"stable-diffusion-xl-base-1.0\",\n        \"model_type\": \"main\"\n    },\n    \"negative_prompt\": \"\",\n    \"negative_style_prompt\": \"\",\n    \"positive_prompt\": \"military grade sushi dinner for shock troopers\",\n    \"positive_style_prompt\": \"\",\n    \"rand_device\": \"cpu\",\n    \"refiner_cfg_scale\": 7.5,\n    \"refiner_model\": {\n        \"base_model\": \"sdxl-refiner\",\n        \"model_name\": \"sd_xl_refiner_1.0\",\n        \"model_type\": \"main\"\n    },\n    \"refiner_negative_aesthetic_score\": 2.5,\n    \"refiner_positive_aesthetic_score\": 6.0,\n    \"refiner_scheduler\": \"euler\",\n    \"refiner_start\": 0.8,\n    \"refiner_steps\": 20,\n    \"scheduler\": \"euler\",\n    \"seed\": 387129902,\n    \"steps\": 25,\n    \"width\": 1024\n}\n</code></pre> <p>You may list multiple files on the command line.</p>"},{"location":"features/UTILITIES/#invokeai-import-images","title":"invokeai-import-images","text":"<p>InvokeAI uses a database to store information about images it generated, and just copying the image files from one InvokeAI root directory to another does not automatically import those images into the destination's gallery. This script allows you to bulk import images generated by one instance of InvokeAI into a gallery maintained by another. It also works on images generated by older versions of InvokeAI, going way back to version 1.</p> <p>This script has an interactive mode only. The following example shows it in action:</p> <pre><code>$ invokeai-import-images\n===============================================================================\nThis script will import images generated by earlier versions of\nInvokeAI into the currently installed root directory:\n   /home/XXXX/invokeai-main\nIf this is not what you want to do, type ctrl-C now to cancel.\n===============================================================================\n= Configuration &amp; Settings\nFound invokeai.yaml file at /home/XXXX/invokeai-main/invokeai.yaml:\n  Database : /home/XXXX/invokeai-main/databases/invokeai.db\n  Outputs  : /home/XXXX/invokeai-main/outputs/images\n\nUse these paths for import (yes) or choose different ones (no) [Yn]:\nInputs: Specify absolute path containing InvokeAI .png images to import: /home/XXXX/invokeai-2.3/outputs/images/\nInclude files from subfolders recursively [yN]?\n\nOptions for board selection for imported images:\n1) Select an existing board name. (found 4)\n2) Specify a board name to create/add to.\n3) Create/add to board named 'IMPORT'.\n4) Create/add to board named 'IMPORT' with the current datetime string appended (.e.g IMPORT_20230919T203519Z).\n5) Create/add to board named 'IMPORT' with a the original file app_version appended (.e.g IMPORT_2.2.5).\nSpecify desired board option: 3\n\n===============================================================================\n= Import Settings Confirmation\n\nDatabase File Path               : /home/XXXX/invokeai-main/databases/invokeai.db\nOutputs/Images Directory         : /home/XXXX/invokeai-main/outputs/images\nImport Image Source Directory    : /home/XXXX/invokeai-2.3/outputs/images/\n  Recurse Source SubDirectories  : No\nCount of .png file(s) found      : 5785\nBoard name option specified      : IMPORT\nDatabase backup will be taken at : /home/XXXX/invokeai-main/databases/backup\n\nNotes about the import process:\n- Source image files will not be modified, only copied to the outputs directory.\n- If the same file name already exists in the destination, the file will be skipped.\n- If the same file name already has a record in the database, the file will be skipped.\n- Invoke AI metadata tags will be updated/written into the imported copy only.\n- On the imported copy, only Invoke AI known tags (latest and legacy) will be retained (dream, sd-metadata, invokeai, invokeai_metadata)\n- A property 'imported_app_version' will be added to metadata that can be viewed in the UI's metadata viewer.\n- The new 3.x InvokeAI outputs folder structure is flat so recursively found source imges will all be placed into the single outputs/images folder.\n\nDo you wish to continue with the import [Yn] ?\n\nMaking DB Backup at /home/lstein/invokeai-main/databases/backup/backup-20230919T203519Z-invokeai.db...Done!\n\n===============================================================================\nImporting /home/XXXX/invokeai-2.3/outputs/images/17d09907-297d-4db3-a18a-60b337feac66.png\n... (5785 more lines) ...\n===============================================================================\n= Import Complete - Elpased Time: 0.28 second(s)\n\nSource File(s)                          : 5785\nTotal Imported                          : 5783\nSkipped b/c file already exists on disk : 1\nSkipped b/c file already exists in db   : 0\nErrors during import                    : 1\n</code></pre>"},{"location":"features/UTILITIES/#invokeai-db-maintenance","title":"invokeai-db-maintenance","text":"<p>This script helps maintain the integrity of your InvokeAI database by finding and fixing three problems that can arise over time:</p> <ol> <li> <p>An image was manually deleted from the outputs directory, leaving a    dangling image record in the InvokeAI database. This will cause a    black image to appear in the gallery. This is an \"orphaned database    image record.\" The script can fix this by running a \"clean\"    operation on the database, removing the orphaned entries.</p> </li> <li> <p>An image is present in the outputs directory but there is no    corresponding entry in the database. This can happen when the image    is added manually to the outputs directory, or if a crash occurred    after the image was generated but before the database was    completely updated. The symptom is that the image is present in the    outputs folder but doesn't appear in the InvokeAI gallery. This is    called an \"orphaned image file.\" The script can fix this problem by    running an \"archive\" operation in which orphaned files are moved    into a directory named <code>outputs/images-archive</code>. If you wish, you    can then run <code>invokeai-image-import</code> to reimport these images back    into the database.</p> </li> <li> <p>The thumbnail for an image is missing, again causing a black    gallery thumbnail. This is fixed by running the \"thumbnaiils\"    operation, which simply regenerates and re-registers the missing    thumbnail.</p> </li> </ol> <p>You can find and fix all three of these problems in a single go by executing this command:</p> <pre><code>invokeai-db-maintenance --operation all\n</code></pre> <p>Or you can run just the clean and thumbnail operations like this:</p> <pre><code>invokeai-db-maintenance -operation clean, thumbnail\n</code></pre> <p>If called without any arguments, the script will ask you which operations you wish to perform.</p>"},{"location":"features/UTILITIES/#invokeai-migrate3","title":"invokeai-migrate3","text":"<p>This script will migrate settings and models (but not images!) from an InvokeAI v2.3 root folder to an InvokeAI 3.X folder. Call it with the source and destination root folders like this:</p> <pre><code>invokeai-migrate3 --from ~/invokeai-2.3 --to invokeai-3.1.1\n</code></pre> <p>Both directories must previously have been properly created and initialized by <code>invokeai-configure</code>. If you wish to migrate the images contained in the older root as well, you can use the <code>invokeai-image-migrate</code> script described earlier.</p> <p>Copyright \u00a9 2023, Lincoln Stein and the InvokeAI Development Team</p>"},{"location":"features/WATERMARK%2BNSFW/","title":"Invisible Watermark and the NSFW Checker","text":""},{"location":"features/WATERMARK%2BNSFW/#watermarking","title":"Watermarking","text":"<p>InvokeAI does not apply watermarking to images by default. However, many computer scientists working in the field of generative AI worry that a flood of computer-generated imagery will contaminate the image data sets needed to train future generations of generative models.</p> <p>InvokeAI offers an optional watermarking mode that writes a small bit of text, InvokeAI, into each image that it generates using an \"invisible\" watermarking library that spreads the information throughout the image in a way that is not perceptible to the human eye. If you are planning to share your generated images on internet-accessible services, we encourage you to activate the invisible watermark mode in order to help preserve the digital image environment.</p> <p>The downside of watermarking is that it increases the size of the image moderately, and has been reported by some individuals to degrade image quality. Your mileage may vary.</p> <p>To read the watermark in an image, activate the InvokeAI virtual environment (called the \"developer's console\" in the launcher) and run the command:</p> <pre><code>invisible-watermark -a decode -t bytes -m dwtDct -l 64 /path/to/image.png\n</code></pre>"},{"location":"features/WATERMARK%2BNSFW/#the-nsfw-safety-checker","title":"The NSFW (\"Safety\") Checker","text":"<p>Stable Diffusion 1.5-based image generation models will produce sexual imagery if deliberately prompted, and will occasionally produce such images when this is not intended. Such images are colloquially known as \"Not Safe for Work\" (NSFW). This behavior is due to the nature of the training set that Stable Diffusion was trained on, which culled millions of \"aesthetic\" images from the Internet.</p> <p>You may not wish to be exposed to these images, and in some jurisdictions it may be illegal to publicly distribute such imagery, including mounting a publicly-available server that provides unfiltered images to the public. Furthermore, the Stable Diffusion weights License, and the [Stable Diffusion XL License][https://github.com/invoke-ai/InvokeAI/blob/main/LICENSE-SDXL.txt] both forbid the models from being used to \"exploit any of the vulnerabilities of a specific group of persons.\"</p> <p>For these reasons Stable Diffusion offers a \"safety checker,\" a machine learning model trained to recognize potentially disturbing imagery. When a potentially NSFW image is detected, the checker will blur the image and paste a warning icon on top. The checker can be turned on and off in the Web interface under Settings.</p>"},{"location":"features/WATERMARK%2BNSFW/#caveats","title":"Caveats","text":"<p>There are a number of caveats that you need to be aware of.</p>"},{"location":"features/WATERMARK%2BNSFW/#accuracy","title":"Accuracy","text":"<p>The checker is not perfect.It will occasionally flag innocuous images (false positives), and will frequently miss violent and gory imagery (false negatives). It rarely fails to flag sexual imagery, but this has been known to happen. For these reasons, the InvokeAI team prefers to refer to the software as a \"NSFW Checker\" rather than \"safety checker.\"</p>"},{"location":"features/WATERMARK%2BNSFW/#memory-usage-and-performance","title":"Memory Usage and Performance","text":"<p>The NSFW checker consumes an additional 1.2G of GPU VRAM on top of the 3.4G of VRAM used by Stable Diffusion v1.5 (this is with half-precision arithmetic). This means that the checker will not run successfully on GPU cards with less than 6GB VRAM, and will reduce the size of the images that you can produce.</p> <p>The checker also introduces a slight performance penalty. Images will take ~1 second longer to generate when the checker is activated. Generally this is not noticeable.</p>"},{"location":"features/WATERMARK%2BNSFW/#intermediate-images-in-the-web-ui","title":"Intermediate Images in the Web UI","text":"<p>The checker only operates on the final image produced by the Stable Diffusion algorithm. If you are using the Web UI and have enabled the display of intermediate images, you will briefly be exposed to a low-resolution (mosaicized) version of the final image before it is flagged by the checker and replaced by a fully blurred version. You are encouraged to turn off intermediate image rendering when you are using the checker. Future versions of InvokeAI will apply additional blurring to intermediate images when the checker is active.</p>"},{"location":"features/WEB/","title":"InvokeAI Web Server","text":""},{"location":"features/WEB/#quick-guided-walkthrough-of-the-webuis-features","title":"Quick guided walkthrough of the WebUI's features","text":"<p>While most of the WebUI's features are intuitive, here is a guided walkthrough through its various components.</p>"},{"location":"features/WEB/#launching-the-webui","title":"Launching the WebUI","text":"<p>To run the InvokeAI web server, start the <code>invoke.sh</code>/<code>invoke.bat</code> script and select option (1). Alternatively, with the InvokeAI environment active, run <code>invokeai-web</code>:</p> <pre><code>invokeai-web\n</code></pre> <p>You can then connect to the server by pointing your web browser at http://localhost:9090. To reach the server from a different machine on your LAN, you may launch the web server with the <code>--host</code> argument and either the IP address of the host you are running it on, or the wildcard <code>0.0.0.0</code>. For example:</p> <pre><code>invoke.sh --host 0.0.0.0\n</code></pre> <p>or</p> <pre><code>invokeai-web --host 0.0.0.0\n</code></pre>"},{"location":"features/WEB/#the-invokeai-web-interface","title":"The InvokeAI Web Interface","text":"<p>The screenshot above shows the Text to Image tab of the WebUI. There are three main sections:</p> <ol> <li> <p>A control panel on the left, which contains various settings    for text to image generation. The most important part is the text    field (currently showing <code>fantasy painting, horned demon</code>) for    entering the positive text prompt, another text field right below it for an    optional negative text prompt (concepts to exclude), and a Invoke button     to begin the image rendering process.</p> </li> <li> <p>The current image section in the middle, which shows a large    format version of the image you are currently working on. A series    of buttons at the top lets you modify and manipulate the image in    various ways.</p> </li> <li> <p>A gallery section on the left that contains a history of the images you    have generated. These images are read and written to the directory specified    in the <code>INVOKEAIROOT/invokeai.yaml</code> initialization file, usually a directory    named <code>outputs</code> in <code>INVOKEAIROOT</code>.</p> </li> </ol> <p>In addition to these three elements, there are a series of icons for changing global settings, reporting bugs, and changing the theme on the upper right.</p> <p>There are also a series of icons to the left of the control panel (see highlighted area in the screenshot below) which select among a series of tabs for performing different types of operations.</p> <p></p> <p>From top to bottom, these are:</p> <ol> <li>Text to Image - generate images from text</li> <li>Image to Image - from an uploaded starting image (drawing or photograph)    generate a new one, modified by the text prompt</li> <li>Unified Canvas - Interactively combine multiple images, extend them    with outpainting,and modify interior portions of the image with    inpainting, erase portions of a starting image and have the AI fill in    the erased region from a text prompt.</li> <li>Node Editor - (experimental) this panel allows you to create    pipelines of common operations and combine them into workflows.</li> <li>Model Manager - this panel allows you to import and configure new    models using URLs, local paths, or HuggingFace diffusers repo_ids.</li> </ol>"},{"location":"features/WEB/#walkthrough","title":"Walkthrough","text":"<p>The following walkthrough will exercise most (but not all) of the WebUI's feature set.</p>"},{"location":"features/WEB/#text-to-image","title":"Text to Image","text":"<ol> <li> <p>Launch the WebUI using launcher option [1] and connect to it with    your browser by accessing <code>http://localhost:9090</code>. If the browser    and server are running on different machines on your LAN, add the    option <code>--host 0.0.0.0</code> to the <code>invoke.sh</code> launch command line and connect to    the machine hosting the web server using its IP address or domain    name.</p> </li> <li> <p>If all goes well, the WebUI should come up and you'll see a green dot    meaning <code>connected</code>  on the upper right.</p> </li> </ol> <p></p>"},{"location":"features/WEB/#basics","title":"Basics","text":"<ol> <li> <p>Generate an image by typing bluebird into the large prompt field     on the upper left and then clicking on the Invoke button or pressing     the return button.     After a short wait, you'll see a large image of a bluebird in the     image panel, and a new thumbnail in the gallery on the right.</p> <p>If you need more room on the screen, you can turn the gallery off by typing the g hotkey. You can turn it back on later by clicking the image icon that appears in the gallery's place. The list of hotkeys can be found by clicking on the keyboard icon above the image gallery.</p> </li> <li> <p>Generate a bunch of bluebird images by increasing the number of     requested images by adjusting the Images counter just below the Invoke     button. As each is generated, it will be added to the gallery. You can     switch the active image by clicking on the gallery thumbnails.</p> <p>If you'd like to watch the image generation progress, click the hourglass icon above the main image area. As generation progresses, you'll see increasingly detailed versions of the ultimate image.</p> </li> <li> <p>Try playing with different settings, including changing the main     model, the image width and height, the Scheduler, the Steps and     the CFG scale.</p> <p>The Model changes the main model. Thousands of custom models are now available, which generate a variety of image styles and subjects. While InvokeAI comes with a few starter models, it is easy to import new models into the application. See Installing Models for more details.</p> <p>Image Width and Height do what you'd expect. However, be aware that larger images consume more VRAM memory and take longer to generate.</p> <p>The Scheduler controls how the AI selects the image to display. Some samplers are more \"creative\" than others and will produce a wider range of variations (see next section). Some samplers run faster than others.</p> <p>Steps controls how many noising/denoising/sampling steps the AI will take. The higher this value, the more refined the image will be, but the longer the image will take to generate. A typical strategy is to generate images with a low number of steps in order to select one to work on further, and then regenerate it using a higher number of steps.</p> <p>The CFG Scale controls how hard the AI tries to match the generated image to the input prompt. You can go as high or low as you like, but generally values greater than 20 won't improve things much, and values lower than 5 will produce unexpected images. There are complex interactions between Steps, CFG Scale and the Scheduler, so experiment to find out what works for you.</p> <p>The Seed controls the series of values returned by InvokeAI's random number generator. Each unique seed value will generate a different image. To regenerate a previous image, simply use the original image's seed value. A slider to the right of the Seed field will change the seed each time an image is generated.</p> </li> </ol> <p></p> <ol> <li> <p>To regenerate a previously-generated image, select the image you     want and click the asterisk (\"*\") button at the top of the     image. This loads the text prompt and other original settings into     the control panel. If you then press Invoke it will regenerate     the image exactly. You can also selectively modify the prompt or     other settings to tweak the image.</p> <p>Alternatively, you may click on the \"sprouting plant icon\" to load just the image's seed, and leave other settings unchanged or the quote icon to load just the positive and negative prompts.</p> </li> <li> <p>To regenerate a Stable Diffusion image that was generated by another SD     package, you need to know its text prompt and its Seed. Copy-paste the     prompt into the prompt box, unset the Randomize Seed control in the     control panel, and copy-paste the desired Seed into its text field. When     you Invoke, you will get something similar to the original image. It will     not be exact unless you also set the correct values for the original     sampler, CFG, steps and dimensions, but it will (usually) be close.</p> </li> <li> <p>To save an image, right click on it to bring up a menu that will     let you download the image, save it to a named image gallery, and     copy it to the clipboard, among other things.</p> </li> </ol>"},{"location":"features/WEB/#upscaling","title":"Upscaling","text":"<p>\"Upscaling\" is the process of increasing the size of an image while     retaining the sharpness. InvokeAI uses an external library called     \"ESRGAN\" to do this. To invoke upscaling, simply select an image     and press the \"expanding arrows\" button above it. You can select     between 2X and 4X upscaling, and adjust the upscaling strength,     which has much the same meaning as in facial reconstruction. Try     running this on one of your previously-generated images.</p>"},{"location":"features/WEB/#image-to-image","title":"Image to Image","text":"<p>InvokeAI lets you take an existing image and use it as the basis for a new creation. You can use any sort of image, including a photograph, a scanned sketch, or a digital drawing, as long as it is in PNG or JPEG format.</p> <p>For this tutorial, we'll use the file named Lincoln-and-Parrot-512.png.</p> <ol> <li> <p>Click on the Image to Image tab icon, which is the second icon     from the top on the left-hand side of the screen. This will bring     you to a screen similar to the one shown here:</p> <p></p> </li> <li> <p>Drag-and-drop the Lincoln-and-Parrot image into the Image panel, or click     the blank area to get an upload dialog. The image will load into an area     marked Initial Image. (The WebUI will also load the most     recently-generated image from the gallery into a section on the left, but     this image will be replaced in the next step.)</p> </li> <li> <p>Go to the prompt box and type old sea captain with raven on shoulder and     press Invoke. A derived image will appear to the right of the original one:</p> <p></p> </li> <li> <p>Experiment with the different settings. The most influential one in Image to     Image is Denoising Strength located about midway down the control     panel. By default it is set to 0.75, but can range from 0.0 to 0.99. The     higher the value, the more of the original image the AI will replace. A     value of 0 will leave the initial image completely unchanged, while 0.99     will replace it completely. However, the Scheduler and CFG Scale also     influence the final result. You can also generate variations in the same way     as described in Text to Image.</p> </li> <li> <p>What if we only want to change certain part(s) of the image and     leave the rest intact? This is called Inpainting, and you can do     it in the Unified Canvas. The Unified Canvas     also allows you to extend borders of the image and fill in the     blank areas, a process called outpainting.</p> </li> <li> <p>Would you like to modify a previously-generated image using the Image to     Image facility? Easy! While in the Image to Image panel, drag and drop any     image in the gallery into the Initial Image area, and it will be ready for     use. You can do the same thing with the main image display. Click on the     Send to icon to get a menu of     commands and choose \"Send to Image to Image\".</p> <p> </p> </li> </ol>"},{"location":"features/WEB/#textual-inversion-lora-and-controlnet","title":"Textual Inversion, LoRA and ControlNet","text":"<p>InvokeAI supports several different types of model files that extending the capabilities of the main model by adding artistic styles, special effects, or subjects. By mixing and matching textual inversion, LoRA and ControlNet models, you can achieve many interesting and beautiful effects.</p> <p>We will give an example using a LoRA model named \"Ink Scenery\". This LoRA, which can be downloaded from Civitai (civitai.com), is specialized to paint landscapes that look like they were made with dripping india ink. To install this LoRA, we first download it and  put it into the <code>autoimport/lora</code> folder located inside the <code>invokeai</code> root directory. After restarting the web server, the LoRA will now become available for use.</p> <p>To see this LoRA at work, we'll first generate an image without it using the standard <code>stable-diffusion-v1-5</code> model. Choose this model and enter the prompt \"mountains, ink\". Here is a typical generated image, a mountain range rendered in ink and watercolor wash:</p> <p></p> <p>Now let's install and activate the Ink Scenery LoRA. Go to https://civitai.com/models/78605/ink-scenery-or and download the LoRA model file to <code>invokeai/autoimport/lora</code> and restart the web server. (Alternatively, you can use InvokeAI's Web Model Manager to download and install the LoRA directly by typing its URL into the Import Models-&gt;Location field).</p> <p>Scroll down the control panel until you get to the LoRA accordion section, and open it:</p> <p></p> <p>Click the popup menu and select \"Ink scenery\". (If it isn't there, then the model wasn't installed to the right place, or perhaps you forgot to restart the web server.) The LoRA section will change to look like this:</p> <p></p> <p>Note that there is now a slider control for Ink scenery. The slider controls how much influence the LoRA model will have on the generated image.</p> <p>Run the \"mountains, ink\" prompt again and observe the change in style:</p> <p></p> <p>Try adjusting the weight slider for larger and smaller weights and generate the image after each adjustment. The higher the weight, the more influence the LoRA will have.</p> <p>To remove the LoRA completely, just click on its trash can icon.</p> <p>Multiple LoRAs can be added simultaneously and combined with textual inversions and ControlNet models. Please see Textual Inversions and LoRAs and Using ControlNet for details.</p>"},{"location":"features/WEB/#summary","title":"Summary","text":"<p>This walkthrough just skims the surface of the many things InvokeAI can do. Please see Features for more detailed reference guides.</p>"},{"location":"features/WEB/#acknowledgements","title":"Acknowledgements","text":"<p>A huge shout-out to the core team working to make the Web GUI a reality, including psychedelicious, Kyle0654 and blessedcoolant. hipsterusername was the team's unofficial cheerleader and added tooltips/docs.</p>"},{"location":"features/WEBUIHOTKEYS/","title":"WebUI Hotkey List","text":""},{"location":"features/WEBUIHOTKEYS/#app-hotkeys","title":"App Hotkeys","text":"Setting Hotkey Ctrl+Enter Invoke Shift+X Cancel Alt+A Focus Prompt O Toggle Options Shift+O Pin Options Z Toggle Viewer G Toggle Gallery F Maximize Workspace 1 - 5 Change Tabs ` Toggle Console"},{"location":"features/WEBUIHOTKEYS/#general-hotkeys","title":"General Hotkeys","text":"Setting Hotkey P Set Prompt S Set Seed A Set Parameters Shift+R Restore Faces Shift+U Upscale I Show Info Shift+I Send To Image To Image Del Delete Image Esc Close Panels"},{"location":"features/WEBUIHOTKEYS/#gallery-hotkeys","title":"Gallery Hotkeys","text":"Setting Hotkey Left Previous Image Right Next Image Shift+G Toggle Gallery Pin Shift+Up Increase Gallery Image Size Shift+Down Decrease Gallery Image Size"},{"location":"features/WEBUIHOTKEYS/#unified-canvas-hotkeys","title":"Unified Canvas Hotkeys","text":"Setting Hotkey B Select Brush E Select Eraser [ Decrease Brush Size ] Increase Brush Size Shift+[ Decrease Brush Opacity Shift+] Increase Brush Opacity V Move Tool Shift+F Fill Bounding Box Del / Backspace Erase Bounding Box C Select Color Picker N Toggle Snap Hold Space Quick Toggle Move Q Toggle Layer Shift+C Clear Mask H Hide Mask Shift+H Show/Hide Bounding Box Shift+M Merge Visible Shift+S Save To Gallery Ctrl+C Copy To Clipboard Shift+D Download Image Ctrl+Z Undo Ctrl+Y / Ctrl+Shift+Z Redo R Reset View Left Previous Staging Image Right Next Staging Image Enter Accept Staging Image"},{"location":"help/FAQ/","title":"FAQs","text":"<p>Where do I get started? How can I install Invoke?</p> <ul> <li>You can download the latest installers here - Note that any releases marked as pre-release are in a beta state. You may experience some issues, but we appreciate your help testing those! For stable/reliable installations, please install the Latest Release</li> </ul> <p>How can I download models? Can I use models I already have downloaded?</p> <ul> <li>Models can be downloaded through the model manager, or through option [4] in the invoke.bat/invoke.sh launcher script. To download a model through the Model Manager, use the HuggingFace Repo ID by pressing the \u201cCopy\u201d button next to the repository name. Alternatively, to download a model from CivitAi, use the download link in the Model Manager.</li> <li>Models that are already downloaded can be used by creating a symlink to the model location in the <code>autoimport</code> folder or by using the Model Manger\u2019s \u201cScan for Models\u201d function.</li> </ul> <p>My images are taking a long time to generate. How can I speed up generation? </p> <ul> <li>A common solution is to reduce the size of your RAM &amp; VRAM cache to 0.25. This ensures your system has enough memory to generate images.</li> <li>Additionally, check the hardware requirements to ensure that your system is capable of generating images.</li> <li>Lastly, double check your generations are happening on your GPU (if you have one). InvokeAI will log what is being used for generation upon startup. </li> </ul> <p>I\u2019ve installed Python on Windows but the installer says it can\u2019t find it?</p> <ul> <li>Then ensure that you checked  'Add python.exe to PATH' when installing Python. This can be found at the bottom of the Python Installer window. If you already have Python installed, this can be done with the modify / repair feature of the installer.</li> </ul> <p>I\u2019ve installed everything successfully but I still get an error about Triton when starting Invoke?</p> <ul> <li>This can be safely ignored. InvokeAI doesn't use Triton, but if you are on Linux and wish to dismiss the error, you can install Triton.</li> </ul> <p>I updated to 3.4.0 and now xFormers can\u2019t load C++/CUDA?</p> <ul> <li>An issue occurred with your PyTorch update. Follow these steps to fix :<ol> <li>Launch your invoke.bat / invoke.sh and select the option to open the developer console</li> <li>Run:<code>pip install \".[xformers]\" --upgrade --force-reinstall --extra-index-url https://download.pytorch.org/whl/cu121</code></li> <li>If you run into an error with <code>typing_extensions</code>, re-open the developer console and run:  <code>pip install -U typing-extensions</code></li> </ol> </li> </ul> <p>It says my pip is out of date - is that why my install isn't working? - An out of date won't cause an installation to fail. The cause of the error can likely be found above the message that says pip is out of date. - If you saw that warning but the install went well, don't worry about it (but you can update pip afterwards if you'd like).   </p> <p>How can I generate the exact same that I found on the internet? Most example images with prompts that you'll find on the internet have been generated using different software, so you can't expect to get identical results. In order to reproduce an image, you need to replicate the exact settings and processing steps, including (but not limited to) the model, the positive and negative prompts, the seed, the sampler, the exact image size, any upscaling steps, etc.</p> <p>Where can I get more help? </p> <ul> <li>Create an issue on GitHub or post in the #help channel of the InvokeAI Discord</li> </ul>"},{"location":"help/SAMPLER_CONVERGENCE/","title":"Sampler Convergence","text":"<p>As features keep increasing, making the right choices for your needs can become increasingly difficult. What sampler to use? And for how many steps? Do you change the CFG value? Do you use prompt weighting? Do you allow variations?</p> <p>Even once you have a result, do you blend it with other images? Pass it through <code>img2img</code>? With what strength? Do you use inpainting to correct small details? Outpainting to extend cropped sections?</p> <p>The purpose of this series of documents is to help you better understand these tools, so you can make the best out of them. Feel free to contribute with your own findings!</p> <p>In this document, we will talk about sampler convergence.</p> <p>Looking for a short version? Here's a TL;DR in 3 tables.</p> <p>Remember</p> <ul> <li>Results converge as steps (<code>-s</code>) are increased (except for <code>K_DPM_2_A</code> and <code>K_EULER_A</code>). Often at \u2265 <code>-s100</code>, but may require \u2265 <code>-s700</code>).</li> <li>Producing a batch of candidate images at low (<code>-s8</code> to <code>-s30</code>) step counts can save you hours of computation.</li> <li><code>K_HEUN</code> and <code>K_DPM_2</code>  converge in less steps (but are slower).</li> <li><code>K_DPM_2_A</code> and <code>K_EULER_A</code> incorporate a lot of creativity/variability.</li> </ul> Sampler (3 sample avg) it/s (M1 Max 64GB, 512x512) <code>DDIM</code> 1.89 <code>PLMS</code> 1.86 <code>K_EULER</code> 1.86 <code>K_LMS</code> 1.91 <code>K_HEUN</code> 0.95 (slower) <code>K_DPM_2</code> 0.95 (slower) <code>K_DPM_2_A</code> 0.95 (slower) <code>K_EULER_A</code> 1.86 <p>suggestions</p> <p>For most use cases, <code>K_LMS</code>, <code>K_HEUN</code> and <code>K_DPM_2</code> are the best choices (the latter 2 run 0.5x as quick, but tend to converge 2x as quick as <code>K_LMS</code>). At very low steps (\u2264 <code>-s8</code>), <code>K_HEUN</code> and <code>K_DPM_2</code> are not recommended. Use <code>K_LMS</code> instead.</p> <p>For variability, use <code>K_EULER_A</code> (runs 2x as quick as <code>K_DPM_2_A</code>).</p>"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-results","title":"Sampler results","text":"<p>Let's start by choosing a prompt and using it with each of our 8 samplers, running it for 10, 20, 30, 40, 50 and 100 steps.</p> <p>Anime. <code>\"an anime girl\" -W512 -H512 -C7.5 -S3031912972</code></p> <p></p>"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-convergence_1","title":"Sampler convergence","text":"<p>Immediately, you can notice results tend to converge -that is, as <code>-s</code> (step) values increase, images look more and more similar until there comes a point where the image no longer changes.</p> <p>You can also notice how <code>DDIM</code> and <code>PLMS</code> eventually tend to converge to K-sampler results as steps are increased. Among K-samplers, <code>K_HEUN</code> and <code>K_DPM_2</code> seem to require the fewest steps to converge, and even at low step counts they are good indicators of the final result. And finally, <code>K_DPM_2_A</code> and <code>K_EULER_A</code> seem to do a bit of their own thing and don't keep much similarity with the rest of the samplers.</p>"},{"location":"help/SAMPLER_CONVERGENCE/#batch-generation-speedup","title":"Batch generation speedup","text":"<p>This realization is very useful because it means you don't need to create a batch of 100 images (<code>-n100</code>) at <code>-s100</code> to choose your favorite 2 or 3 images. You can produce the same 100 images at <code>-s10</code> to <code>-s30</code> using a K-sampler (since they converge faster), get a rough idea of the final result, choose your 2 or 3 favorite ones, and then run <code>-s100</code> on those images to polish some details. The latter technique is 3-8x as quick.</p> <p>Example</p> <p>At 60s per 100 steps.</p> <p>A) 60s * 100 images = 6000s (100 images at <code>-s100</code>, manually picking 3 favorites)</p> <p>B) 6s 100 images + 60s 3 images = 780s (100 images at <code>-s10</code>, manually picking 3 favorites, and running those 3 at <code>-s100</code> to polish details)</p> <p>The result is 1 hour and 40 minutes for Variant A, vs 13 minutes for Variant B.</p>"},{"location":"help/SAMPLER_CONVERGENCE/#topic-convergance","title":"Topic convergance","text":"<p>Now, these results seem interesting, but do they hold for other topics? How about nature? Food? People? Animals? Let's try!</p> <p>Nature. <code>\"valley landscape wallpaper, d&amp;d art, fantasy, painted, 4k, high detail, sharp focus, washed colors, elaborate excellent painted illustration\" -W512 -H512 -C7.5 -S1458228930</code></p> <p></p> <p>With nature, you can see how initial results are even more indicative of final result -more so than with characters/people. <code>K_HEUN</code> and <code>K_DPM_2</code> are again the quickest indicators, almost right from the start. Results also converge faster (e.g. <code>K_HEUN</code> converged at <code>-s21</code>).</p> <p>Food. <code>\"a hamburger with a bowl of french fries\" -W512 -H512 -C7.5 -S4053222918</code></p> <p></p> <p>Again, <code>K_HEUN</code> and <code>K_DPM_2</code> take the fewest number of steps to be good indicators of the final result. <code>K_DPM_2_A</code> and <code>K_EULER_A</code> seem to incorporate a lot of creativity/variability, capable of producing rotten hamburgers, but also of adding lettuce to the mix. And they're the only samplers that produced an actual 'bowl of fries'!</p> <p>Animals. <code>\"grown tiger, full body\" -W512 -H512 -C7.5 -S3721629802</code></p> <p></p> <p><code>K_HEUN</code> and <code>K_DPM_2</code> once again require the least number of steps to be indicative of the final result (around <code>-s30</code>), while other samplers are still struggling with several tails or malformed back legs.</p> <p>It also takes longer to converge (for comparison, <code>K_HEUN</code> required around 150 steps to converge). This is normal, as producing human/animal faces/bodies is one of the things the model struggles the most with. For these topics, running for more steps will often increase coherence within the composition.</p> <p>People. <code>\"Ultra realistic photo, (Miranda Bloom-Kerr), young, stunning model, blue eyes, blond hair, beautiful face, intricate, highly detailed, smooth, art by artgerm and greg rutkowski and alphonse mucha, stained glass\" -W512 -H512 -C7.5 -S2131956332</code>. This time, we will go up to 300 steps.</p> <p></p> <p>Observing the results, it again takes longer for all samplers to converge (<code>K_HEUN</code> took around 150 steps), but we can observe good indicative results much earlier (see: <code>K_HEUN</code>). Conversely, <code>DDIM</code> and <code>PLMS</code> are still undergoing moderate changes (see: lace around her neck), even at <code>-s300</code>.</p> <p>In fact, as we can see in this other experiment, some samplers can take 700+ steps to converge when generating people.</p> <p></p> <p>Note also the point of convergence may not be the most desirable state (e.g. I prefer an earlier version of the face, more rounded), but it will probably be the most coherent arms/hands/face attributes-wise. You can always merge different images with a photo editing tool and pass it through <code>img2img</code> to smoothen the composition.</p>"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-generation-times","title":"Sampler generation times","text":"<p>Once we understand the concept of sampler convergence, we must look into the performance of each sampler in terms of steps (iterations) per second, as not all samplers run at the same speed.</p> <p>On my M1 Max with 64GB of RAM, for a 512x512 image</p> Sampler (3 sample average) it/s <code>DDIM</code> 1.89 <code>PLMS</code> 1.86 <code>K_EULER</code> 1.86 <code>K_LMS</code> 1.91 <code>K_HEUN</code> 0.95 (slower) <code>K_DPM_2</code> 0.95 (slower) <code>K_DPM_2_A</code> 0.95 (slower) <code>K_EULER_A</code> 1.86 <p>Combining our results with the steps per second of each sampler, three choices come out on top: <code>K_LMS</code>, <code>K_HEUN</code> and <code>K_DPM_2</code> (where the latter two run 0.5x as quick but tend to converge 2x as quick as <code>K_LMS</code>). For creativity and a lot of variation between iterations, <code>K_EULER_A</code> can be a good choice (which runs 2x as quick as <code>K_DPM_2_A</code>).</p> <p>Additionally, image generation at very low steps (\u2264 <code>-s8</code>) is not recommended for <code>K_HEUN</code> and <code>K_DPM_2</code>. Use <code>K_LMS</code> instead.</p> <p></p>"},{"location":"help/SAMPLER_CONVERGENCE/#three-key-points","title":"Three key points","text":"<p>Finally, it is relevant to mention that, in general, there are 3 important moments in the process of image formation as steps increase:</p> <ul> <li> <p>The (earliest) point at which an image becomes a good indicator of the final result (useful for batch generation at low step values, to then improve the quality/coherence of the chosen images via running the same prompt and seed for more steps).</p> </li> <li> <p>The (earliest) point at which an image becomes coherent, even if different from the result if steps are increased (useful for batch generation at low step values, where quality/coherence is improved via techniques other than increasing the steps -e.g. via inpainting).</p> </li> <li> <p>The point at which an image fully converges.</p> </li> </ul> <p>Hence, remember that your workflow/strategy should define your optimal number of steps, even for the same prompt and seed (for example, if you seek full convergence, you may run <code>K_LMS</code> for <code>-s200</code> in the case of the red-haired girl, but <code>K_LMS</code> and <code>-s20</code>-taking one tenth the time- may do as well if your workflow includes adding small details, such as the missing shoulder strap, via <code>img2img</code>).</p>"},{"location":"help/diffusion/","title":"Diffusion Overview","text":"<p>Taking the time to understand the diffusion process will help you to understand how to more effectively use InvokeAI.</p> <p>There are two main ways Stable Diffusion works - with images, and latents.</p> <p>Image space represents images in pixel form that you look at. Latent space represents compressed inputs. It\u2019s in latent space that Stable Diffusion processes images. A VAE (Variational Auto Encoder) is responsible for compressing and encoding inputs into latent space, as well as decoding outputs back into image space.</p> <p>To fully understand the diffusion process, we need to understand a few more terms: UNet, CLIP, and conditioning.</p> <p>A U-Net is a model trained on a large number of latent images with with known amounts of random noise added.  This means that the U-Net can be given a slightly noisy image and it will predict the pattern of noise needed to subtract from the image in order to recover the original. </p> <p>CLIP is a model that tokenizes and encodes text into conditioning. This conditioning guides the model during the denoising steps to produce a new image. </p> <p>The U-Net and CLIP work together during the image generation process at each denoising step, with the U-Net removing noise in such a way that the result is similar to images in the U-Net\u2019s training set, while CLIP guides the U-Net towards creating images that are most similar to the prompt.</p> <p>When you generate an image using text-to-image, multiple steps occur in latent space: 1. Random noise is generated at the chosen height and width. The noise\u2019s characteristics are dictated by  seed. This noise tensor is passed into latent space. We\u2019ll call this noise A. 2. Using a model\u2019s U-Net, a noise predictor examines noise A, and the words tokenized by CLIP from your prompt (conditioning). It generates its own noise tensor to predict what the final image might look like in latent space. We\u2019ll call this noise B. 3. Noise B is subtracted from noise A in an attempt to create a latent image consistent with the prompt. This step is repeated for the number of sampler steps chosen. 4. The VAE decodes the final latent image from latent space into image space.</p> <p>Image-to-image is a similar process, with only step 1 being different: 1. The input image is encoded from image space into latent space by the VAE. Noise is then added to the input latent image. Denoising Strength dictates how may noise steps are added, and the amount of noise added at each step. A Denoising Strength of 0 means there are 0 steps and no noise added, resulting in an unchanged image, while a Denoising Strength of 1 results in the image being completely replaced with noise and a full set of denoising steps are performance. The process is then the same as steps 2-4 in the text-to-image process. </p> <p>Furthermore, a model provides the CLIP prompt tokenizer, the VAE, and a U-Net (where noise prediction occurs given a prompt and initial noise tensor).</p> <p>A noise scheduler (eg. DPM++ 2M Karras) schedules the subtraction of noise from the latent image across the sampler steps chosen (step 3 above). Less noise is usually subtracted at higher sampler steps. </p>"},{"location":"help/gettingStartedWithAI/","title":"Getting Started with AI Image Generation","text":"<p>New to image generation with AI? You\u2019re in the right place! </p> <p>This is a high level walkthrough of some of the concepts and terms you\u2019ll see as you start using InvokeAI. Please note, this is not an exhaustive guide and may be out of date due to the rapidly changing nature of the space. </p>"},{"location":"help/gettingStartedWithAI/#using-invokeai","title":"Using InvokeAI","text":""},{"location":"help/gettingStartedWithAI/#prompt-crafting","title":"Prompt Crafting","text":"<ul> <li>Prompts are the basis of using InvokeAI, providing the models directions on what to generate. As a general rule of thumb, the more detailed your prompt is, the better your result will be.</li> </ul> <p>To get started, here\u2019s an easy template to use for structuring your prompts:</p> <ul> <li>Subject, Style, Quality, Aesthetic<ul> <li>Subject: What your image will be about. E.g. \u201ca futuristic city with trains\u201d,  \u201cpenguins floating on icebergs\u201d, \u201cfriends sharing beers\u201d</li> <li>Style: The style or medium in which your image will be in. E.g. \u201cphotograph\u201d, \u201cpencil sketch\u201d, \u201coil paints\u201d, or \u201cpop art\u201d, \u201ccubism\u201d, \u201cabstract\u201d</li> <li>Quality: A particular aspect or trait that you would like to see emphasized in your image. E.g. \"award-winning\", \"featured in {relevant set of high quality works}\", \"professionally acclaimed\". Many people often use \"masterpiece\".</li> <li>Aesthetics: The visual impact and design of the artwork. This can be colors, mood, lighting, setting, etc.</li> </ul> </li> <li>There are two prompt boxes: Positive Prompt &amp; Negative Prompt.<ul> <li>A Positive Prompt includes words you want the model to reference when creating an image.</li> <li>Negative Prompt is for anything you want the model to eliminate when creating an image. It doesn\u2019t always interpret things exactly the way you would, but helps control the generation process. Always try to include a few terms - you can typically use lower quality image terms like \u201cblurry\u201d or \u201cdistorted\u201d with good success.</li> </ul> </li> <li>Some examples prompts you can try on your own:<ul> <li>A detailed oil painting of a tranquil forest at sunset with vibrant+ colors and soft, golden light filtering through the trees</li> <li>friends sharing beers in a busy city, realistic colored pencil sketch, twilight, masterpiece, bright, lively</li> </ul> </li> </ul>"},{"location":"help/gettingStartedWithAI/#generation-workflows","title":"Generation Workflows","text":"<ul> <li>Invoke offers a number of different workflows for interacting with models to produce images. Each is extremely powerful on its own, but together provide you an unparalleled way of producing high quality creative outputs that align with your vision.<ul> <li>Text to Image: The text to image tab focuses on the key workflow of using a prompt to generate a new image. It includes other features that help control the generation process as well.</li> <li>Image to Image: With image to image, you provide an image as a reference (called the \u201cinitial image\u201d), which provides more guidance around color and structure to the AI as it generates a new image. This is provided alongside the same features as Text to Image.</li> <li>Unified Canvas: The Unified Canvas is an advanced AI-first image editing tool that is easy to use, but hard to master. Drag an image onto the canvas from your gallery in order to regenerate certain elements, edit content or colors (known as inpainting), or extend the image with an exceptional degree of consistency and clarity (called outpainting).</li> </ul> </li> </ul>"},{"location":"help/gettingStartedWithAI/#improving-image-quality","title":"Improving Image Quality","text":"<ul> <li>Fine tuning your prompt - the more specific you are, the closer the image will turn out to what is in your head!  Adding more details in the Positive Prompt or Negative Prompt can help add / remove pieces of your image to improve it - You can also use advanced techniques like upweighting and downweighting to control the influence of certain words. Learn more here.<ul> <li>Tip: If you\u2019re seeing poor results, try adding the things you don\u2019t like about the image to your negative prompt may help. E.g. distorted, low quality, unrealistic, etc.</li> </ul> </li> <li>Explore different models - Other models can produce different results due to the data they\u2019ve been trained on. Each model has specific language and settings it works best with; a model\u2019s documentation is your friend here.  Play around with some and see what works best for you!</li> <li>Increasing Steps - The number of steps used controls how much time the model is given to produce an image, and depends on the \u201cScheduler\u201d used. The schedule controls how each step is processed by the model. More steps tends to mean better results, but will take longer - We recommend at least 30 steps for most</li> <li>Tweak and Iterate - Remember, it\u2019s best to change one thing at a time so you know what is working and what isn't. Sometimes you just need to try a new image, and other times using a new prompt might be the ticket. For testing, consider turning off the \u201crandom\u201d Seed - Using the same seed with the same settings will produce the same image, which makes it the perfect way to learn exactly what your changes are doing.</li> <li>Explore Advanced Settings - InvokeAI has a full suite of tools available to allow you complete control over your image creation process - Check out our docs if you want to learn more.</li> </ul>"},{"location":"help/gettingStartedWithAI/#terms-concepts","title":"Terms &amp; Concepts","text":"<p>If you're interested in learning more, check out this presentation from one of our maintainers (@lstein). </p>"},{"location":"help/gettingStartedWithAI/#stable-diffusion","title":"Stable Diffusion","text":"<p>Stable Diffusion is deep learning, text-to-image model that is the foundation of the capabilities found in InvokeAI. Since the release of Stable Diffusion, there have been many subsequent models created based on Stable Diffusion that are designed to generate specific types of images. </p>"},{"location":"help/gettingStartedWithAI/#prompts","title":"Prompts","text":"<p>Prompts provide the models directions on what to generate. As a general rule of thumb, the more detailed your prompt is, the better your result will be.</p>"},{"location":"help/gettingStartedWithAI/#models","title":"Models","text":"<p>Models are the magic that power InvokeAI. These files represent the output of training a machine on understanding massive amounts of images - providing them with the capability to generate new images using just a text description of what you\u2019d like to see. (Like Stable Diffusion!)</p> <p>Invoke offers a simple way to download several different models upon installation, but many more can be discovered online, including at https://models.invoke.ai </p> <p>Each model can produce a unique style of output, based on the images it was trained on - Try out different models to see which best fits your creative vision!</p> <ul> <li>Models that contain \u201cinpainting\u201d in the name are designed for use with the inpainting feature of the Unified Canvas</li> </ul>"},{"location":"help/gettingStartedWithAI/#scheduler","title":"Scheduler","text":"<p>Schedulers guide the process of removing noise (de-noising) from data. They determine:</p> <ol> <li>The number of steps to take to remove the noise.</li> <li>Whether the steps are random (stochastic) or predictable (deterministic).</li> <li>The specific method (algorithm) used for de-noising.</li> </ol> <p>Experimenting with different schedulers is recommended as each will produce different outputs!</p>"},{"location":"help/gettingStartedWithAI/#steps","title":"Steps","text":"<p>The number of de-noising steps each generation through. </p> <p>Schedulers can be intricate and there's often a balance to strike between how quickly they can de-noise data and how well they can do it. It's typically advised to experiment with different schedulers to see which one gives the best results. There has been a lot written on the internet about different schedulers, as well as exploring what the right level of \"steps\" are for each. You can save generation time by reducing the number of steps used, but you'll want to make sure that you are satisfied with the quality of images produced!</p>"},{"location":"help/gettingStartedWithAI/#low-rank-adaptations-loras","title":"Low-Rank Adaptations / LoRAs","text":"<p>Low-Rank Adaptations (LoRAs) are like a smaller, more focused version of models, intended to focus on training a better understanding of how a specific character, style, or concept looks.</p>"},{"location":"help/gettingStartedWithAI/#textual-inversion-embeddings","title":"Textual Inversion Embeddings","text":"<p>Textual Inversion Embeddings, like LoRAs, assist with more easily prompting for certain characters, styles, or concepts. However, embeddings are trained to update the relationship between a specific word (known as the \u201ctrigger\u201d) and the intended output. </p>"},{"location":"help/gettingStartedWithAI/#controlnet","title":"ControlNet","text":"<p>ControlNets are neural network models that are able to extract key features from an existing image and use these features to guide the output of the image generation model. </p>"},{"location":"help/gettingStartedWithAI/#vae","title":"VAE","text":"<p>Variational auto-encoder (VAE) is a encode/decode model that translates the \"latents\" image produced during the image generation procees to the large pixel images that we see. </p>"},{"location":"help/deprecated/TROUBLESHOOT/","title":"F.A.Q.","text":""},{"location":"help/deprecated/TROUBLESHOOT/#frequently-asked-questions","title":"Frequently-Asked-Questions","text":"<p>Here are a few common installation problems and their solutions. Often these are caused by incomplete installations or crashes during the install process.</p>"},{"location":"help/deprecated/TROUBLESHOOT/#during-conda-env-create-conda-hangs-indefinitely","title":"During <code>conda env create</code>, conda hangs indefinitely","text":"<p>If it is because of the last PIP step (usually stuck in the Git Clone step, you can check the detailed log by this method):</p> <pre><code>export PIP_LOG=\"/tmp/pip_log.txt\"\ntouch ${PIP_LOG}\ntail -f ${PIP_LOG} &amp;\nconda env create -f environment-mac.yaml --debug --verbose\nkillall tail\nrm ${PIP_LOG}\n</code></pre> <p>SOLUTION</p> <p>Conda sometimes gets stuck at the last PIP step, in which several git repositories are cloned and built.</p> <p>Enter the stable-diffusion directory and completely remove the <code>src</code> directory and all its contents. The safest way to do this is to enter the stable-diffusion directory and give the command <code>git clean -f</code>. If this still doesn't fix the problem, try \"conda clean -all\" and then restart at the <code>conda env create</code> step.</p> <p>To further understand the problem to checking the install lot using this method:</p> <pre><code>export PIP_LOG=\"/tmp/pip_log.txt\"\ntouch ${PIP_LOG}\ntail -f ${PIP_LOG} &amp;\nconda env create -f environment-mac.yaml --debug --verbose\nkillall tail\nrm ${PIP_LOG}\n</code></pre>"},{"location":"help/deprecated/TROUBLESHOOT/#invokepy-crashes-with-the-complaint-that-it-cant-find-ldmsimplet2ipy","title":"<code>invoke.py</code> crashes with the complaint that it can't find <code>ldm.simplet2i.py</code>","text":"<p>Or it complains that function is being passed incorrect parameters.</p> <p>SOLUTION</p> <p>Reinstall the stable diffusion modules. Enter the <code>stable-diffusion</code> directory and give the command <code>pip install -e .</code></p>"},{"location":"help/deprecated/TROUBLESHOOT/#missing-modules","title":"Missing modules","text":"<p><code>invoke.py</code> dies, complaining of various missing modules, none of which starts with <code>ldm</code>.</p> <p>SOLUTION</p> <p>From within the <code>InvokeAI</code> directory, run <code>conda env update</code> This is also frequently the solution to complaints about an unknown function in a module.</p>"},{"location":"help/deprecated/TROUBLESHOOT/#how-can-i-try-new-features","title":"How can I try new features","text":"<p>There's a feature or bugfix in the Stable Diffusion GitHub that you want to try out.</p> <p>SOLUTIONS</p>"},{"location":"help/deprecated/TROUBLESHOOT/#main-branch","title":"Main Branch","text":"<p>If the fix/feature is on the <code>main</code> branch, enter the stable-diffusion directory and do a <code>git pull</code>.</p> <p>Usually this will be sufficient, but if you start to see errors about missing or incorrect modules, use the command <code>pip install -e .</code> and/or <code>conda env update</code> (These commands won't break anything.)</p> <p><code>pip install -e .</code> and/or <code>conda env update -f environment.yaml</code></p> <p>(These commands won't break anything.)</p>"},{"location":"help/deprecated/TROUBLESHOOT/#sub-branch","title":"Sub Branch","text":"<p>If the feature/fix is on a branch (e.g. \"foo-bugfix\"), the recipe is similar, but do a <code>git pull &lt;name of branch&gt;</code>.</p>"},{"location":"help/deprecated/TROUBLESHOOT/#not-committed","title":"Not Committed","text":"<p>If the feature/fix is in a pull request that has not yet been made part of the main branch or a feature/bugfix branch, then from the page for the desired pull request, look for the line at the top that reads \"xxxx wants to merge xx commits into lstein:main from YYYYYY\". Copy the URL in YYYY. It should have the format</p> <p><code>https://github.com/&lt;name of contributor&gt;/stable-diffusion/tree/&lt;name of branch&gt;</code></p> <p>Then go to the directory above stable-diffusion and rename the directory to \"stable-diffusion.lstein\", \"stable-diffusion.old\", or anything else. You can then git clone the branch that contains the pull request:</p> <p><code>git clone https://github.com/&lt;name of contributor&gt;/stable-diffusion/tree/&lt;name of branch&gt;</code></p> <p>You will need to go through the install procedure again, but it should be fast because all the dependencies are already loaded.</p>"},{"location":"help/deprecated/TROUBLESHOOT/#cuda-out-of-memory","title":"CUDA out of memory","text":"<p>Image generation crashed with CUDA out of memory error after successful sampling.</p> <p>SOLUTION</p> <p>Try to run script with option <code>--free_gpu_mem</code> This will free memory before image decoding step.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/","title":"InvokeAI Automated Installation","text":""},{"location":"installation/010_INSTALL_AUTOMATED/#introduction","title":"Introduction","text":"<p>The automated installer is a Python script that automates the steps needed to install and run InvokeAI on a stock computer running recent versions of Linux, MacOS or Windows. It will leave you with a version that runs a stable version of InvokeAI with the option to upgrade to experimental versions later.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#walk-through","title":"Walk through","text":"<ol> <li> <p>Hardware Requirements: Make sure that your system meets the hardware     requirements and has the     appropriate GPU drivers installed. For a system with an NVIDIA     card installed, you will need to install the CUDA driver, while     AMD-based cards require the ROCm driver. In most cases, if you've     already used the system for gaming or other graphics-intensive     tasks, the appropriate drivers will already be installed. If     unsure, check the GPU Driver Guide</p> <p>Required Space</p> <p>Installation requires roughly 18G of free disk space to load the libraries and recommended model weights files.</p> <p>Regardless of your destination disk, your system drive (<code>C:\\</code> on Windows, <code>/</code> on macOS/Linux) requires at least 6GB of free disk space to download and cache python dependencies.</p> <p>NOTE for Linux users: if your temporary directory is mounted     as a <code>tmpfs</code>, ensure it has sufficient space.</p> </li> <li> <p>Software Requirements: Check that your system has an up-to-date Python installed. To do     this, open up a command-line window (\"Terminal\" on Linux and     Macintosh, \"Command\" or \"Powershell\" on Windows) and type <code>python     --version</code>. If Python is installed, it will print out the version     number. If it is version <code>3.10.*</code> or <code>3.11.*</code> you meet     requirements.</p> <p>What to do if you have an unsupported version</p> <p>Go to Python Downloads and download the appropriate installer package for your platform. We recommend Version 3.10.12, which has been extensively tested with InvokeAI.</p> <p>Please select your platform in the section below for platform-specific setup requirements.</p> WindowsLinuxMac <p>During the Python configuration process, look out for a checkbox to add Python to your PATH and select it. If the install script complains that it can't find python, then open the Python installer again and choose \"Modify\" existing installation.</p> <p>Installation requires an up to date version of the Microsoft Visual C libraries. Please install the 2015-2022 libraries available here: https://learn.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist?view=msvc-170</p> <p>Please double-click on the file <code>WinLongPathsEnabled.reg</code> and accept the dialog box that asks you if you wish to modify your registry. This activates long filename support on your system and will prevent mysterious errors during installation.</p> <p>To install an appropriate version of Python on Ubuntu 22.04  and higher, run the following:</p> <pre><code>sudo apt update\nsudo apt install -y python3 python3-pip python3-venv\nsudo update-alternatives --install /usr/local/bin/python python /usr/bin/python3.10 3\n</code></pre> <p>On Ubuntu 20.04, the process is slightly different:</p> <pre><code>sudo apt update\nsudo apt install -y software-properties-common\nsudo add-apt-repository -y ppa:deadsnakes/ppa\nsudo apt install -y python3.10 python3-pip python3.10-venv\nsudo update-alternatives --install /usr/local/bin/python python /usr/bin/python3.10 3\n</code></pre> <p>Both <code>python</code> and <code>python3</code> commands are now pointing at  Python3.10. You can still access older versions of Python by  calling <code>python2</code>, <code>python3.8</code>, etc.</p> <p>Linux systems require a couple of additional graphics  libraries to be installed for proper functioning of  <code>python3-opencv</code>. Please run the following:</p> <p><code>sudo apt update &amp;&amp; sudo apt install -y libglib2.0-0 libgl1-mesa-glx</code></p> <p>After installing Python, you may need to run the following command from the Terminal in order to install the Web certificates needed to download model data from https sites. If you see lots of CERTIFICATE ERRORS during the last part of the install, this is the problem, and you can fix it with this command:</p> <pre><code>`/Applications/Python\\ 3.10/Install\\ Certificates.command`\n</code></pre> <p>You may need to install the Xcode command line tools. These are a set of tools that are needed to run certain applications in a Terminal, including InvokeAI. This package is provided directly by Apple. To install, open a terminal window and run <code>xcode-select --install</code>. You will get a macOS system popup guiding you through the install. If you already have them installed, you will instead see some output in the Terminal advising you that the tools are already installed. More information can be found at FreeCode Camp</p> </li> <li> <p>Download the Installer: The InvokeAI installer is distributed as a ZIP files. Go to the     latest release,     and look for a file named:</p> <ul> <li>InvokeAI-installer-v3.X.X.zip</li> </ul> <p>where \"3.X.X\" is the latest released version. The file is located at the very bottom of the release page, under Assets.</p> </li> <li> <p>Unpack the installer: Unpack the zip file into a convenient directory. This will create a new     directory named \"InvokeAI-Installer\". When unpacked, the directory     will look like this:</p> <p> </p> </li> <li> <p>Launch the installer script from the desktop: If you are using a desktop GUI, double-click the installer file     appropriate for your platform. It will be named <code>install.bat</code> on     Windows systems and <code>install.sh</code> on Linux and Macintosh     systems. Be aware that your system's file browser may suppress the     display of the file extension.</p> <p>On Windows systems if you get an \"Untrusted Publisher\" warning. Click on \"More Info\" and then select \"Run Anyway.\" You trust us, right?</p> </li> <li> <p>[Alternative] Launch the installer script from the command line: Alternatively, from the command line, run the shell script or .bat file:</p> <pre><code>C:\\Documents\\Linco&gt; cd InvokeAI-Installer\nC:\\Documents\\Linco\\invokeAI&gt; .\\install.bat\n</code></pre> </li> <li> <p>Select the location to install InvokeAI: The script will ask you to choose where to install InvokeAI. Select a     directory with at least 18G of free space for a full install. InvokeAI and     all its support files will be installed into a new directory named     <code>invokeai</code> located at the location you specify.</p> <p> </p> <ul> <li>The default is to install the <code>invokeai</code> directory in your home directory,   usually <code>C:\\Users\\YourName\\invokeai</code> on Windows systems,   <code>/home/YourName/invokeai</code> on Linux systems, and <code>/Users/YourName/invokeai</code>   on Macintoshes, where \"YourName\" is your login name.</li> </ul> <p>-If you have previously installed InvokeAI, you will be asked to  confirm whether you want to reinstall into this directory.  You  may choose to reinstall, in which case your version will be upgraded,  or choose a different directory.</p> <ul> <li>The script uses tab autocompletion to suggest directory path completions.   Type part of the path (e.g. \"C:\\Users\") and press Tab repeatedly   to suggest completions.</li> </ul> </li> <li> <p>Select your GPU: The installer will autodetect your platform and will request you to     confirm the type of GPU your graphics card has. On Linux systems,     you will have the choice of CUDA (NVidia cards), ROCm (AMD cards),     or CPU (no graphics acceleration). On Windows, you'll have the     choice of CUDA vs CPU, and on Macs you'll be offered CPU only. When     you select CPU on M1/M2/M3 Macintoshes, you will get MPS-based     graphics acceleration without installing additional drivers. If you     are unsure what GPU you are using, you can ask the installer to     guess.</p> </li> <li> <p>Watch it go!: Sit back and let the install script work. It will install the third-party     libraries needed by InvokeAI and the application itself.</p> <p>Be aware that some of the library download and install steps take a long time. In particular, the <code>pytorch</code> package is quite large and often appears to get \"stuck\" at 99.9%. Have patience and the installation step will eventually resume. However, there are occasions when the library install does legitimately get stuck. If you have been waiting for more than ten minutes and nothing is happening, you can interrupt the script with ^C. You may restart it and it will pick up where it left off.</p> <p> </p> </li> <li> <p>Post-install Configuration: After installation completes, the     installer will launch the configuration form, which will guide you     through the first-time process of adjusting some of InvokeAI's     startup settings. To move around this form use ctrl-N for     &lt;N&gt;ext and ctrl-P for &lt;P&gt;revious, or use &lt;tab&gt;     and shift-&lt;tab&gt; to move forward and back. Once you are in a     multi-checkbox field use the up and down cursor keys to select the     item you want, and &lt;space&gt; to toggle it on and off.  Within     a directory field, pressing &lt;tab&gt; will provide autocomplete     options.</p> <p>Generally the defaults are fine, and you can come back to this screen at any time to tweak your system. Here are the options you can adjust:</p> <ul> <li> <p>HuggingFace Access Token   InvokeAI has the ability to download embedded styles and subjects   from the HuggingFace Concept Library on-demand. However, some of   the concept library files are password protected. To make download   smoother, you can set up an account at huggingface.co, obtain an   access token, and paste it into this field. Note that you paste   to this screen using ctrl-shift-V</p> </li> <li> <p>Free GPU memory after each generation     This is useful for low-memory machines and helps minimize the amount of GPU VRAM used by InvokeAI.</p> </li> <li> <p>Enable xformers support if available     If the xformers library was successfully installed, this will activate it to reduce memory consumption and increase rendering speed noticeably. Note that xformers has the side effect of generating slightly different images even when presented with the same seed and other settings.</p> </li> <li> <p>Force CPU to be used on GPU systems     This will use the (slow) CPU rather than the accelerated GPU. This can be used to generate images on systems that don't have a compatible GPU.</p> </li> <li> <p>Precision     This controls whether to use float32 or float16 arithmetic. float16 uses less memory but is also slightly less accurate. Ordinarily the right arithmetic is picked automatically (\"auto\"), but you may have to use float32 to get images on certain systems and graphics cards. The \"autocast\" option is deprecated and shouldn't be used unless you are asked to by a member of the team.</p> </li> <li> <p>Size of the RAM cache used for fast model switching*     This allows you to keep models in memory and switch rapidly among them rather than having them load from disk each time. This slider controls how many models to keep loaded at once. A typical SD-1 or SD-2 model uses 2-3 GB of memory. A typical SDXL model uses 6-7 GB. Providing more RAM will allow more models to be co-resident.</p> </li> <li> <p>Output directory for images   This is the path to a directory in which InvokeAI will store all its   generated images.</p> </li> <li> <p>Autoimport Folder   This is the directory in which you can place models you have   downloaded and wish to load into InvokeAI. You can place a variety   of models in this directory, including diffusers folders, .ckpt files,   .safetensors files, as well as LoRAs, ControlNet and Textual Inversion   files (both folder and file versions). To help organize this folder,   you can create several levels of subfolders and drop your models into   whichever ones you want.</p> </li> <li> <p>LICENSE </p> </li> </ul> <p>At the bottom of the screen you will see a checkbox for accepting the CreativeML Responsible AI Licenses. You need to accept the license in order to download Stable Diffusion models from the next screen.</p> <p>You can come back to the startup options form as many times as you like. From the <code>invoke.sh</code> or <code>invoke.bat</code> launcher, select option (6) to relaunch this script. On the command line, it is named <code>invokeai-configure</code>.</p> </li> <li> <p>Downloading Models: After you press <code>[NEXT]</code> on the screen, you will be taken     to another screen that prompts you to download a series of starter models. The ones     we recommend are preselected for you, but you are encouraged to use the checkboxes to     pick and choose.     You will probably wish to download <code>autoencoder-840000</code> for use with models that     were trained with an older version of the Stability VAE.</p> <p> </p> <p>Below the preselected list of starter models is a large text field which you can use to specify a series of models to import. You can specify models in a variety of formats, each separated by a space or newline. The formats accepted are:</p> <ul> <li> <p>The path to a .ckpt or .safetensors file. On most systems, you can drag a file from   the file browser to the textfield to automatically paste the path. Be sure to remove   extraneous quotation marks and other things that come along for the ride.</p> </li> <li> <p>The path to a directory containing a combination of <code>.ckpt</code> and <code>.safetensors</code> files.   The directory will be scanned from top to bottom (including subfolders) and any   file that can be imported will be.</p> </li> <li> <p>A URL pointing to a <code>.ckpt</code> or <code>.safetensors</code> file. You can cut   and paste directly from a web page, or simply drag the link from the web page   or navigation bar. (You can also use ctrl-shift-V to paste into this field)   The file will be downloaded and installed.</p> </li> <li> <p>The HuggingFace repository ID (repo_id) for a <code>diffusers</code> model. These IDs have    the format author_name/model_name, as in <code>andite/anything-v4.0</code></p> </li> <li> <p>The path to a local directory containing a <code>diffusers</code>   model. These directories always have the file <code>model_index.json</code>   at their top level.</p> </li> </ul> <p>Select a directory for models to import You may select a local directory for autoimporting at startup time. If you select this option, the directory you choose will be scanned for new .ckpt/.safetensors files each time InvokeAI starts up, and any new files will be automatically imported and made available for your use.</p> <p>Convert imported models into diffusers When legacy checkpoint files are imported, you may select to use them unmodified (the default) or to convert them into <code>diffusers</code> models. The latter load much faster and have slightly better rendering performance, but not all checkpoint files can be converted. Note that Stable Diffusion Version 2.X files are only supported in <code>diffusers</code> format and will be converted regardless.</p> <p>You can come back to the model install form as many times as you like.  From the <code>invoke.sh</code> or <code>invoke.bat</code> launcher, select option (5) to relaunch  this script. On the command line, it is named <code>invokeai-model-install</code>.</p> </li> <li> <p>Running InvokeAI for the first time: The script will now exit and you'll be ready to generate some images. Look     for the directory <code>invokeai</code> installed in the location you chose at the     beginning of the install session. Look for a shell script named <code>invoke.sh</code>     (Linux/Mac) or <code>invoke.bat</code> (Windows). Launch the script by double-clicking     it or typing its name at the command-line:</p> <pre><code>C:\\Documents\\Linco&gt; cd invokeai\nC:\\Documents\\Linco\\invokeAI&gt; invoke.bat\n</code></pre> <ul> <li> <p>The <code>invoke.bat</code> (<code>invoke.sh</code>) script will give you the choice   of starting (1) the command-line interface, (2) the web GUI, (3)   textual inversion training, and (4) model merging.</p> </li> <li> <p>By default, the script will launch the web interface. When you   do this, you'll see a series of startup messages ending with   instructions to point your browser at   http://localhost:9090. Click on this link to open up a browser   and start exploring InvokeAI's features.</p> </li> </ul> </li> <li> <p>InvokeAI Options: You can launch InvokeAI with several different command-line arguments that     customize its behavior. For example, you can change the location of the     image output directory or balance memory usage vs performance. See     Configuration for a full list of the options.</p> <ul> <li> <p>To set defaults that will take effect every time you launch InvokeAI,   use a text editor (e.g. Notepad) to exit the file   <code>invokeai\\invokeai.init</code>. It contains a variety of examples that you can   follow to add and modify launch options.</p> </li> <li> <p>The launcher script also offers you an option labeled \"open the developer   console\". If you choose this option, you will be dropped into a   command-line interface in which you can run python commands directly,   access developer tools, and launch InvokeAI with customized options.</p> </li> </ul> <p>Do not move or remove the <code>invokeai</code> directory</p> <p>The <code>invokeai</code> directory contains the <code>invokeai</code> application, its configuration files, the model weight files, and outputs of image generation. Once InvokeAI is installed, do not move or remove this directory.\"</p> </li> </ol> <p></p>"},{"location":"installation/010_INSTALL_AUTOMATED/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/010_INSTALL_AUTOMATED/#oserrors-on-windows-while-installing-dependencies","title":"OSErrors on Windows while installing dependencies","text":"<p>During a zip file installation or an online update, installation stops with an error like this:</p> <p></p> <p>This seems to happen particularly often with the <code>pydantic</code> and <code>numpy</code> packages. The most reliable solution requires several manual steps to complete installation.</p> <p>Open up a Powershell window and navigate to the <code>invokeai</code> directory created by the installer. Then give the following series of commands:</p> <pre><code>rm .\\.venv -r -force\npython -mvenv .venv\n.\\.venv\\Scripts\\activate\npip install invokeai\ninvokeai-configure --yes --root .\n</code></pre> <p>If you see anything marked as an error during this process please stop and seek help on the Discord installation support channel. A few warning messages are OK.</p> <p>If you are updating from a previous version, this should restore your system to a working state. If you are installing from scratch, there is one additional command to give:</p> <pre><code>wget -O invoke.bat https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/installer/templates/invoke.bat.in\n</code></pre> <p>This will create the <code>invoke.bat</code> script needed to launch InvokeAI and its related programs.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#stable-diffusion-xl-generation-fails-after-trying-to-load-unet","title":"Stable Diffusion XL Generation Fails after Trying to Load unet","text":"<p>InvokeAI is working in other respects, but when trying to generate images with Stable Diffusion XL you get a \"Server Error\". The text log in the launch window contains this log line above several more lines of error messages:</p> <p><code>INFO --&gt; Loading model:D:\\LONG\\PATH\\TO\\MODEL, type sdxl:main:unet</code></p> <p>This failure mode occurs when there is a network glitch during downloading the very large SDXL model.</p> <p>To address this, first go to the Web Model Manager and delete the Stable-Diffusion-XL-base-1.X model. Then navigate to HuggingFace and manually download the .safetensors version of the model. The 1.0 version is located at https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/tree/main and the file is named <code>sd_xl_base_1.0.safetensors</code>.</p> <p>Save this file to disk and then reenter the Model Manager. Navigate to Import Models-&gt;Add Model, then type (or drag-and-drop) the path to the .safetensors file. Press \"Add Model\".</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#package-dependency-conflicts","title":"Package dependency conflicts","text":"<p>If you have previously installed InvokeAI or another Stable Diffusion package, the installer may occasionally pick up outdated libraries and either the installer or <code>invoke</code> will fail with complaints about library conflicts. In this case, run the <code>invoke.sh</code>/<code>invoke.bat</code> command and enter the Developer's Console by picking option (5). This will take you to a command-line prompt.</p> <p>Then give this command:</p> <p><code>pip install InvokeAI --force-reinstall</code></p> <p>This should fix the issues.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#invokeai-runs-extremely-slowly-on-linux-or-windows-systems","title":"InvokeAI runs extremely slowly on Linux or Windows systems","text":"<p>The most frequent cause of this problem is when the installation process installed the CPU-only version of the torch machine-learning library, rather than a version that takes advantage of GPU acceleration. To confirm this issue, look at the InvokeAI startup messages. If you see a message saying \"&gt;&gt; Using device CPU\", then this is what happened.</p> <p>To fix this problem, first determine whether you have an NVidia or an AMD GPU. The former uses the CUDA driver, and the latter uses ROCm (only available on Linux). Then run the <code>invoke.sh</code>/<code>invoke.bat</code> command and enter the Developer's Console by picking option (5). This will take you to a command-line prompt.</p> <p>Then type the following commands:</p> NVIDIA SystemAMD System <pre><code>pip install torch torchvision --force-reinstall --extra-index-url https://download.pytorch.org/whl/cu121\npip install xformers\n</code></pre> <pre><code>pip install torch torchvision --force-reinstall --extra-index-url https://download.pytorch.org/whl/rocm5.6\n</code></pre>"},{"location":"installation/010_INSTALL_AUTOMATED/#corrupted-configuration-file","title":"Corrupted configuration file","text":"<p>Everything seems to install ok, but <code>invokeai</code> complains of a corrupted configuration file and goes back into the configuration process (asking you to download models, etc), but this doesn't fix the problem.</p> <p>This issue is often caused by a misconfigured configuration directive in the <code>invokeai\\invokeai.init</code> initialization file that contains startup settings. The easiest way to fix the problem is to move the file out of the way and re-run <code>invokeai-configure</code>. Enter the developer's console (option 3 of the launcher script) and run this command:</p> <pre><code>invokeai-configure --root=.\n</code></pre> <p>Note the dot (.) after <code>--root</code>. It is part of the command.</p> <p>If none of these maneuvers fixes the problem then please report the problem to the InvokeAI Issues section, or visit our Discord Server for interactive assistance.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#out-of-memory-issues","title":"Out of Memory Issues","text":"<p>The models are large, VRAM is expensive, and you may find yourself faced with Out of Memory errors when generating images. Here are some tips to reduce the problem:</p> <ul> <li>4 GB of VRAM</li> </ul> <p>This should be adequate for 512x512 pixel images using Stable Diffusion 1.5 and derived models, provided that you disable the NSFW checker. To disable the filter, do one of the following:</p> <ul> <li>Select option (6) \"change InvokeAI startup options\" from the      launcher. This will bring up the console-based startup settings      dialogue and allow you to unselect the \"NSFW Checker\" option.</li> <li>Start the startup settings dialogue directly by running      <code>invokeai-configure --skip-sd-weights --skip-support-models</code>      from the command line.</li> <li>Find the <code>invokeai.init</code> initialization file in the InvokeAI root      directory, open it in a text editor, and change <code>--nsfw_checker</code>      to <code>--no-nsfw_checker</code></li> </ul> <p>If you are on a CUDA system, you can realize significant memory savings by activating the <code>xformers</code> library as described above. The downside is <code>xformers</code> introduces non-deterministic behavior, such that images generated with exactly the same prompt and settings will be slightly different from each other. See above for more information.</p> <ul> <li>6 GB of VRAM</li> </ul> <p>This is a border case. Using the SD 1.5 series you should be able to generate images up to 640x640 with the NSFW checker enabled, and up to 1024x1024 with it disabled and <code>xformers</code> activated. </p> <p>If you run into persistent memory issues there are a series of environment variables that you can set before launching InvokeAI that alter how the PyTorch machine learning library manages memory.  See https://pytorch.org/docs/stable/notes/cuda.html#memory-management for a list of these tweaks.</p> <ul> <li>12 GB of VRAM</li> </ul> <p>This should be sufficient to generate larger images up to about 1280x1280. If you wish to push further, consider activating <code>xformers</code>.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#other-problems","title":"Other Problems","text":"<p>If you run into problems during or after installation, the InvokeAI team is available to help you. Either create an Issue at our GitHub site, or make a request for help on the \"bugs-and-support\" channel of our Discord server. We are a 100% volunteer organization, but typically somebody will be available to help you within 24 hours, and often much sooner.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#updating-to-newer-versions","title":"Updating to newer versions","text":"<p>This distribution is changing rapidly, and we add new features regularly. Releases are announced at http://github.com/invoke-ai/InvokeAI/releases, and at https://pypi.org/project/InvokeAI/ To update to the latest released version (recommended), follow these steps:</p> <ol> <li> <p>Start the <code>invoke.sh</code>/<code>invoke.bat</code> launch script from within the    <code>invokeai</code> root directory.</p> </li> <li> <p>Choose menu item (10) \"Update InvokeAI\".</p> </li> <li> <p>This will launch a menu that gives you the option of:</p> </li> <li> <p>Updating to the latest official release;</p> </li> <li>Updating to the bleeding-edge development version; or</li> <li>Manually entering the tag or branch name of a version of       InvokeAI you wish to try out.</li> </ol>"},{"location":"installation/020_INSTALL_MANUAL/","title":"Installing Manually","text":"<p>This is for Advanced Users</p> <p>Python experience is mandatory</p>"},{"location":"installation/020_INSTALL_MANUAL/#linux-macos-windows","title":"Linux |  macOS |  Windows","text":""},{"location":"installation/020_INSTALL_MANUAL/#introduction","title":"Introduction","text":"<p>Conda</p> <p>As of InvokeAI v2.3.0 installation using the <code>conda</code> package manager is no longer being supported. It will likely still work, but we are not testing this installation method.</p> <p>On Windows systems, you are encouraged to install and use the PowerShell, which provides compatibility with Linux and Mac shells and nice features such as command-line completion.</p>"},{"location":"installation/020_INSTALL_MANUAL/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have the following preqrequisites installed.  These are described in more detail in Automated Installation, and in many cases will already be installed (if, for example, you have used your system for gaming):</p> <ul> <li> <p>Python</p> <p>version 3.10 through 3.11</p> </li> <li> <p>CUDA Tools</p> <p>For those with NVidia GPUs, you will need to install the CUDA toolkit and optionally the XFormers library.</p> </li> <li> <p>ROCm Tools</p> <p>For Linux users with AMD GPUs, you will need to install the ROCm toolkit. Note that InvokeAI does not support AMD GPUs on Windows systems due to lack of a Windows ROCm library.</p> </li> <li> <p>Visual C++ Libraries</p> <p>Windows users must install the free Visual C++ libraries from Microsoft</p> </li> <li> <p>The Xcode command line tools</p> <p>for Macintosh users. Instructions are available at Free Code Camp</p> <ul> <li>Macintosh users may also need to run the <code>Install Certificates</code> command   if model downloads give lots of certificate errors. Run:   <code>/Applications/Python\\ 3.10/Install\\ Certificates.command</code></li> </ul> </li> </ul>"},{"location":"installation/020_INSTALL_MANUAL/#installation-walkthrough","title":"Installation Walkthrough","text":"<p>To install InvokeAI with virtual environments and the PIP package manager, please follow these steps:</p> <ol> <li> <p>Please make sure you are using Python 3.10 through 3.11. The rest of the install     procedure depends on this and will not work with other versions:</p> <pre><code>python -V\n</code></pre> </li> <li> <p>Create a directory to contain your InvokeAI library, configuration     files, and models. This is known as the \"runtime\" or \"root\"     directory, and often lives in your home directory under the name <code>invokeai</code>.</p> <p>Please keep in mind the disk space requirements - you will need at least 20GB for the models and the virtual environment.  From now on we will refer to this directory as <code>INVOKEAI_ROOT</code>. For convenience, the steps below create a shell variable of that name which contains the path to <code>HOME/invokeai</code>.</p> Linux/MacWindows (Powershell) <pre><code>export INVOKEAI_ROOT=~/invokeai\nmkdir $INVOKEAI_ROOT\n</code></pre> <pre><code>Set-Variable -Name INVOKEAI_ROOT -Value $Home/invokeai\nmkdir $INVOKEAI_ROOT\n</code></pre> </li> <li> <p>Enter the root (invokeai) directory and create a virtual Python    environment within it named <code>.venv</code>. If the command <code>python</code>    doesn't work, try <code>python3</code>. Note that while you may create the    virtual environment anywhere in the file system, we recommend that    you create it within the root directory as shown here. This makes    it possible for the InvokeAI applications to find the model data    and configuration. If you do not choose to install the virtual    environment inside the root directory, then you must set the    <code>INVOKEAI_ROOT</code> environment variable in your shell environment, for    example, by editing <code>~/.bashrc</code> or <code>~/.zshrc</code> files, or setting the    Windows environment variable using the Advanced System Settings dialogue.    Refer to your operating system documentation for details.</p> <pre><code>cd $INVOKEAI_ROOT\npython -m venv .venv --prompt InvokeAI\n</code></pre> </li> <li> <p>Activate the new environment:</p> Linux/MacWindows <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate\n</code></pre> <p>If you get a permissions error at this point, run this command and try again</p> <p><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code></p> <p>The command-line prompt should change to to show <code>(InvokeAI)</code> at the beginning of the prompt. Note that all the following steps should be run while inside the INVOKEAI_ROOT directory</p> </li> <li> <p>Make sure that pip is installed in your virtual environment and up to date:</p> <pre><code>python -m pip install --upgrade pip\n</code></pre> </li> <li> <p>Install the InvokeAI Package. The <code>--extra-index-url</code> option is used to select among    CUDA, ROCm and CPU/MPS drivers as shown below:</p> CUDA (NVidia)ROCm (AMD)CPU (Intel Macs &amp; non-GPU systems)MPS (M1 and M2 Macs) <pre><code>pip install \"InvokeAI[xformers]\" --use-pep517 --extra-index-url https://download.pytorch.org/whl/cu121\n</code></pre> <pre><code>pip install InvokeAI --use-pep517 --extra-index-url https://download.pytorch.org/whl/rocm5.6\n</code></pre> <pre><code>pip install InvokeAI --use-pep517 --extra-index-url https://download.pytorch.org/whl/cpu\n</code></pre> <pre><code>pip install InvokeAI --use-pep517\n</code></pre> </li> <li> <p>Deactivate and reactivate your runtime directory so that the invokeai-specific commands     become available in the environment</p> Linux/MacintoshWindows <pre><code>deactivate &amp;&amp; source .venv/bin/activate\n</code></pre> <pre><code>deactivate\n.venv\\Scripts\\activate\n</code></pre> </li> <li> <p>Set up the runtime directory</p> <p>In this step you will initialize your runtime directory with the downloaded models, model config files, directory for textual inversion embeddings, and your outputs.</p> <pre><code>invokeai-configure --root .\n</code></pre> <p>Don't miss the dot at the end of the command!</p> <p>The script <code>invokeai-configure</code> will interactively guide you through the process of downloading and installing the weights files needed for InvokeAI. Note that the main Stable Diffusion weights file is protected by a license agreement that you have to agree to. The script will list the steps you need to take to create an account on the site that hosts the weights files, accept the agreement, and provide an access token that allows InvokeAI to legally download and install the weights files.</p> <p>If you get an error message about a module not being installed, check that the <code>invokeai</code> environment is active and if not, repeat step 5.</p> <p>Tip</p> <p>If you have already downloaded the weights file(s) for another Stable Diffusion distribution, you may skip this step (by selecting \"skip\" when prompted) and configure InvokeAI to use the previously-downloaded files. The process for this is described in Installing Models.</p> </li> <li> <p>Run the command-line- or the web- interface:</p> <p>From within INVOKEAI_ROOT, activate the environment (with <code>source .venv/bin/activate</code> or <code>.venv\\scripts\\activate</code>), and then run the script <code>invokeai</code>. If the virtual environment you selected is NOT inside INVOKEAI_ROOT, then you must specify the path to the root directory by adding <code>--root_dir \\path\\to\\invokeai</code> to the commands below:</p> <p>Make sure that the virtual environment is activated, which should create <code>(.venv)</code> in front of your prompt!</p> local WebserverPublic WebserverCLI <pre><code>invokeai-web\n</code></pre> <pre><code>invokeai-web --host 0.0.0.0\n</code></pre> <pre><code>invokeai\n</code></pre> <p>If you choose the run the web interface, point your browser at http://localhost:9090 in order to load the GUI.</p> <p>Tip</p> <p>You can permanently set the location of the runtime directory by setting the environment variable <code>INVOKEAI_ROOT</code> to the path of the directory. As mentioned previously, this is highly recommended* if your virtual environment is located outside of your runtime directory.</p> <p>Tip</p> <p>On linux, it is recommended to run invokeai with the following env var: <code>MALLOC_MMAP_THRESHOLD_=1048576</code>. For example: <code>MALLOC_MMAP_THRESHOLD_=1048576 invokeai --web</code>. This helps to prevent memory fragmentation that can lead to memory accumulation over time. This env var is set automatically when running via <code>invoke.sh</code>.</p> </li> <li> <p>Render away!</p> <p>Browse the features section to learn about all the things you can do with InvokeAI.</p> </li> <li> <p>Subsequently, to relaunch the script, activate the virtual environment, and     then launch <code>invokeai</code> command. If you forget to activate the virtual     environment you will most likeley receive a <code>command not found</code> error.</p> <p>Warning</p> <p>Do not move the runtime directory after installation. The virtual environment will get confused if the directory is moved.</p> </li> <li> <p>Other scripts</p> <p>The Textual Inversion script can be launched with the command:</p> <pre><code>invokeai-ti --gui\n</code></pre> <p>Similarly, the Model Merging script can be launched with the command:</p> <pre><code>invokeai-merge --gui\n</code></pre> <p>Leave off the <code>--gui</code> option to run the script using command-line arguments. Pass the <code>--help</code> argument to get usage instructions.</p> </li> </ol>"},{"location":"installation/020_INSTALL_MANUAL/#developer-install","title":"Developer Install","text":"<p>Warning</p> <p>InvokeAI uses a SQLite database. By running on <code>main</code>, you accept responsibility for your database. This means making regular backups (especially before pulling) and/or fixing it yourself in the event that a PR introduces a schema change.</p> <p>If you don't need persistent backend storage, you can use an ephemeral in-memory database by setting <code>use_memory_db: true</code> under <code>Path:</code> in your <code>invokeai.yaml</code> file.</p> <p>If this is untenable, you should run the application via the official installer or a manual install of the python package from pypi. These releases will not break your database.</p> <p>If you have an interest in how InvokeAI works, or you would like to add features or bugfixes, you are encouraged to install the source code for InvokeAI. For this to work, you will need to install the <code>git</code> source code management program. If it is not already installed on your system, please see the Git Installation Guide</p> <p>You will also need to install the frontend development toolchain.</p> <p>If you have a \"normal\" installation, you should create a totally separate virtual environment for the git-based installation, else the two may interfere.</p> <p>Why do I need the frontend toolchain?</p> <p>The InvokeAI project uses trunk-based development. That means our <code>main</code> branch is the development branch, and releases are tags on that branch. Because development is very active, we don't keep an updated build of the UI in <code>main</code> - we only build it for production releases.</p> <p>That means that between releases, to have a functioning application when running directly from the repo, you will need to run the UI in dev mode or build it regularly (any time the UI code changes).</p> <ol> <li>Create a fork of the InvokeAI repository through the GitHub UI or this link </li> <li> <p>From the command line, run this command:    <pre><code>git clone https://github.com/&lt;your_github_username&gt;/InvokeAI.git\n</code></pre></p> <p>This will create a directory named <code>InvokeAI</code> and populate it with the full source code from your fork of the InvokeAI repository.</p> </li> <li> <p>Activate the InvokeAI virtual environment as per step (4) of the manual installation protocol (important!)</p> </li> <li> <p>Enter the InvokeAI repository directory and run one of these    commands, based on your GPU:</p> CUDA (NVidia)ROCm (AMD)CPU (Intel Macs &amp; non-GPU systems)MPS (M1 and M2 Macs) <pre><code>pip install -e .[xformers] --use-pep517 --extra-index-url https://download.pytorch.org/whl/cu121\n</code></pre> <pre><code>pip install -e . --use-pep517 --extra-index-url https://download.pytorch.org/whl/rocm5.6\n</code></pre> <pre><code>pip install -e . --use-pep517 --extra-index-url https://download.pytorch.org/whl/cpu\n</code></pre> <pre><code>pip install -e . --use-pep517\n</code></pre> <p>Be sure to pass <code>-e</code> (for an editable install) and don't forget the dot (\".\"). It is part of the command.</p> </li> <li> <p>Install the frontend toolchain and do a production build of the UI as described.</p> </li> <li> <p>You can now run <code>invokeai</code> and its related commands. The code will be     read from the repository, so that you can edit the .py source files     and watch the code's behavior change.</p> <p>When you pull in new changes to the repo, be sure to re-build the UI.</p> </li> <li> <p>If you wish to contribute to the InvokeAI project, you are     encouraged to establish a GitHub account and \"fork\"     https://github.com/invoke-ai/InvokeAI into your own copy of the     repository. You can then use GitHub functions to create and submit     pull requests to contribute improvements to the project.</p> <p>Please see Contributing for hints on getting started.</p> </li> </ol>"},{"location":"installation/020_INSTALL_MANUAL/#unsupported-conda-install","title":"Unsupported Conda Install","text":"<p>Congratulations, you found the \"secret\" Conda installation instructions. If you really really want to use Conda with InvokeAI you can do so using this unsupported recipe:</p> <pre><code>mkdir ~/invokeai\nconda create -n invokeai python=3.10\nconda activate invokeai\npip install InvokeAI[xformers] --use-pep517 --extra-index-url https://download.pytorch.org/whl/cu121\ninvokeai-configure --root ~/invokeai\ninvokeai --root ~/invokeai --web\n</code></pre> <p>The <code>pip install</code> command shown in this recipe is for Linux/Windows systems with an NVIDIA GPU. See step (6) above for the command to use with other platforms/GPU combinations. If you don't wish to pass the <code>--root</code> argument to <code>invokeai</code> with each launch, you may set the environment variable INVOKEAI_ROOT to point to the installation directory.</p> <p>Note that if you run into problems with the Conda installation, the InvokeAI staff will not be able to help you out. Caveat Emptor!</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/","title":"NVIDIA Cuda / AMD ROCm","text":"<p>In order for InvokeAI to run at full speed, you will need a graphics card with a supported GPU. InvokeAI supports NVidia cards via the CUDA driver on Windows and Linux, and AMD cards via the ROCm driver on Linux.</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#cuda-rocm","title":"CUDA |  ROCm","text":""},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#cuda","title":"CUDA","text":""},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#linux-and-windows-install","title":"Linux and Windows Install","text":"<p>If you have used your system for other graphics-intensive tasks, such as gaming, you may very well already have the CUDA drivers installed. To confirm, open up a command-line window and type:</p> <pre><code>nvidia-smi\n</code></pre> <p>If this command produces a status report on the GPU(s) installed on your system, CUDA is installed and you have no more work to do. If instead you get \"command not found\", or similar, then the driver will need to be installed.</p> <p>We strongly recommend that you install the CUDA Toolkit package directly from NVIDIA. Do not try to install Ubuntu's nvidia-cuda-toolkit package. It is out of date and will cause conflicts among the NVIDIA driver and binaries.</p> <p>Go to CUDA Toolkit Downloads, and use the target selection wizard to choose your operating system, hardware platform, and preferred installation method (e.g. \"local\" versus \"network\").</p> <p>This will provide you with a downloadable install file or, depending on your choices, a recipe for downloading and running a install shell script. Be sure to read and follow the full installation instructions.</p> <p>After an install that seems successful, you can confirm by again running <code>nvidia-smi</code> from the command line.</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#linux-install-with-a-runtime-container","title":"Linux Install with a Runtime Container","text":"<p>On Linux systems, an alternative to installing CUDA Toolkit directly on your system is to run an NVIDIA software container that has the CUDA libraries already in place. This is recommended if you are already  familiar with containerization technologies such as Docker.</p> <p>For downloads and instructions, visit the NVIDIA CUDA Container Runtime Site</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#cudnn-installation-for-4030-series-optimization-optional","title":"cuDNN Installation for 40/30 Series Optimization* (Optional)","text":"<ol> <li>Find the InvokeAI folder</li> <li>Click on .venv folder - e.g., YourInvokeFolderHere\\.venv</li> <li>Click on Lib folder - e.g., YourInvokeFolderHere\\.venv\\Lib</li> <li>Click on site-packages folder - e.g., YourInvokeFolderHere\\.venv\\Lib\\site-packages</li> <li>Click on Torch directory - e.g., YourInvokeFolderHere\\InvokeAI\\.venv\\Lib\\site-packages\\torch</li> <li>Click on the lib folder - e.g., YourInvokeFolderHere\\.venv\\Lib\\site-packages\\torch\\lib</li> <li>Copy everything inside the folder and save it elsewhere as a backup.</li> <li>Go to https://developer.nvidia.com/cudnn</li> <li>Login or create an Account. </li> <li>Choose the newer version of cuDNN. Note:  There are two versions, 11.x or 12.x for the differents architectures(Turing,Maxwell Etc...) of GPUs. You can find which version you should download from this link.</li> <li>Download the latest version and extract it from the download location</li> <li>Find the bin folder E\\cudnn-windows-x86_64-Whatever Version\\bin</li> <li>Copy and paste the .dll files into YourInvokeFolderHere\\.venv\\Lib\\site-packages\\torch\\lib Make sure to copy, and not move the files</li> <li>If prompted, replace any existing files </li> </ol> <p>Notes:  * If no change is seen or any issues are encountered, follow the same steps as above and paste the torch/lib backup folder you made earlier and replace it. If you didn't make a backup, you can also uninstall and reinstall torch through the command line to repair this folder.  * This optimization is  intended for the newer version of graphics card (40/30 series) but results have been seen with older graphics card.</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#torch-installation","title":"Torch Installation","text":"<p>When installing torch and torchvision manually with <code>pip</code>, remember to provide the argument <code>--extra-index-url https://download.pytorch.org/whl/cu121</code> as described in the Manual Installation Guide.</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#rocm","title":"ROCm","text":""},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#linux-install","title":"Linux Install","text":"<p>AMD GPUs are only supported on Linux platforms due to the lack of a Windows ROCm driver at the current time. Also be aware that support for newer AMD GPUs is spotty. Your mileage may vary.</p> <p>It is possible that the ROCm driver is already installed on your machine. To test, open up a terminal window and issue the following command:</p> <pre><code>rocm-smi\n</code></pre> <p>If you get a table labeled \"ROCm System Management Interface\" the driver is installed and you are done. If you get \"command not found,\" then the driver needs to be installed.</p> <p>Go to AMD's ROCm Downloads Guide and scroll to the Installation Methods section. Find the subsection for the install method for your preferred Linux distribution, and issue the commands given in the recipe.</p> <p>Annoyingly, the official AMD site does not have a recipe for the most recent version of Ubuntu, 22.04. However, this community-contributed recipe is reported to work well.</p> <p>After installation, please run <code>rocm-smi</code> a second time to confirm that the driver is present and the GPU is recognized. You may need to do a reboot in order to load the driver.</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#linux-install-with-a-rocm-docker-container","title":"Linux Install with a ROCm-docker Container","text":"<p>If you are comfortable with the Docker containerization system, then you can build a ROCm docker file. The source code and installation recipes are available Here</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#torch-installation_1","title":"Torch Installation","text":"<p>When installing torch and torchvision manually with <code>pip</code>, remember to provide the argument <code>--extra-index-url https://download.pytorch.org/whl/rocm5.6</code> as described in the Manual Installation Guide.</p> <p>This will be done automatically for you if you use the installer script.</p> <p>Be aware that the torch machine learning library does not seamlessly interoperate with all AMD GPUs and you may experience garbled images, black images, or long startup delays before rendering commences. Most of these issues can be solved by Googling for workarounds. If you have a problem and find a solution, please post an Issue so that other users benefit and we can update this document.</p>"},{"location":"installation/040_INSTALL_DOCKER/","title":"Docker","text":"<p>macOS and AMD GPU Users</p> <p>We highly recommend to Install InvokeAI locally using these instructions, because Docker containers can not access the GPU on macOS.</p> <p>AMD GPU Users</p> <p>Container support for AMD GPUs has been reported to work by the community, but has not received extensive testing. Please make sure to set the <code>GPU_DRIVER=rocm</code> environment variable (see below), and use the <code>build.sh</code> script to build the image for this to take effect at build time.</p> <p>Linux and Windows Users</p> <p>For optimal performance, configure your Docker daemon to access your machine's GPU. Docker Desktop on Windows includes GPU support. Linux users should install and configure the NVIDIA Container Toolkit</p>"},{"location":"installation/040_INSTALL_DOCKER/#why-containers","title":"Why containers?","text":"<p>They provide a flexible, reliable way to build and deploy InvokeAI. See Processes under the Twelve-Factor App methodology for details on why running applications in such a stateless fashion is important.</p> <p>The container is configured for CUDA by default, but can be built to support AMD GPUs by setting the <code>GPU_DRIVER=rocm</code> environment variable at Docker image build time.</p> <p>Developers on Apple silicon (M1/M2/M3): You can't access your GPU cores from Docker containers and performance is reduced compared with running it directly on macOS but for development purposes it's fine. Once you're done with development tasks on your laptop you can build for the target platform and architecture and deploy to another environment with NVIDIA GPUs on-premises or in the cloud.</p>"},{"location":"installation/040_INSTALL_DOCKER/#tldr","title":"TL;DR","text":"<p>This assumes properly configured Docker on Linux or Windows/WSL2. Read on for detailed customization options.</p> <pre><code>```bash\n# docker compose commands should be run from the `docker` directory\ncd docker\ndocker compose up\n```\n</code></pre>"},{"location":"installation/040_INSTALL_DOCKER/#installation-in-a-linux-container-desktop","title":"Installation in a Linux container (desktop)","text":""},{"location":"installation/040_INSTALL_DOCKER/#prerequisites","title":"Prerequisites","text":""},{"location":"installation/040_INSTALL_DOCKER/#install-docker","title":"Install Docker","text":"<p>On the Docker Desktop app, go to Preferences, Resources, Advanced. Increase the CPUs and Memory to avoid this Issue. You may need to increase Swap and Disk image size too.</p>"},{"location":"installation/040_INSTALL_DOCKER/#get-a-huggingface-token","title":"Get a Huggingface-Token","text":"<p>Besides the Docker Agent you will need an Account on huggingface.co.</p> <p>After you succesfully registered your account, go to huggingface.co/settings/tokens, create a token and copy it, since you will need in for the next step.</p>"},{"location":"installation/040_INSTALL_DOCKER/#setup","title":"Setup","text":"<p>Set up your environmnent variables. In the <code>docker</code> directory, make a copy of <code>.env.sample</code> and name it <code>.env</code>. Make changes as necessary.</p> <p>Any environment variables supported by InvokeAI can be set here - please see the CONFIGURATION for further detail.</p> <p>At a minimum, you might want to set the <code>INVOKEAI_ROOT</code> environment variable to point to the location where you wish to store your InvokeAI models, configuration, and outputs.</p> Environment-Variable  Default value  Description <code>INVOKEAI_ROOT</code> <code>~/invokeai</code> Required - the location of your InvokeAI root directory. It will be created if it does not exist. <code>HUGGING_FACE_HUB_TOKEN</code> InvokeAI will work without it, but some of the integrations with HuggingFace (like downloading from models from private repositories) may not work <code>GPU_DRIVER</code> <code>cuda</code> Optionally change this to <code>rocm</code> to build the image for AMD GPUs. NOTE: Use the <code>build.sh</code> script to build the image for this to take effect."},{"location":"installation/040_INSTALL_DOCKER/#build-the-image","title":"Build the Image","text":"<p>Use the standard <code>docker compose build</code> command from within the <code>docker</code> directory.</p> <p>If using an AMD GPU:     a: set the <code>GPU_DRIVER=rocm</code> environment variable in <code>docker-compose.yml</code> and continue using <code>docker compose build</code> as usual, or     b: set <code>GPU_DRIVER=rocm</code> in the <code>.env</code> file and use the <code>build.sh</code> script, provided for convenience</p>"},{"location":"installation/040_INSTALL_DOCKER/#run-the-container","title":"Run the Container","text":"<p>Use the standard <code>docker compose up</code> command, and generally the <code>docker compose</code> CLI as usual.</p> <p>Once the container starts up (and configures the InvokeAI root directory if this is a new installation), you can access InvokeAI at http://localhost:9090</p>"},{"location":"installation/040_INSTALL_DOCKER/#troubleshooting-faq","title":"Troubleshooting / FAQ","text":"<ul> <li>Q: I am running on Windows under WSL2, and am seeing a \"no such file or directory\" error.</li> <li>A: Your <code>docker-entrypoint.sh</code> file likely has Windows (CRLF) as opposed to Unix (LF) line endings,     and you may have cloned this repository before the issue was fixed. To solve this, please change     the line endings in the <code>docker-entrypoint.sh</code> file to <code>LF</code>. You can do this in VSCode     (<code>Ctrl+P</code> and search for \"line endings\"), or by using the <code>dos2unix</code> utility in WSL.     Finally, you may delete <code>docker-entrypoint.sh</code> followed by  <code>git pull; git checkout docker/docker-entrypoint.sh</code>     to reset the file to its most recent version.     For more information on this issue, please see the Docker Desktop documentation</li> </ul>"},{"location":"installation/050_INSTALLING_MODELS/","title":"Installing Models","text":""},{"location":"installation/050_INSTALLING_MODELS/#checkpoint-and-diffusers-models","title":"Checkpoint and Diffusers Models","text":"<p>The model checkpoint files ('*.ckpt') are the Stable Diffusion \"secret sauce\". They are the product of training the AI on millions of captioned images gathered from multiple sources.</p> <p>Originally there was only a single Stable Diffusion weights file, which many people named <code>model.ckpt</code>. Now there are dozens or more that have been fine tuned to provide particulary styles, genres, or other features. In addition, there are several new formats that improve on the original checkpoint format: a <code>.safetensors</code> format which prevents malware from masquerading as a model, and <code>diffusers</code> models, the most recent innovation.</p> <p>InvokeAI supports all three formats but strongly prefers the <code>diffusers</code> format. These are distributed as directories containing multiple subfolders, each of which contains a different aspect of the model. The advantage of this is that the models load from disk really fast. Another advantage is that <code>diffusers</code> models are supported by a large and active set of open source developers working at and with HuggingFace organization, and improvements in both rendering quality and performance are being made at a rapid pace. Among other features is the ability to download and install a <code>diffusers</code> model just by providing its HuggingFace repository ID.</p> <p>While InvokeAI will continue to support <code>.ckpt</code> and <code>.safetensors</code> models for the near future, these are deprecated and support will likely be withdrawn at some point in the not-too-distant future.</p> <p>This manual will guide you through installing and configuring model weight files and converting legacy <code>.ckpt</code> and <code>.safetensors</code> files into performant <code>diffusers</code> models.</p>"},{"location":"installation/050_INSTALLING_MODELS/#base-models","title":"Base Models","text":"<p>InvokeAI comes with support for a good set of starter models. You'll find them listed in the master models file <code>configs/INITIAL_MODELS.yaml</code> in the InvokeAI root directory. The subset that are currently installed are found in <code>configs/models.yaml</code>.</p> <p>Note that these files are covered by an \"Ethical AI\" license which forbids certain uses. When you initially download them, you are asked to accept the license terms. In addition, some of these models carry additional license terms that limit their use in commercial applications or on public servers. Be sure to familiarize yourself with the model terms by visiting the URLs in the table above.</p>"},{"location":"installation/050_INSTALLING_MODELS/#community-contributed-models","title":"Community-Contributed Models","text":"<p>HuggingFace is a great resource for diffusers models, and is also the home of a fast-growing repository of embedding (\".bin\") models that add subjects and/or styles to your images. The latter are automatically installed on the fly when you include the text <code>&lt;concept-name&gt;</code> in your prompt. See Concepts Library for more information.</p> <p>Another popular site for community-contributed models is CIVITAI. This extensive site currently supports only <code>.safetensors</code> and <code>.ckpt</code> models, but they can be easily loaded into InvokeAI and/or converted into optimized <code>diffusers</code> models. Be aware that CIVITAI hosts many models that generate NSFW content.</p>"},{"location":"installation/050_INSTALLING_MODELS/#installation","title":"Installation","text":"<p>There are two ways to install and manage models:</p> <ol> <li> <p>The <code>invokeai-model-install</code> script which will download and install them for you.  In addition to supporting main models, you can install ControlNet, LoRA and Textual Inversion models.</p> </li> <li> <p>The web interface (WebUI) has a GUI for importing and managing    models.</p> </li> <li> <p>By placing models (or symbolic links to models) inside one of the InvokeAI root directory's <code>autoimport</code> folder.</p> </li> </ol>"},{"location":"installation/050_INSTALLING_MODELS/#installation-via-invokeai-model-install","title":"Installation via <code>invokeai-model-install</code>","text":"<p>From the <code>invoke</code> launcher, choose option [4] \"Download and install models.\" This will launch the same script that prompted you to select models at install time. You can use this to add models that you skipped the first time around. It is all right to specify a model that was previously downloaded; the script will just confirm that the files are complete.</p> <p>The installer has different panels for installing main models from HuggingFace, models from Civitai and other arbitrary web sites, ControlNet models, LoRA/LyCORIS models, and Textual Inversion embeddings. Each section has a text box in which you can enter a new model to install. You can refer to a model using its:</p> <ol> <li>Local path to the .ckpt, .safetensors or diffusers folder on your local machine</li> <li>A directory on your machine that contains multiple models</li> <li>A URL that points to a downloadable model</li> <li>A HuggingFace repo id</li> </ol> <p>Previously-installed models are shown with checkboxes. Uncheck a box to unregister the model from InvokeAI. Models that are physically installed inside the InvokeAI root directory will be deleted and purged (after a confirmation warning). Models that are located outside the InvokeAI root directory will be unregistered but not deleted.</p> <p>Note: The installer script uses a console-based text interface that requires significant amounts of horizontal and vertical space. If the display looks messed up, just enlarge the terminal window and/or relaunch the script.</p> <p>If you wish you can script model addition and deletion, as well as listing installed models. Start the \"developer's console\" and give the command <code>invokeai-model-install --help</code>. This will give you a series of command-line parameters that will let you control model installation. Examples:</p> <pre><code># (list all controlnet models)\ninvokeai-model-install --list controlnet\n\n# (install the model at the indicated URL)\ninvokeai-model-install --add https://civitai.com/api/download/models/128713\n\n# (delete the named model)\ninvokeai-model-install --delete sd-1/main/analog-diffusion\n</code></pre>"},{"location":"installation/050_INSTALLING_MODELS/#installation-via-the-web-gui","title":"Installation via the Web GUI","text":"<p>To install a new model using the Web GUI, do the following:</p> <ol> <li> <p>Open the InvokeAI Model Manager (cube at the bottom of the left-hand panel) and navigate to Import Models</p> </li> <li> <p>In the field labeled Location type in the path to the model you wish to install. You may use a URL, HuggingFace repo id, or a path on your local disk.</p> </li> <li> <p>Alternatively, the Scan for Models button allows you to paste in the path to a folder somewhere on your machine. It will be scanned for importable models and prompt you to add the ones of your choice.</p> </li> <li> <p>Press Add Model and wait for confirmation that the model was added.</p> </li> </ol> <p>To delete a model, Select Model Manager to list all the currently installed models. Press the trash can icons to delete any models you wish to get rid of. Models whose weights are located inside the InvokeAI <code>models</code> directory will be purged from disk, while those located outside will be unregistered from InvokeAI, but not deleted.</p> <p>You can see where model weights are located by clicking on the model name. This will bring up an editable info panel showing the model's characteristics, including the <code>Model Location</code> of its files.</p>"},{"location":"installation/050_INSTALLING_MODELS/#installation-via-the-autoimport-function","title":"Installation via the <code>autoimport</code> function","text":"<p>In the InvokeAI root directory you will find a series of folders under <code>autoimport</code>, one each for main models, controlnets, embeddings and Loras.  Any models that you add to these directories will be scanned at startup time and registered automatically.</p> <p>You may create symbolic links from these folders to models located elsewhere on disk and they will be autoimported. You can also create subfolders and organize them as you wish.</p> <p>The location of the autoimport directories are controlled by settings in <code>invokeai.yaml</code>. See Configuration.</p>"},{"location":"installation/050_INSTALLING_MODELS/#installing-models-that-live-in-huggingface-subfolders","title":"Installing models that live in HuggingFace subfolders","text":"<p>On rare occasions you may need to install a diffusers-style model that lives in a subfolder of a HuggingFace repo id. In this event, simply add \":subfolder-name\" to the end of the repo id. For example, if the repo id is \"monster-labs/control_v1p_sd15_qrcode_monster\" and the model you wish to fetch lives in a subfolder named \"v2\", then the repo id to pass to the various model installers should be </p> <pre><code>monster-labs/control_v1p_sd15_qrcode_monster:v2\n</code></pre>"},{"location":"installation/060_INSTALL_PATCHMATCH/","title":"Installing PyPatchMatch","text":"<p>pypatchmatch is a Python module for inpainting images. It is not needed to run InvokeAI, but it greatly improves the quality of inpainting and outpainting and is recommended.</p> <p>Unfortunately, it is a C++ optimized module and installation can be somewhat challenging. This guide leads you through the steps.</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/#windows","title":"Windows","text":"<p>You're in luck! On Windows platforms PyPatchMatch will install automatically on Windows systems with no extra intervention.</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/#macintosh","title":"Macintosh","text":"<p>You need to have opencv installed so that pypatchmatch can be built:</p> <pre><code>brew install opencv\n</code></pre> <p>The next time you start <code>invoke</code>, after successfully installing opencv, pypatchmatch will be built.</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/#linux","title":"Linux","text":"<p>Prior to installing PyPatchMatch, you need to take the following steps:</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/#debian-based-distros","title":"Debian Based Distros","text":"<ol> <li> <p>Install the <code>build-essential</code> tools:</p> <pre><code>sudo apt update\nsudo apt install build-essential\n</code></pre> </li> <li> <p>Install <code>opencv</code>:</p> <pre><code>sudo apt install python3-opencv libopencv-dev\n</code></pre> </li> <li> <p>Activate the environment you use for invokeai, either with <code>conda</code> or with a    virtual environment.</p> </li> <li> <p>Install pypatchmatch:</p> <pre><code>pip install pypatchmatch\n</code></pre> </li> <li> <p>Confirm that pypatchmatch is installed. At the command-line prompt enter    <code>python</code>, and then at the <code>&gt;&gt;&gt;</code> line type    <code>from patchmatch import patch_match</code>: It should look like the following:</p> <pre><code>Python 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from patchmatch import patch_match\nCompiling and loading c extensions from \"/home/lstein/Projects/InvokeAI/.invokeai-env/src/pypatchmatch/patchmatch\".\nrm -rf build/obj libpatchmatch.so\nmkdir: created directory 'build/obj'\nmkdir: created directory 'build/obj/csrc/'\n[dep] csrc/masked_image.cpp ...\n[dep] csrc/nnf.cpp ...\n[dep] csrc/inpaint.cpp ...\n[dep] csrc/pyinterface.cpp ...\n[CC] csrc/pyinterface.cpp ...\n[CC] csrc/inpaint.cpp ...\n[CC] csrc/nnf.cpp ...\n[CC] csrc/masked_image.cpp ...\n[link] libpatchmatch.so ...\n</code></pre> </li> </ol>"},{"location":"installation/060_INSTALL_PATCHMATCH/#arch-based-distros","title":"Arch Based Distros","text":"<ol> <li> <p>Install the <code>base-devel</code> package:</p> <pre><code>sudo pacman -Syu\nsudo pacman -S --needed base-devel\n</code></pre> </li> <li> <p>Install <code>opencv</code> and <code>blas</code>:</p> <pre><code>sudo pacman -S opencv blas\n</code></pre> <p>or for CUDA support</p> <pre><code>sudo pacman -S opencv-cuda blas\n</code></pre> </li> <li> <p>Fix the naming of the <code>opencv</code> package configuration file:</p> <pre><code>cd /usr/lib/pkgconfig/\nln -sf opencv4.pc opencv.pc\n</code></pre> </li> </ol> <p>Next, Follow Steps 4-6 from the Debian Section above</p> <p>If you see no errors you're ready to go!</p>"},{"location":"installation/070_INSTALL_XFORMERS/","title":"Installing xformers","text":"<p>xFormers is toolbox that integrates with the pyTorch and CUDA libraries to provide accelerated performance and reduced memory consumption for applications using the transformers machine learning architecture. After installing xFormers, InvokeAI users who have CUDA GPUs will see a noticeable decrease in GPU memory consumption and an increase in speed.</p> <p>xFormers can be installed into a working InvokeAI installation without any code changes or other updates. This document explains how to install xFormers.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#pip-install","title":"Pip Install","text":"<p>For both Windows and Linux, you can install <code>xformers</code> in just a couple of steps from the command line.</p> <p>If you are used to launching <code>invoke.sh</code> or <code>invoke.bat</code> to start InvokeAI, then run the launcher and select the \"developer's console\" to get to the command line. If you run invoke.py directly from the command line, then just be sure to activate it's virtual environment.</p> <p>Then run the following three commands:</p> <pre><code>pip install xformers~=0.0.22\npip install triton    # WON'T WORK ON WINDOWS\npython -m xformers.info output\n</code></pre> <p>The first command installs <code>xformers</code>, the second installs the <code>triton</code> training accelerator, and the third prints out the <code>xformers</code> installation status. On Windows, please omit the <code>triton</code> package, which is not available on that platform.</p> <p>If all goes well, you'll see a report like the following:</p> <pre><code>xFormers 0.0.22\nmemory_efficient_attention.cutlassF:               available\nmemory_efficient_attention.cutlassB:               available\nmemory_efficient_attention.flshattF:               available\nmemory_efficient_attention.flshattB:               available\nmemory_efficient_attention.smallkF:                available\nmemory_efficient_attention.smallkB:                available\nmemory_efficient_attention.tritonflashattF:        available\nmemory_efficient_attention.tritonflashattB:        available\nindexing.scaled_index_addF:                        available\nindexing.scaled_index_addB:                        available\nindexing.index_select:                             available\nswiglu.dual_gemm_silu:                             available\nswiglu.gemm_fused_operand_sum:                     available\nswiglu.fused.p.cpp:                                available\nis_triton_available:                               True\nis_functorch_available:                            False\npytorch.version:                                   2.1.0+cu121\npytorch.cuda:                                      available\ngpu.compute_capability:                            8.9\ngpu.name:                                          NVIDIA GeForce RTX 4070\nbuild.info:                                        available\nbuild.cuda_version:                                1108\nbuild.python_version:                              3.10.11\nbuild.torch_version:                               2.1.0+cu121\nbuild.env.TORCH_CUDA_ARCH_LIST:                    5.0+PTX 6.0 6.1 7.0 7.5 8.0 8.6\nbuild.env.XFORMERS_BUILD_TYPE:                     Release\nbuild.env.XFORMERS_ENABLE_DEBUG_ASSERTIONS:        None\nbuild.env.NVCC_FLAGS:                              None\nbuild.env.XFORMERS_PACKAGE_FROM:                   wheel-v0.0.20\nbuild.nvcc_version:                                11.8.89\nsource.privacy:                                    open source\n</code></pre>"},{"location":"installation/070_INSTALL_XFORMERS/#source-builds","title":"Source Builds","text":"<p><code>xformers</code> is currently under active development and at some point you may wish to build it from sourcce to get the latest features and bugfixes.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#source-build-on-linux","title":"Source Build on Linux","text":"<p>Note that xFormers only works with true NVIDIA GPUs and will not work properly with the ROCm driver for AMD acceleration.</p> <p>xFormers is not currently available as a pip binary wheel and must be installed from source. These instructions were written for a system running Ubuntu 22.04, but other Linux distributions should be able to adapt this recipe.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#1-install-cuda-toolkit-121","title":"1. Install CUDA Toolkit 12.1","text":"<p>You will need the CUDA developer's toolkit in order to compile and install xFormers. Do not try to install Ubuntu's nvidia-cuda-toolkit package. It is out of date and will cause conflicts among the NVIDIA driver and binaries. Instead install the CUDA Toolkit package provided by NVIDIA itself. Go to CUDA Toolkit 12.1 Downloads and use the target selection wizard to choose your platform and Linux distribution. Select an installer type of \"runfile (local)\" at the last step.</p> <p>This will provide you with a recipe for downloading and running a install shell script that will install the toolkit and drivers.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#2-confirminstall-pytorch-210-with-cuda-121-support","title":"2. Confirm/Install pyTorch 2.1.0 with CUDA 12.1 support","text":"<p>If you are using InvokeAI 3.0.2 or higher, these will already be installed. If not, you can check whether you have the needed libraries using a quick command. Activate the invokeai virtual environment, either by entering the \"developer's console\", or manually with a command similar to <code>source ~/invokeai/.venv/bin/activate</code> (depending on where your <code>invokeai</code> directory is.</p> <p>Then run the command:</p> <pre><code>python -c 'exec(\"import torch\\nprint(torch.__version__)\")'\n</code></pre> <p>If it prints 2.1.0+cu121 you're good. If not, you can install the most up to date libraries with this command:</p> <pre><code>pip install --upgrade --force-reinstall torch torchvision\n</code></pre>"},{"location":"installation/070_INSTALL_XFORMERS/#3-install-the-triton-module","title":"3. Install the triton module","text":"<p>This module isn't necessary for xFormers image inference optimization, but avoids a startup warning.</p> <pre><code>pip install triton\n</code></pre>"},{"location":"installation/070_INSTALL_XFORMERS/#4-install-source-code-build-prerequisites","title":"4. Install source code build prerequisites","text":"<p>To build xFormers from source, you will need the <code>build-essentials</code> package. If you don't have it installed already, run:</p> <pre><code>sudo apt install build-essential\n</code></pre>"},{"location":"installation/070_INSTALL_XFORMERS/#5-build-xformers","title":"5. Build xFormers","text":"<p>There is no pip wheel package for xFormers at this time (January 2023). Although there is a conda package, InvokeAI no longer officially supports conda installations and you're on your own if you wish to try this route.</p> <p>Following the recipe provided at the xFormers GitHub page, and with the InvokeAI virtual environment active (see step 1) run the following commands:</p> <pre><code>pip install ninja\nexport TORCH_CUDA_ARCH_LIST=\"6.0;6.1;6.2;7.0;7.2;7.5;8.0;8.6\"\npip install -v -U git+https://github.com/facebookresearch/xformers.git@main#egg=xformers\n</code></pre> <p>The TORCH_CUDA_ARCH_LIST is a list of GPU architectures to compile xFormer support for. You can speed up compilation by selecting the architecture specific for your system. You'll find the list of GPUs and their architectures at NVIDIA's GPU Compute Capability table.</p> <p>If the compile and install completes successfully, you can check that xFormers is installed with this command:</p> <pre><code>python -m xformers.info\n</code></pre> <p>If suiccessful, the top of the listing should indicate \"available\" for each of the <code>memory_efficient_attention</code> modules, as shown here:</p> <pre><code>memory_efficient_attention.cutlassF:               available\nmemory_efficient_attention.cutlassB:               available\nmemory_efficient_attention.flshattF:               available\nmemory_efficient_attention.flshattB:               available\nmemory_efficient_attention.smallkF:                available\nmemory_efficient_attention.smallkB:                available\nmemory_efficient_attention.tritonflashattF:        available\nmemory_efficient_attention.tritonflashattB:        available\n[...]\n</code></pre> <p>You can now launch InvokeAI and enjoy the benefits of xFormers.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#windows","title":"Windows","text":"<p>To come</p> <p>\u00a9 Copyright 2023 Lincoln Stein and the InvokeAI Development Team</p>"},{"location":"installation/INSTALLATION/","title":"Overview","text":"<p>We offer several ways to install InvokeAI, each one suited to your experience and preferences. We suggest that everyone start by reviewing the hardware and software requirements, as they are the same across each install method. Then pick the install method most suitable to your level of experience and needs.</p> <p>See the troubleshooting section of the automated install guide for frequently-encountered installation issues.</p> <p>This fork is supported across Linux, Windows and Macintosh. Linux users can use either an Nvidia-based card (with CUDA support) or an AMD card (using the ROCm driver).</p>"},{"location":"installation/INSTALLATION/#automated-installer-recommended","title":"Automated Installer (Recommended)","text":"<p>\u2705 This is the recommended installation method for first-time users. </p> <p>This is a script that will install all of InvokeAI's essential   third party libraries and InvokeAI itself.</p> <p>\ud83d\udda5\ufe0f Download the latest installer .zip file here : https://github.com/invoke-ai/InvokeAI/releases/latest</p> <ul> <li>Look for the file labelled \"InvokeAI-installer-v3.X.X.zip\" at the bottom of the page</li> <li>If you experience issues, read through the full installation instructions to make sure you have met all of the installation requirements. If you need more help, join the Discord or create an issue on Github.</li> </ul>"},{"location":"installation/INSTALLATION/#manual-installation","title":"Manual Installation","text":"<p>This method is recommended for experienced users and developers.</p> <p>In this method you will manually run the commands needed to install   InvokeAI and its dependencies. We offer two recipes: one suited to   those who prefer the <code>conda</code> tool, and one suited to those who prefer   <code>pip</code> and Python virtual environments. In our hands the pip install   is faster and more reliable, but your mileage may vary.   Note that the conda installation method is currently deprecated and   will not be supported at some point in the future.</p>"},{"location":"installation/INSTALLATION/#docker-installation","title":"Docker Installation","text":"<p>This method is recommended for those familiar with running Docker containers.</p> <p>We offer a method for creating Docker containers containing InvokeAI and its dependencies. This method is recommended for individuals with experience with Docker containers and understand the pluses and minuses of a container-based install.</p>"},{"location":"installation/INSTALLATION/#other-installation-guides","title":"Other Installation Guides","text":"<ul> <li>PyPatchMatch</li> <li>XFormers</li> <li>CUDA and ROCm Drivers</li> <li>Installing New Models</li> </ul>"},{"location":"installation/INSTALLATION/#hardware-requirements","title":"Hardware Requirements","text":""},{"location":"installation/INSTALLATION/#system","title":"System","text":"<p>You wil need one of the following:</p> <ul> <li> An NVIDIA-based graphics card with 4 GB or more VRAM memory.</li> <li> An AMD-based graphics card with 4 GB or more VRAM memory (Linux   only)</li> <li> An Apple computer with an M1 chip.</li> </ul> <p>** SDXL 1.0 Requirements* To use SDXL, user must have one of the following:  -  An NVIDIA-based graphics card with 8 GB or more VRAM memory. -  An AMD-based graphics card with 16 GB or more VRAM memory (Linux   only) -  An Apple computer with an M1 chip.</p>"},{"location":"installation/INSTALLATION/#memory-and-disk","title":"Memory and Disk","text":"<ul> <li>At least 12 GB Main Memory RAM.</li> <li>At least 18 GB of free disk space for the machine learning model, Python, and   all its dependencies.</li> </ul> <p>We do not recommend the following video cards due to issues with their running in half-precision mode and having insufficient VRAM to render 512x512 images in full-precision mode:</p> <ul> <li>NVIDIA 10xx series cards such as the 1080ti</li> <li>GTX 1650 series cards</li> <li>GTX 1660 series cards</li> </ul>"},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/","title":"How to build \"binary\" installers (InvokeAI-mac/windows/linux_on_*.zip)","text":""},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/#1-ensure-installersrequirementsin-is-correct","title":"1. Ensure <code>installers/requirements.in</code> is correct","text":"<p>and up to date on the branch to be installed.</p>"},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/#2-run-pip-compile-on-each-platform","title":"2. Run <code>pip-compile</code> on each platform.","text":"<p>On each target platform, in the branch that is to be installed, and inside the InvokeAI git root folder, run the following commands:</p> <p><pre><code>conda activate invokeai # or however you activate python\npip install pip-tools\npip-compile --allow-unsafe --generate-hashes --output-file=binary_installer/&lt;reqsfile&gt;.txt binary_installer/requirements.in\n</code></pre> where <code>&lt;reqsfile&gt;.txt</code> is whichever of <pre><code>py3.10-darwin-arm64-mps-reqs.txt\npy3.10-darwin-x86_64-reqs.txt\npy3.10-linux-x86_64-cuda-reqs.txt\npy3.10-windows-x86_64-cuda-reqs.txt\n</code></pre> matches the current OS and architecture.</p> <p>There is no way to cross-compile these. They must be done on a system matching the target OS and arch.</p>"},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/#3-set-github-repository-and-branch","title":"3. Set github repository and branch","text":"<p>Once all reqs files have been collected and committed to the branch to be installed, edit <code>binary_installer/install.sh.in</code> and <code>binary_installer/install.bat.in</code> so that <code>RELEASE_URL</code> and <code>RELEASE_SOURCEBALL</code> point to the github repo and branch that is to be installed.</p> <p>For example, to install <code>main</code> branch of <code>InvokeAI</code>, they should be set as follows:</p> <p><code>install.sh.in</code>: <pre><code>RELEASE_URL=https://github.com/invoke-ai/InvokeAI\nRELEASE_SOURCEBALL=/archive/refs/heads/main.tar.gz\n</code></pre></p> <p><code>install.bat.in</code>: <pre><code>set RELEASE_URL=https://github.com/invoke-ai/InvokeAI\nset RELEASE_SOURCEBALL=/archive/refs/heads/main.tar.gz\n</code></pre></p> <p>Or, to install <code>damians-cool-feature</code> branch of <code>damian0815</code>, set them as follows:</p> <p><code>install.sh.in</code>: <pre><code>RELEASE_URL=https://github.com/damian0815/InvokeAI\nRELEASE_SOURCEBALL=/archive/refs/heads/damians-cool-feature.tar.gz\n</code></pre></p> <p><code>install.bat.in</code>: <pre><code>set RELEASE_URL=https://github.com/damian0815/InvokeAI\nset RELEASE_SOURCEBALL=/archive/refs/heads/damians-cool-feature.tar.gz\n</code></pre></p> <p>The branch and repo specified here must contain the correct reqs files. The installer zip files do not contain requirements files, they are pulled from the specified branch during the installation process.</p>"},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/#4-create-zip-files","title":"4. Create zip files.","text":"<p>cd into the <code>installers/</code> folder and run <code>./create_installers.sh</code>. This will create <code>InvokeAI-mac_on_&lt;branch&gt;.zip</code>, <code>InvokeAI-windows_on_&lt;branch&gt;.zip</code> and <code>InvokeAI-linux_on_&lt;branch&gt;.zip</code>. These files can be distributed to end users.</p> <p>These zips will continue to function as installers for all future pushes to those branches, as long as necessary changes to <code>requirements.in</code> are propagated in a timely manner to the <code>py3.10-*-reqs.txt</code> files using pip-compile as outlined in step 2.</p> <p>To actually install, users should unzip the appropriate zip file into an empty folder and run <code>install.sh</code> on macOS/Linux or <code>install.bat</code> on Windows.</p>"},{"location":"installation/deprecated_documentation/INSTALL_BINARY/","title":"InvokeAI Binary Installer","text":"<p>The InvokeAI binary installer is a shell script that will install InvokeAI onto a stock computer running recent versions of Linux, MacOSX or Windows. It will leave you with a version that runs a stable version of InvokeAI. When a new version of InvokeAI is released, you will download and reinstall the new version.</p> <p>If you wish to tinker with unreleased versions of InvokeAI that introduce potentially unstable new features, you should consider using the source installer or one of the manual install methods.</p> <p>Important Caveats   - This script does not support AMD GPUs. For Linux AMD support,     please use the manual or source code installer methods.</p> <ul> <li>This script has difficulty on some Macintosh machines     that have previously been used for Python development due to     conflicting development tools versions. Mac developers may wish     to try the source code installer or one of the manual methods instead.</li> </ul> <p>Todo</p> <p>Before you begin, make sure that you meet thehardware requirements and has the appropriate GPU drivers installed. In particular, if you are a Linux user with an AMD GPU installed, you may need to install the ROCm-driver.</p> <p>Installation requires roughly 18G of free disk space to load the libraries and recommended model weights files.</p>"},{"location":"installation/deprecated_documentation/INSTALL_BINARY/#steps-to-install","title":"Steps to Install","text":"<ol> <li> <p>Download the    latest release of    InvokeAI's installer for your platform. Look for a file named <code>InvokeAI-binary-&lt;your platform&gt;.zip</code></p> </li> <li> <p>Place the downloaded package someplace where you have plenty of HDD space,    and have full permissions (i.e. <code>~/</code> on Lin/Mac; your home folder on Windows)</p> </li> <li> <p>Extract the 'InvokeAI' folder from the downloaded package</p> </li> <li> <p>Open the extracted 'InvokeAI' folder</p> </li> <li> <p>Double-click 'install.bat' (Windows), or 'install.sh' (Lin/Mac) (or run from    a terminal)</p> </li> <li> <p>Follow the prompts</p> </li> <li> <p>After installation, please run the 'invoke.bat' file (on Windows) or    'invoke.sh' file (on Linux/Mac) to start InvokeAI.</p> </li> </ol>"},{"location":"installation/deprecated_documentation/INSTALL_BINARY/#troubleshooting","title":"Troubleshooting","text":"<p>If you run into problems during or after installation, the InvokeAI team is available to help you. Either create an Issue at our GitHub site, or make a request for help on the \"bugs-and-support\" channel of our Discord server. We are a 100% volunteer organization, but typically somebody will be available to help you within 24 hours, and often much sooner.</p>"},{"location":"installation/deprecated_documentation/INSTALL_JUPYTER/","title":"Running InvokeAI on Google Colab using a Jupyter Notebook","text":""},{"location":"installation/deprecated_documentation/INSTALL_JUPYTER/#introduction","title":"Introduction","text":"<p>We have a Jupyter notebook with cell-by-cell installation steps. It will download the code in this repo as one of the steps, so instead of cloning this repo, simply download the notebook from the link above and load it up in VSCode (with the appropriate extensions installed)/Jupyter/JupyterLab and start running the cells one-by-one.</p> <p>you will need NVIDIA drivers, Python 3.10, and Git installed beforehand</p>"},{"location":"installation/deprecated_documentation/INSTALL_JUPYTER/#running-online-on-google-colabotary","title":"Running Online On Google Colabotary","text":""},{"location":"installation/deprecated_documentation/INSTALL_JUPYTER/#running-locally-cloning","title":"Running Locally (Cloning)","text":"<ol> <li> <p>Install the Jupyter Notebook python library (one-time): pip install jupyter</p> </li> <li> <p>Clone the InvokeAI repository: git clone https://github.com/invoke-ai/InvokeAI.git cd invoke-ai</p> </li> <li>Create a virtual environment using conda: conda create -n invoke jupyter</li> <li>Activate the environment and start the Jupyter notebook: conda activate invoke jupyter notebook</li> </ol>"},{"location":"installation/deprecated_documentation/INSTALL_LINUX/","title":"Linux","text":""},{"location":"installation/deprecated_documentation/INSTALL_LINUX/#installation","title":"Installation","text":"<ol> <li> <p>You will need to install the following prerequisites if they are not already     available. Use your operating system's preferred installer.</p> <ul> <li>Python (version 3.8.5 recommended; higher may work)</li> <li>git</li> </ul> </li> <li> <p>Install the Python Anaconda environment manager.</p> <pre><code>~$  wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh\n~$  chmod +x Anaconda3-2022.05-Linux-x86_64.sh\n~$  ./Anaconda3-2022.05-Linux-x86_64.sh\n</code></pre> <p>After installing anaconda, you should log out of your system and log back in. If the installation worked, your command prompt will be prefixed by the name of the current anaconda environment - <code>(base)</code>.</p> </li> <li> <p>Copy the InvokeAI source code from GitHub:</p> <pre><code>(base) ~$ git clone https://github.com/invoke-ai/InvokeAI.git\n</code></pre> <p>This will create InvokeAI folder where you will follow the rest of the steps.</p> </li> <li> <p>Enter the newly-created InvokeAI folder. From this step forward make sure     that you are working in the InvokeAI directory!</p> <pre><code>(base) ~$ cd InvokeAI\n(base) ~/InvokeAI$\n</code></pre> </li> <li> <p>Use anaconda to copy necessary python packages, create a new python     environment named <code>invokeai</code> and then activate the environment.</p> <p>For systems with a CUDA (Nvidia) card:</p> <pre><code>(base) rm -rf src      # (this is a precaution in case there is already a src directory)\n(base) ~/InvokeAI$ conda env create -f environment-cuda.yml\n(base) ~/InvokeAI$ conda activate invokeai\n(invokeai) ~/InvokeAI$\n</code></pre> <p>For systems with an AMD card (using ROCm driver):</p> <pre><code>(base) rm -rf src      # (this is a precaution in case there is already a src directory)\n(base) ~/InvokeAI$ conda env create -f environment-AMD.yml\n(base) ~/InvokeAI$ conda activate invokeai\n(invokeai) ~/InvokeAI$\n</code></pre> <p>After these steps, your command prompt will be prefixed by <code>(invokeai)</code> as shown above.</p> </li> <li> <p>Load the big stable diffusion weights files and a couple of smaller     machine-learning models:</p> <pre><code>(invokeai) ~/InvokeAI$ python3 scripts/configure_invokeai.py\n</code></pre> <p>Note</p> <p>This script will lead you through the process of creating an account on Hugging Face, accepting the terms and conditions of the Stable Diffusion model license, and obtaining an access token for downloading. It will then download and install the weights files for you.</p> <p>Please look here for a manual process for doing the same thing.</p> </li> <li> <p>Start generating images!</p> <p>Run InvokeAI!</p> <p>IMPORTANT</p> <p>Make sure that the conda environment is activated, which should create <code>(invokeai)</code> in front of your prompt!</p> CLIlocal WebserverPublic Webserver <pre><code>python scripts/invoke.py\n</code></pre> <pre><code>python scripts/invoke.py --web\n</code></pre> <pre><code>python scripts/invoke.py --web --host 0.0.0.0\n</code></pre> <p>To use an alternative model you may invoke the <code>!switch</code> command in the CLI, or pass <code>--model &lt;model_name&gt;</code> during <code>invoke.py</code> launch for either the CLI or the Web UI. See Command Line Client. The model names are defined in <code>configs/models.yaml</code>.</p> </li> <li> <p>Subsequently, to relaunch the script, be sure to run \"conda activate    invokeai\" (step 5, second command), enter the <code>InvokeAI</code> directory, and then    launch the invoke script (step 8). If you forget to activate the 'invokeai'    environment, the script will fail with multiple <code>ModuleNotFound</code> errors.</p> </li> </ol>"},{"location":"installation/deprecated_documentation/INSTALL_LINUX/#updating-to-newer-versions-of-the-script","title":"Updating to newer versions of the script","text":"<p>This distribution is changing rapidly. If you used the <code>git clone</code> method (step 5) to download the InvokeAI directory, then to update to the latest and greatest version, launch the Anaconda window, enter <code>InvokeAI</code> and type:</p> <pre><code>(invokeai) ~/InvokeAI$ git pull\n(invokeai) ~/InvokeAI$ rm -rf src   # prevents conda freezing errors\n(invokeai) ~/InvokeAI$ conda env update -f environment.yml\n</code></pre> <p>This will bring your local copy into sync with the remote one.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/","title":"macOS","text":"<p>Invoke AI runs quite well on M1 Macs and we have a number of M1 users in the community.</p> <p>While the repo does run on Intel Macs, we only have a couple reports. If you have an Intel Mac and run into issues, please create an issue on Github and we will do our best to help.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#requirements","title":"Requirements","text":"<ul> <li>macOS 12.3 Monterey or later</li> <li>About 10GB of storage (and 10GB of data if your internet connection has data   caps)</li> <li>Any M1 Macs or an Intel Macs with 4GB+ of VRAM (ideally more)</li> </ul>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#installation","title":"Installation","text":"<p>Homebrew</p> <p>First you will install the \"brew\" package manager. Skip this if brew is already installed.</p> install brew (and Xcode command line tools)<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Conda Installation</p> <p>Now there are two different ways to set up the Python (miniconda) environment:</p> <ol> <li>Standalone</li> <li>with pyenv</li> </ol> <p>If you don't know what we are talking about, choose Standalone. If you are familiar with python environments, choose \"with pyenv\"</p> Standalonewith pyenv Install cmake, protobuf, and rust<pre><code>brew install cmake protobuf rust\n</code></pre> Clone the InvokeAI repository<pre><code># Clone the Invoke AI repo\ngit clone https://github.com/invoke-ai/InvokeAI.git\ncd InvokeAI\n</code></pre> <p>Choose the appropriate architecture for your system and install miniconda:</p> M1 arm64Intel x86_64 Install miniconda for M1 arm64<pre><code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh \\\n  -o Miniconda3-latest-MacOSX-arm64.sh\n/bin/bash Miniconda3-latest-MacOSX-arm64.sh\n</code></pre> Install miniconda for Intel<pre><code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh \\\n  -o Miniconda3-latest-MacOSX-x86_64.sh\n/bin/bash Miniconda3-latest-MacOSX-x86_64.sh\n</code></pre> <pre><code>brew install pyenv-virtualenv\npyenv install anaconda3-2022.05\npyenv virtualenv anaconda3-2022.05\neval \"$(pyenv init -)\"\npyenv activate anaconda3-2022.05\n</code></pre> <p>Clone the Invoke AI repo</p> <pre><code>git clone https://github.com/invoke-ai/InvokeAI.git\ncd InvokeAI\n</code></pre> <p>Create the environment &amp; install packages</p> M1 MacIntel x86_64 Mac <pre><code>PIP_EXISTS_ACTION=w CONDA_SUBDIR=osx-arm64 conda env create -f environment-mac.yml\n</code></pre> <pre><code>PIP_EXISTS_ACTION=w CONDA_SUBDIR=osx-64 conda env create -f environment-mac.yml\n</code></pre> <pre><code># Activate the environment (you need to do this every time you want to run SD)\nconda activate invokeai\n</code></pre> <p>Info</p> <p><code>export PIP_EXISTS_ACTION=w</code> is a precaution to fix <code>conda env create -f environment-mac.yml</code> never finishing in some situations. So it isn't required but won't hurt.</p> <p>Download the model weight files</p> <p>The <code>configure_invokeai.py</code> script downloads and installs the model weight files for you. It will lead you through the process of getting a Hugging Face account, accepting the Stable Diffusion model weight license agreement, and creating a download token:</p> <pre><code># This will take some time, depending on the speed of your internet connection\n# and will consume about 10GB of space\npython scripts/configure_invokeai.py\n</code></pre> <p>Run InvokeAI!</p> <p>IMPORTANT</p> <p>Make sure that the conda environment is activated, which should create <code>(invokeai)</code> in front of your prompt!</p> CLIlocal WebserverPublic Webserver <pre><code>python scripts/invoke.py\n</code></pre> <pre><code>python scripts/invoke.py --web\n</code></pre> <pre><code>python scripts/invoke.py --web --host 0.0.0.0\n</code></pre> <p>To use an alternative model you may invoke the <code>!switch</code> command in the CLI, or pass <code>--model &lt;model_name&gt;</code> during <code>invoke.py</code> launch for either the CLI or the Web UI. See Command Line Client. The model names are defined in <code>configs/models.yaml</code>.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#common-problems","title":"Common problems","text":"<p>After you followed all the instructions and try to run invoke.py, you might get several errors. Here's the errors I've seen and found solutions for.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#is-it-slow","title":"Is it slow?","text":"Be sure to specify 1 sample and 1 iteration.<pre><code>python ./scripts/orig_scripts/txt2img.py \\\n  --prompt \"ocean\" \\\n  --ddim_steps 5 \\\n  --n_samples 1 \\\n  --n_iter 1\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#doesnt-work-anymore","title":"Doesn't work anymore?","text":"<p>PyTorch nightly includes support for MPS. Because of this, this setup is inherently unstable. One morning I woke up and it no longer worked no matter what I did until I switched to miniforge. However, I have another Mac that works just fine with Anaconda. If you can't get it to work, please search a little first because many of the errors will get posted and solved. If you can't find a solution please create an issue.</p> <p>One debugging step is to update to the latest version of PyTorch nightly.</p> <pre><code>conda install \\\n  pytorch \\\n  torchvision \\\n  -c pytorch-nightly \\\n  -n invokeai\n</code></pre> <p>If it takes forever to run <code>conda env create -f environment-mac.yml</code>, try this:</p> <pre><code>git clean -f\nconda clean \\\n  --yes \\\n  --all\n</code></pre> <p>Or you could try to completley reset Anaconda:</p> <pre><code>conda update \\\n  --force-reinstall \\\n  -y \\\n  -n base \\\n  -c defaults conda\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#no-module-named-cv2-torch-invokeai-transformers-taming-etc","title":"\"No module named cv2\", torch, 'invokeai', 'transformers', 'taming', etc","text":"<p>There are several causes of these errors:</p> <ol> <li> <p>Did you remember to <code>conda activate invokeai</code>? If your terminal prompt begins    with \"(invokeai)\" then you activated it. If it begins with \"(base)\" or    something else you haven't.</p> </li> <li> <p>You might've run <code>./scripts/configure_invokeai.py</code> or <code>./scripts/invoke.py</code>    instead of <code>python ./scripts/configure_invokeai.py</code> or    <code>python ./scripts/invoke.py</code>. The cause of this error is long so it's below.</p> </li> <li> <p>if it says you're missing taming you need to rebuild your virtual    environment.</p> </li> </ol> <pre><code>conda deactivate\nconda env remove -n invokeai\nconda env create -f environment-mac.yml\n</code></pre> <ol> <li>If you have activated the invokeai virtual environment and tried rebuilding    it, maybe the problem could be that I have something installed that you don't    and you'll just need to manually install it. Make sure you activate the    virtual environment so it installs there instead of globally.</li> </ol> <pre><code>conda activate invokeai\npip install &lt;package name&gt;\n</code></pre> <p>You might also need to install Rust (I mention this again below).</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#how-many-snakes-are-living-in-your-computer","title":"How many snakes are living in your computer?","text":"<p>You might have multiple Python installations on your system, in which case it's important to be explicit and consistent about which one to use for a given project. This is because virtual environments are coupled to the Python that created it (and all the associated 'system-level' modules).</p> <p>When you run <code>python</code> or <code>python3</code>, your shell searches the colon-delimited locations in the <code>PATH</code> environment variable (<code>echo $PATH</code> to see that list) in that order - first match wins. You can ask for the location of the first <code>python3</code> found in your <code>PATH</code> with the <code>which</code> command like this:</p> <pre><code>% which python3\n/usr/bin/python3\n</code></pre> <p>Anything in <code>/usr/bin</code> is part of the OS. However, <code>/usr/bin/python3</code> is not actually python3, but rather a stub that offers to install Xcode (which includes python 3). If you have Xcode installed already, <code>/usr/bin/python3</code> will execute <code>/Library/Developer/CommandLineTools/usr/bin/python3</code> or <code>/Applications/Xcode.app/Contents/Developer/usr/bin/python3</code> (depending on which Xcode you've selected with <code>xcode-select</code>).</p> <p>Note that <code>/usr/bin/python</code> is an entirely different python - specifically, python 2. Note: starting in macOS 12.3, <code>/usr/bin/python</code> no longer exists.</p> <pre><code>% which python3\n/opt/homebrew/bin/python3\n</code></pre> <p>If you installed python3 with Homebrew and you've modified your path to search for Homebrew binaries before system ones, you'll see the above path.</p> <pre><code>% which python\n/opt/anaconda3/bin/python\n</code></pre> <p>If you have Anaconda installed, you will see the above path. There is a <code>/opt/anaconda3/bin/python3</code> also.</p> <p>We expect that <code>/opt/anaconda3/bin/python</code> and <code>/opt/anaconda3/bin/python3</code> should actually be the same python, which you can verify by comparing the output of <code>python3 -V</code> and <code>python -V</code>.</p> <pre><code>(invokeai) % which python\n/Users/name/miniforge3/envs/invokeai/bin/python\n</code></pre> <p>The above is what you'll see if you have miniforge and correctly activated the invokeai environment, while usingd the standalone setup instructions above.</p> <p>If you otherwise installed via pyenv, you will get this result:</p> <pre><code>(anaconda3-2022.05) % which python\n/Users/name/.pyenv/shims/python\n</code></pre> <p>It's all a mess and you should know how to modify the path environment variable if you want to fix it. Here's a brief hint of the most common ways you can modify it (don't really have the time to explain it all here).</p> <ul> <li>~/.zshrc</li> <li>~/.bash_profile</li> <li>~/.bashrc</li> <li>/etc/paths.d</li> <li>/etc/path</li> </ul> <p>Which one you use will depend on what you have installed, except putting a file in /etc/paths.d - which also is the way I prefer to do.</p> <p>Finally, to answer the question posed by this section's title, it may help to list all of the <code>python</code> / <code>python3</code> things found in <code>$PATH</code> instead of just the first hit. To do so, add the <code>-a</code> switch to <code>which</code>:</p> <pre><code>% which -a python3\n...\n</code></pre> <p>This will show a list of all binaries which are actually available in your PATH.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#debugging","title":"Debugging?","text":"<p>Tired of waiting for your renders to finish before you can see if it works? Reduce the steps! The image quality will be horrible but at least you'll get quick feedback.</p> <pre><code>python ./scripts/txt2img.py \\\n  --prompt \"ocean\" \\\n  --ddim_steps 5 \\\n  --n_samples 1 \\\n  --n_iter 1\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#oserror-cant-load-tokenizer-for-openaiclip-vit-large-patch14","title":"OSError: Can't load tokenizer for 'openai/clip-vit-large-patch14'","text":"<pre><code>python scripts/configure_invokeai.py\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#the-operator-name-is-not-current-implemented-for-the-mps-device-sic","title":"\"The operator [name] is not current implemented for the MPS device.\" (sic)","text":"<p>example error</p> <pre><code>... NotImplementedError: The operator 'aten::_index_put_impl_' is not current\nimplemented for the MPS device. If you want this op to be added in priority\nduring the prototype phase of this feature, please comment on\nhttps://github.com/pytorch/pytorch/issues/77764.\nAs a temporary fix, you can set the environment variable\n`PYTORCH_ENABLE_MPS_FALLBACK=1` to use the CPU as a fallback for this op.\nWARNING: this will be slower than running natively on MPS.\n</code></pre> <p>The InvokeAI version includes this fix in environment-mac.yml.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#could-not-build-wheels-for-tokenizers","title":"\"Could not build wheels for tokenizers\"","text":"<p>I have not seen this error because I had Rust installed on my computer before I started playing with Stable Diffusion. The fix is to install Rust.</p> <pre><code>curl \\\n  --proto '=https' \\\n  --tlsv1.2 \\\n  -sSf https://sh.rustup.rs | sh\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#how-come-seed-doesnt-work","title":"How come <code>--seed</code> doesn't work?","text":"<p>Information</p> <p>Completely reproducible results are not guaranteed across PyTorch releases, individual commits, or different platforms. Furthermore, results may not be reproducible between CPU and GPU executions, even when using identical seeds.</p> <p>PyTorch docs</p> <p>Second, we might have a fix that at least gets a consistent seed sort of. We're still working on it.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#libiomp5dylib-error","title":"libiomp5.dylib error?","text":"<pre><code>OMP: Error #15: Initializing libiomp5.dylib, but found libomp.dylib already initialized.\n</code></pre> <p>You are likely using an Intel package by mistake. Be sure to run conda with the environment variable <code>CONDA_SUBDIR=osx-arm64</code>, like so:</p> <p><code>CONDA_SUBDIR=osx-arm64 conda install ...</code></p> <p>This error happens with Anaconda on Macs when the Intel-only <code>mkl</code> is pulled in by a dependency. nomkl is a metapackage designed to prevent this, by making it impossible to install <code>mkl</code>, but if your environment is already broken it may not work.</p> <p>Do not use <code>os.environ['KMP_DUPLICATE_LIB_OK']='True'</code> or equivalents as this masks the underlying issue of using Intel packages.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#not-enough-memory","title":"Not enough memory","text":"<p>This seems to be a common problem and is probably the underlying problem for a lot of symptoms (listed below). The fix is to lower your image size or to add <code>model.half()</code> right after the model is loaded. I should probably test it out. I've read that the reason this fixes problems is because it converts the model from 32-bit to 16-bit and that leaves more RAM for other things. I have no idea how that would affect the quality of the images though.</p> <p>See this issue.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#error-product-of-dimension-sizes-231","title":"\"Error: product of dimension sizes &gt; 2**31'\"","text":"<p>This error happens with img2img, which I haven't played with too much yet. But I know it's because your image is too big or the resolution isn't a multiple of 32x32. Because the stable-diffusion model was trained on images that were 512 x 512, it's always best to use that output size (which is the default). However, if you're using that size and you get the above error, try 256 x 256 or 512 x 256 or something as the source image.</p> <p>BTW, 2**31-1 = 2,147,483,647, which is also 32-bit signed LONG_MAX in C.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#i-just-got-rickrolled-do-i-have-a-virus","title":"I just got Rickrolled! Do I have a virus?","text":"<p>You don't have a virus. It's part of the project. Here's Rick and here's the code that swaps him in. It's a NSFW filter, which IMO, doesn't work very good (and we call this \"computer vision\", sheesh).</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#my-images-come-out-black","title":"My images come out black","text":"<p>We might have this fixed, we are still testing.</p> <p>There's a similar issue on CUDA GPU's where the images come out green. Maybe it's the same issue? Someone in that issue says to use \"--precision full\", but this fork actually disables that flag. I don't know why, someone else provided that code and I don't know what it does. Maybe the <code>model.half()</code> suggestion above would fix this issue too. I should probably test it.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#view-size-is-not-compatible-with-input-tensors-size-and-stride","title":"\"view size is not compatible with input tensor's size and stride\"","text":"<pre><code>File \"/opt/anaconda3/envs/invokeai/lib/python3.10/site-packages/torch/nn/functional.py\", line 2511, in layer_norm\nreturn torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled)\nRuntimeError: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.\n</code></pre> <p>Update to the latest version of invoke-ai/InvokeAI. We were patching pytorch but we found a file in stable-diffusion that we could change instead. This is a 32-bit vs 16-bit problem.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#the-processor-must-support-the-intel-bla-bla-bla","title":"The processor must support the Intel bla bla bla","text":"<p>What? Intel? On an Apple Silicon?</p> <pre><code>Intel MKL FATAL ERROR: This system does not meet the minimum requirements for use of the Intel(R) Math Kernel Library. The processor must support the Intel(R) Supplemental Streaming SIMD Extensions 3 (Intel(R) SSSE3) instructions. The processor must support the Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) instructions. The processor must support the Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n</code></pre> <p>This is due to the Intel <code>mkl</code> package getting picked up when you try to install something that depends on it-- Rosetta can translate some Intel instructions but not the specialized ones here. To avoid this, make sure to use the environment variable <code>CONDA_SUBDIR=osx-arm64</code>, which restricts the Conda environment to only use ARM packages, and use <code>nomkl</code> as described above.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#input-types-tensor2x1280xf32-and-tensorxf16-are-not-broadcast-compatible","title":"input types 'tensor&lt;2x1280xf32&gt;' and 'tensor&lt;*xf16&gt;' are not broadcast compatible","text":"<p>May appear when just starting to generate, e.g.:</p> <pre><code>invoke&gt; clouds\nGenerating:   0%|                                                              | 0/1 [00:00&lt;?, ?it/s]/Users/[...]/dev/stable-diffusion/ldm/modules/embedding_manager.py:152: UserWarning: The operator 'aten::nonzero' is not currently supported on the MPS backend and will fall back to run on the CPU. This may have performance implications. (Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1662016319283/work/aten/src/ATen/mps/MPSFallback.mm:11.)\n  placeholder_idx = torch.where(\n                                                                                                    loc(\"mps_add\"(\"(mpsFileLoc): /AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShadersGraph/mpsgraph/MetalPerformanceShadersGraph/Core/Files/MPSGraphUtilities.mm\":219:0)): error: input types 'tensor&lt;2x1280xf32&gt;' and 'tensor&lt;*xf16&gt;' are not broadcast compatible\nLLVM ERROR: Failed to infer result type(s).\nAbort trap: 6\n/Users/[...]/opt/anaconda3/envs/invokeai/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown\n  warnings.warn('resource_tracker: There appear to be %d '\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_PCP/","title":"THIS NEEDS TO BE FLESHED OUT","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#introduction","title":"Introduction","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#walkthrough","title":"Walkthrough","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#updating-to-newer-versions","title":"Updating to newer versions","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#updating-the-stable-version","title":"Updating the stable version","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#updating-to-the-development-version","title":"Updating to the development version","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/","title":"The InvokeAI Source Installer","text":""},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#introduction","title":"Introduction","text":"<p>The source installer is a shell script that attempts to automate every step needed to install and run InvokeAI on a stock computer running recent versions of Linux, MacOS or Windows. It will leave you with a version that runs a stable version of InvokeAI with the option to upgrade to experimental versions later.</p> <p>Before you begin, make sure that you meet the hardware requirements and has the appropriate GPU drivers installed. In particular, if you are a Linux user with an AMD GPU installed, you may need to install the ROCm driver.</p> <p>Installation requires roughly 18G of free disk space to load the libraries and recommended model weights files.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#walk-through","title":"Walk through","text":"<p>Though there are multiple steps, there really is only one click involved to kick off the process.</p> <ol> <li> <p>The source installer is distributed in ZIP files. Go to the     latest release, and     look for a series of files named:</p> <ul> <li>invokeAI-src-installer-2.2.3-mac.zip</li> <li>invokeAI-src-installer-2.2.3-windows.zip</li> <li>invokeAI-src-installer-2.2.3-linux.zip</li> </ul> <p>Download the one that is appropriate for your operating system.</p> </li> <li> <p>Unpack the zip file into a directory that has at least 18G of free space. Do     not unpack into a directory that has an earlier version of InvokeAI.</p> <p>This will create a new directory named \"InvokeAI\". This example shows how this would look using the <code>unzip</code> command-line tool, but you may use any graphical or command-line Zip extractor:</p> <pre><code>C:\\Documents\\Linco&gt; unzip invokeAI-windows.zip\nArchive:  C: \\Linco\\Downloads\\invokeAI-linux.zip\ncreating: invokeAI\\\ninflating: invokeAI\\install.bat\ninflating: invokeAI\\readme.txt\n</code></pre> </li> <li> <p>If you are a macOS user, you may need to install the Xcode command line tools.    These are a set of tools that are needed to run certain applications in a Terminal,    including InvokeAI. This package is provided directly by Apple.</p> </li> </ol> <p>To install, open a terminal window and run <code>xcode-select --install</code>. You will get    a macOS system popup guiding you through the install. If you already have them    installed, you will instead see some output in the Terminal advising you that the    tools are already installed.</p> <p>More information can be found here:    https://www.freecodecamp.org/news/install-xcode-command-line-tools/</p> <ol> <li> <p>If you are using a desktop GUI, double-click the installer file. It will be     named <code>install.bat</code> on Windows systems and <code>install.sh</code> on Linux and     Macintosh systems.</p> </li> <li> <p>Alternatively, from the command line, run the shell script or .bat file:</p> <pre><code>C:\\Documents\\Linco&gt; cd invokeAI\nC:\\Documents\\Linco\\invokeAI&gt; install.bat\n</code></pre> </li> <li> <p>Sit back and let the install script work. It will install various binary     requirements including Conda, Git and Python, then download the current     InvokeAI code and install it along with its dependencies.</p> <p>Be aware that some of the library download and install steps take a long time. In particular, the <code>pytorch</code> package is quite large and often appears to get \"stuck\" at 99.9%. Similarly, the <code>pip installing requirements</code> step may appear to hang. Have patience and the installation step will eventually resume. However, there are occasions when the library install does legitimately get stuck. If you have been waiting for more than ten minutes and nothing is happening, you can interrupt the script with ^C. You may restart it and it will pick up where it left off.</p> </li> <li> <p>After installation completes, the installer will launch a script called     <code>configure_invokeai.py</code>, which will guide you through the first-time process of     selecting one or more Stable Diffusion model weights files, downloading and     configuring them.</p> <p>Note that the main Stable Diffusion weights file is protected by a license agreement that you must agree to in order to use. The script will list the steps you need to take to create an account on the official site that hosts the weights files, accept the agreement, and provide an access token that allows InvokeAI to legally download and install the weights files.</p> <p>If you have already downloaded the weights file(s) for another Stable Diffusion distribution, you may skip this step (by selecting \"skip\" when prompted) and configure InvokeAI to use the previously-downloaded files. The process for this is described in Installing Models.</p> </li> <li> <p>The script will now exit and you'll be ready to generate some images. The     invokeAI directory will contain numerous files. Look for a shell script     named <code>invoke.sh</code> (Linux/Mac) or <code>invoke.bat</code> (Windows). Launch the script     by double-clicking it or typing its name at the command-line:</p> <pre><code>C:\\Documents\\Linco&gt; cd invokeAI\nC:\\Documents\\Linco\\invokeAI&gt; invoke.bat\n</code></pre> </li> </ol> <p>The <code>invoke.bat</code> (<code>invoke.sh</code>) script will give you the choice of starting (1) the command-line interface, or (2) the web GUI. If you start the latter, you can load the user interface by pointing your browser at http://localhost:9090.</p> <p>The <code>invoke</code> script also offers you a third option labeled \"open the developer console\". If you choose this option, you will be dropped into a command-line interface in which you can run python commands directly, access developer tools, and launch InvokeAI with customized options. To do the latter, you would launch the script <code>scripts/invoke.py</code> as shown in this example:</p> <pre><code>python scripts/invoke.py --web --max_load_models=3 \\\n    --model=waifu-1.3 --steps=30 --outdir=C:/Documents/AIPhotos\n</code></pre> <p>These options are described in detail in the Command-Line Interface documentation.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#troubleshooting","title":"Troubleshooting","text":"<p>Package dependency conflicts If you have previously installed InvokeAI or another Stable Diffusion package, the installer may occasionally pick up outdated libraries and either the installer or <code>invoke</code> will fail with complaints out library conflicts. There are two steps you can take to clear this problem. Both of these are done from within the \"developer's console\", which you can get to by launching <code>invoke.sh</code> (or <code>invoke.bat</code>) and selecting launch option</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#3","title":"3:","text":"<ol> <li>Remove the previous <code>invokeai</code> environment completely. From within    the developer's console, give the command <code>conda env remove -n    invokeai</code>. This will delete previous files installed by <code>invoke</code>.</li> </ol> <p>Then exit from the developer's console and launch the script    <code>update.sh</code> (or <code>update.bat</code>). This will download the most recent    InvokeAI (including bug fixes) and reinstall the environment.    You should then be able to run <code>invoke.sh</code>/<code>invoke.bat</code>.</p> <ol> <li>If this doesn't work, you can try cleaning your system's conda    cache. This is slightly more extreme, but won't interfere with    any other python-based programs installed on your computer.    From the developer's console, run the command <code>conda clean -a</code>    and answer \"yes\" to all prompts.</li> </ol> <p>After this is done, run <code>update.sh</code> and try again as before.</p> <p>\"Corrupted configuration file.\"_ Everything seems to install ok, but <code>invoke</code> complains of a corrupted configuration file and goes calls <code>configure_invokeai.py</code> to fix, but this doesn't fix the problem.</p> <p>This issue is often caused by a misconfigured configuration directive in the <code>.invokeai</code> initialization file that contains startup settings. This can be corrected by fixing the offending line.</p> <p>First find <code>.invokeai</code>. It is a small text file located in your home directory, <code>~/.invokeai</code> on Mac and Linux systems, and <code>C:\\Users\\*your name*\\.invokeai</code> on Windows systems. Open it with a text editor (e.g. Notepad on Windows, TextEdit on Macs, or <code>nano</code> on Linux) and look for the lines starting with <code>--root</code> and <code>--outdir</code>.</p> <p>An example is here:</p> <pre><code>--root=\"/home/lstein/invokeai\"\n--outdir=\"/home/lstein/invokeai/outputs\"\n</code></pre> <p>There should not be whitespace before or after the directory paths, and the paths should not end with slashes:</p> <pre><code>--root=\"/home/lstein/invokeai \"     # wrong! no whitespace here\n--root=\"/home\\lstein\\invokeai\\\"     # wrong! shouldn't end in a slash\n</code></pre> <p>Fix the problem with your text editor and save as a plain text file. This should clear the issue.</p> <p>If none of these maneuvers fixes the problem then please report the problem to the InvokeAI Issues section, or visit our Discord Server for interactive assistance.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#updating-to-newer-versions","title":"Updating to newer versions","text":"<p>This section describes how to update InvokeAI to new versions of the software.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#updating-the-stable-version","title":"Updating the stable version","text":"<p>This distribution is changing rapidly, and we add new features on a daily basis. To update to the latest released version (recommended), run the <code>update.sh</code> (Linux/Mac) or <code>update.bat</code> (Windows) scripts. This will fetch the latest release and re-run the <code>configure_invokeai</code> script to download any updated models files that may be needed. You can also use this to add additional models that you did not select at installation time.</p> <p>You can now close the developer console and run <code>invoke</code> as before. If you get complaints about missing models, then you may need to do the additional step of running <code>configure_invokeai.py</code>. This happens relatively infrequently. To do this, simply open up the developer's console again and type <code>python scripts/configure_invokeai.py</code>.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#troubleshooting_1","title":"Troubleshooting","text":"<p>If you run into problems during or after installation, the InvokeAI team is available to help you. Either create an Issue at our GitHub site, or make a request for help on the \"bugs-and-support\" channel of our Discord server. We are a 100% volunteer organization, but typically somebody will be available to help you within 24 hours, and often much sooner.</p>"},{"location":"installation/deprecated_documentation/INSTALL_WINDOWS/","title":"Windows","text":""},{"location":"installation/deprecated_documentation/INSTALL_WINDOWS/#notebook-install-semi-automated","title":"Notebook install (semi-automated)","text":"<p>We have a Jupyter notebook with cell-by-cell installation steps. It will download the code in this repo as one of the steps, so instead of cloning this repo, simply download the notebook from the link above and load it up in VSCode (with the appropriate extensions installed)/Jupyter/JupyterLab and start running the cells one-by-one.</p> <p>Note that you will need NVIDIA drivers, Python 3.10, and Git installed beforehand.</p>"},{"location":"installation/deprecated_documentation/INSTALL_WINDOWS/#manual-install-with-conda","title":"Manual Install with Conda","text":"<ol> <li> <p>Install Anaconda3 (miniconda3 version) from here</p> </li> <li> <p>Install Git from here</p> </li> <li> <p>Launch Anaconda from the Windows Start menu. This will bring up a command    window. Type all the remaining commands in this window.</p> </li> <li> <p>Run the command:</p> <pre><code>git clone https://github.com/invoke-ai/InvokeAI.git\n</code></pre> <p>This will create stable-diffusion folder where you will follow the rest of the steps.</p> </li> <li> <p>Enter the newly-created InvokeAI folder. From this step forward make sure that you are working in the InvokeAI directory!</p> <pre><code>cd InvokeAI\n</code></pre> </li> <li> <p>Run the following commands:</p> <p>For systems with a CUDA (Nvidia) card:</p> <pre><code>rmdir src      # (this is a precaution in case there is already a src directory)\nconda env create -f environment-cuda.yml\nconda activate invokeai\n(invokeai)&gt;\n</code></pre> <p>For systems with an AMD card (using ROCm driver):</p> <pre><code>rmdir src      # (this is a precaution in case there is already a src directory)\nconda env create -f environment-AMD.yml\nconda activate invokeai\n(invokeai)&gt;\n</code></pre> <p>This will install all python requirements and activate the \"invokeai\" environment which sets PATH and other environment variables properly.</p> </li> <li> <p>Load the big stable diffusion weights files and a couple of smaller machine-learning models:</p> <pre><code>python scripts/configure_invokeai.py\n</code></pre> <p>Note</p> <p>This script will lead you through the process of creating an account on Hugging Face,   accepting the terms and conditions of the Stable Diffusion model license, and   obtaining an access token for downloading. It will then download and install the   weights files for you.</p> <p>Please look here for a manual process for doing the   same thing.</p> </li> <li> <p>Start generating images!</p> <p>IMPORTANT</p> <p>Make sure that the conda environment is activated, which should create <code>(invokeai)</code> in front of your prompt!</p> CLIlocal WebserverPublic Webserver <pre><code>python scripts/invoke.py\n</code></pre> <pre><code>python scripts/invoke.py --web\n</code></pre> <pre><code>python scripts/invoke.py --web --host 0.0.0.0\n</code></pre> <p>To use an alternative model you may invoke the <code>!switch</code> command in the CLI, or pass <code>--model &lt;model_name&gt;</code> during <code>invoke.py</code> launch for either the CLI or the Web UI. See Command Line Client. The model names are defined in <code>configs/models.yaml</code>.</p> </li> <li> <p>Subsequently, to relaunch the script, first activate the Anaconda command window (step 3),enter the InvokeAI directory (step 5, <code>cd \\path\\to\\InvokeAI</code>), run <code>conda activate invokeai</code> (step 6b), and then launch the invoke script (step 9).</p> </li> </ol> <p>Tildebyte has written an alternative</p> <p>\"Easy peasy Windows install\" which uses the Windows Powershell and pew. If you are having trouble with Anaconda on Windows, give this a try (or try it first!)</p> <p>This distribution is changing rapidly. If you used the <code>git clone</code> method (step 5) to download the stable-diffusion directory, then to update to the latest and greatest version, launch the Anaconda window, enter <code>stable-diffusion</code>, and type:</p> <pre><code>git pull\nconda env update\n</code></pre> <p>This will bring your local copy into sync with the remote one.</p>"},{"location":"nodes/INVOCATION_API/","title":"Invocation API","text":"<p>Each invocation's <code>invoke</code> method is provided a single arg - the Invocation Context.</p> <p>This object provides access to various methods, used to interact with the application. Loading and saving images, logging messages, etc.</p> <p>This API may shift slightly until the release of v4.0.0 as we work through a few final updates to the Model Manager.</p> <pre><code>class MyInvocation(BaseInvocation):\n  ...\n  def invoke(self, context: InvocationContext) -&gt; ImageOutput:\n      image_pil = context.images.get_pil(image_name)\n      # Do something to the image\n      image_dto = context.images.save(image_pil)\n      # Log a message\n      context.logger.info(f\"Did something cool, image saved!\")\n      ...\n</code></pre>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.InvocationContext","title":"InvocationContext","text":"<p>Provides access to various services and data for the current invocation.</p> <p>Attributes:</p> Name Type Description <code>images</code> <code>ImagesInterface</code> <p>Methods to save, get and update images and their metadata.</p> <code>tensors</code> <code>TensorsInterface</code> <p>Methods to save and get tensors, including image, noise, masks, and masked images.</p> <code>conditioning</code> <code>ConditioningInterface</code> <p>Methods to save and get conditioning data.</p> <code>models</code> <code>ModelsInterface</code> <p>Methods to check if a model exists, get a model, and get a model's info.</p> <code>logger</code> <code>LoggerInterface</code> <p>The app logger.</p> <code>config</code> <code>ConfigInterface</code> <p>The app config.</p> <code>util</code> <code>UtilInterface</code> <p>Utility methods, including a method to check if an invocation was canceled and step callbacks.</p> <code>boards</code> <code>BoardsInterface</code> <p>Methods to interact with boards.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ImagesInterface","title":"ImagesInterface","text":""},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ImagesInterface.get_dto","title":"get_dto","text":"<pre><code>get_dto(image_name: str) -&gt; ImageDTO\n</code></pre> <p>Gets an image as an ImageDTO object.</p> <p>Parameters:</p> Name Type Description Default <code>image_name</code> <code>str</code> <p>The name of the image to get.</p> required <p>Returns:</p> Type Description <code>ImageDTO</code> <p>The image as an ImageDTO object.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ImagesInterface.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(image_name: str) -&gt; Optional[MetadataField]\n</code></pre> <p>Gets an image's metadata, if it has any.</p> <p>Parameters:</p> Name Type Description Default <code>image_name</code> <code>str</code> <p>The name of the image to get the metadata for.</p> required <p>Returns:</p> Type Description <code>Optional[MetadataField]</code> <p>The image's metadata, if it has any.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ImagesInterface.get_pil","title":"get_pil","text":"<pre><code>get_pil(image_name: str, mode: IMAGE_MODES | None = None) -&gt; Image\n</code></pre> <p>Gets an image as a PIL Image object.</p> <p>Parameters:</p> Name Type Description Default <code>image_name</code> <code>str</code> <p>The name of the image to get.</p> required <code>mode</code> <code>IMAGE_MODES | None</code> <p>The color mode to convert the image to. If None, the original mode is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>Image</code> <p>The image as a PIL Image object.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ImagesInterface.save","title":"save","text":"<pre><code>save(image: Image, board_id: Optional[str] = None, image_category: ImageCategory = ImageCategory.GENERAL, metadata: Optional[MetadataField] = None) -&gt; ImageDTO\n</code></pre> <p>Saves an image, returning its DTO.</p> <p>If the current queue item has a workflow or metadata, it is automatically saved with the image.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Image</code> <p>The image to save, as a PIL image.</p> required <code>board_id</code> <code>Optional[str]</code> <p>The board ID to add the image to, if it should be added. It the invocation             inherits from <code>WithBoard</code>, that board will be used automatically. Use this only if             you want to override or provide a board manually!</p> <code>None</code> <code>image_category</code> <code>ImageCategory</code> <p>The category of the image. Only the GENERAL category is added             to the gallery.</p> <code>GENERAL</code> <code>metadata</code> <code>Optional[MetadataField]</code> <p>The metadata to save with the image, if it should have any. If the             invocation inherits from <code>WithMetadata</code>, that metadata will be used automatically.             Use this only if you want to override or provide metadata manually!</p> <code>None</code> <p>Returns:</p> Type Description <code>ImageDTO</code> <p>The saved image DTO.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.TensorsInterface","title":"TensorsInterface","text":""},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.TensorsInterface.load","title":"load","text":"<pre><code>load(name: str) -&gt; Tensor\n</code></pre> <p>Loads a tensor by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the tensor to load.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>The loaded tensor.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.TensorsInterface.save","title":"save","text":"<pre><code>save(tensor: Tensor) -&gt; str\n</code></pre> <p>Saves a tensor, returning its name.</p> <p>Parameters:</p> Name Type Description Default <code>tensor</code> <code>Tensor</code> <p>The tensor to save.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The name of the saved tensor.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ConditioningInterface","title":"ConditioningInterface","text":""},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ConditioningInterface.load","title":"load","text":"<pre><code>load(name: str) -&gt; ConditioningFieldData\n</code></pre> <p>Loads conditioning data by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the conditioning data to load.</p> required <p>Returns:</p> Type Description <code>ConditioningFieldData</code> <p>The loaded conditioning data.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ConditioningInterface.save","title":"save","text":"<pre><code>save(conditioning_data: ConditioningFieldData) -&gt; str\n</code></pre> <p>Saves a conditioning data object, returning its name.</p> <p>Parameters:</p> Name Type Description Default <code>conditioning_data</code> <code>ConditioningFieldData</code> <p>The conditioning data to save.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The name of the saved conditioning data.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ModelsInterface","title":"ModelsInterface","text":""},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ModelsInterface.exists","title":"exists","text":"<pre><code>exists(key: str) -&gt; bool\n</code></pre> <p>Checks if a model exists.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the model.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the model exists, False if not.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ModelsInterface.get_config","title":"get_config","text":"<pre><code>get_config(key: str) -&gt; AnyModelConfig\n</code></pre> <p>Gets a model's config.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the model.</p> required <p>Returns:</p> Type Description <code>AnyModelConfig</code> <p>The model's config.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ModelsInterface.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str) -&gt; Optional[AnyModelRepoMetadata]\n</code></pre> <p>Gets a model's metadata, if it has any.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the model.</p> required <p>Returns:</p> Type Description <code>Optional[AnyModelRepoMetadata]</code> <p>The model's metadata, if it has any.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ModelsInterface.load","title":"load","text":"<pre><code>load(key: str, submodel_type: Optional[SubModelType] = None) -&gt; LoadedModel\n</code></pre> <p>Loads a model.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the model.</p> required <code>submodel_type</code> <code>Optional[SubModelType]</code> <p>The submodel of the model to get.</p> <code>None</code> <p>Returns:</p> Type Description <code>LoadedModel</code> <p>An object representing the loaded model.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ModelsInterface.load_by_attrs","title":"load_by_attrs","text":"<pre><code>load_by_attrs(name: str, base: BaseModelType, type: ModelType, submodel_type: Optional[SubModelType] = None) -&gt; LoadedModel\n</code></pre> <p>Loads a model by its attributes.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the model.</p> required <code>base</code> <code>BaseModelType</code> <p>The models' base type, e.g. <code>BaseModelType.StableDiffusion1</code>, <code>BaseModelType.StableDiffusionXL</code>, etc.</p> required <code>type</code> <code>ModelType</code> <p>Type of the model, e.g. <code>ModelType.Main</code>, <code>ModelType.Vae</code>, etc.</p> required <code>submodel_type</code> <code>Optional[SubModelType]</code> <p>The type of submodel to load, e.g. <code>SubModelType.UNet</code>, <code>SubModelType.TextEncoder</code>, etc. Only main</p> <code>None</code> <p>Returns:</p> Type Description <code>LoadedModel</code> <p>An object representing the loaded model.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ModelsInterface.search_by_attrs","title":"search_by_attrs","text":"<pre><code>search_by_attrs(name: Optional[str] = None, base: Optional[BaseModelType] = None, type: Optional[ModelType] = None, format: Optional[ModelFormat] = None) -&gt; list[AnyModelConfig]\n</code></pre> <p>Searches for models by attributes.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>The name to search for (exact match).</p> <code>None</code> <code>base</code> <code>Optional[BaseModelType]</code> <p>The base to search for, e.g. <code>BaseModelType.StableDiffusion1</code>, <code>BaseModelType.StableDiffusionXL</code>, etc.</p> <code>None</code> <code>type</code> <code>Optional[ModelType]</code> <p>Type type of model to search for, e.g. <code>ModelType.Main</code>, <code>ModelType.Vae</code>, etc.</p> <code>None</code> <code>format</code> <code>Optional[ModelFormat]</code> <p>The format of model to search for, e.g. <code>ModelFormat.Checkpoint</code>, <code>ModelFormat.Diffusers</code>, etc.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[AnyModelConfig]</code> <p>A list of models that match the attributes.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ModelsInterface.search_by_path","title":"search_by_path","text":"<pre><code>search_by_path(path: Path) -&gt; list[AnyModelConfig]\n</code></pre> <p>Searches for models by path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to search for.</p> required <p>Returns:</p> Type Description <code>list[AnyModelConfig]</code> <p>A list of models that match the path.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.LoggerInterface","title":"LoggerInterface","text":""},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.LoggerInterface.debug","title":"debug","text":"<pre><code>debug(message: str) -&gt; None\n</code></pre> <p>Logs a debug message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.LoggerInterface.error","title":"error","text":"<pre><code>error(message: str) -&gt; None\n</code></pre> <p>Logs an error message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.LoggerInterface.info","title":"info","text":"<pre><code>info(message: str) -&gt; None\n</code></pre> <p>Logs an info message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.LoggerInterface.warning","title":"warning","text":"<pre><code>warning(message: str) -&gt; None\n</code></pre> <p>Logs a warning message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ConfigInterface","title":"ConfigInterface","text":""},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.ConfigInterface.get","title":"get","text":"<pre><code>get() -&gt; InvokeAIAppConfig\n</code></pre> <p>Gets the app's config.</p> <p>Returns:</p> Type Description <code>InvokeAIAppConfig</code> <p>The app's config.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.UtilInterface","title":"UtilInterface","text":""},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.UtilInterface.is_canceled","title":"is_canceled","text":"<pre><code>is_canceled() -&gt; bool\n</code></pre> <p>Checks if the current session has been canceled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the current session has been canceled, False if not.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.UtilInterface.sd_step_callback","title":"sd_step_callback","text":"<pre><code>sd_step_callback(intermediate_state: PipelineIntermediateState, base_model: BaseModelType) -&gt; None\n</code></pre> <p>The step callback emits a progress event with the current step, the total number of steps, a preview image, and some other internal metadata.</p> <p>This should be called after each denoising step.</p> <p>Parameters:</p> Name Type Description Default <code>intermediate_state</code> <code>PipelineIntermediateState</code> <p>The intermediate state of the diffusion pipeline.</p> required <code>base_model</code> <code>BaseModelType</code> <p>The base model for the current denoising step.</p> required"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.BoardsInterface","title":"BoardsInterface","text":""},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.BoardsInterface.add_image_to_board","title":"add_image_to_board","text":"<pre><code>add_image_to_board(board_id: str, image_name: str) -&gt; None\n</code></pre> <p>Adds an image to a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>str</code> <p>The ID of the board to add the image to.</p> required <code>image_name</code> <code>str</code> <p>The name of the image to add to the board.</p> required"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.BoardsInterface.create","title":"create","text":"<pre><code>create(board_name: str) -&gt; BoardDTO\n</code></pre> <p>Creates a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The name of the board to create.</p> required <p>Returns:</p> Type Description <code>BoardDTO</code> <p>The created board DTO.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.BoardsInterface.get_all","title":"get_all","text":"<pre><code>get_all() -&gt; list[BoardDTO]\n</code></pre> <p>Gets all boards.</p> <p>Returns:</p> Type Description <code>list[BoardDTO]</code> <p>A list of all boards.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.BoardsInterface.get_all_image_names_for_board","title":"get_all_image_names_for_board","text":"<pre><code>get_all_image_names_for_board(board_id: str) -&gt; list[str]\n</code></pre> <p>Gets all image names for a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>str</code> <p>The ID of the board to get the image names for.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of all image names for the board.</p>"},{"location":"nodes/INVOCATION_API/#invokeai.app.services.shared.invocation_context.BoardsInterface.get_dto","title":"get_dto","text":"<pre><code>get_dto(board_id: str) -&gt; BoardDTO\n</code></pre> <p>Gets a board DTO.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>str</code> <p>The ID of the board to get.</p> required <p>Returns:</p> Type Description <code>BoardDTO</code> <p>The board DTO.</p>"},{"location":"nodes/NODES/","title":"Using the Workflow Editor","text":"<p>The workflow editor is a blank canvas allowing for the use of individual functions and image transformations to control the image generation workflow. Nodes take in inputs on the left side of the node, and return an output on the right side of the node. A node graph is composed of multiple nodes that are connected together to create a workflow. Nodes' inputs and outputs are connected by dragging connectors from node to node. Inputs and outputs are color coded for ease of use.</p> <p>If you're not familiar with Diffusion, take a look at our Diffusion Overview. Understanding how diffusion works will enable you to more easily use the Workflow Editor and build workflows to suit your needs.</p>"},{"location":"nodes/NODES/#features","title":"Features","text":""},{"location":"nodes/NODES/#workflow-library","title":"Workflow Library","text":"<p>The Workflow Library enables you to save workflows to the Invoke database, allowing you to easily creating, modify and share workflows as needed. </p> <p>A curated set of workflows are provided by default - these are designed to help explain important nodes' usage in the Workflow Editor.</p> <p></p>"},{"location":"nodes/NODES/#linear-view","title":"Linear View","text":"<p>The Workflow Editor allows you to create a UI for your workflow, to make it easier to iterate on your generations. </p> <p>To add an input to the Linear UI, right click on the input label and select \"Add to Linear View\".</p> <p>The Linear UI View will also be part of the saved workflow, allowing you share workflows and enable other to use them, regardless of complexity. </p> <p></p>"},{"location":"nodes/NODES/#renaming-fields-and-nodes","title":"Renaming Fields and Nodes","text":"<p>Any node or input field can be renamed in the workflow editor. If the input field you have renamed has been added to the Linear View, the changed name will be reflected in the Linear View and the node. </p>"},{"location":"nodes/NODES/#managing-nodes","title":"Managing Nodes","text":"<ul> <li>Ctrl+C to copy a node</li> <li>Ctrl+V to paste a node</li> <li>Backspace/Delete to delete a node</li> <li>Shift+Click to drag and select multiple nodes </li> </ul>"},{"location":"nodes/NODES/#node-caching","title":"Node Caching","text":"<p>Nodes have a \"Use Cache\" option in their footer. This allows for performance improvements by using the previously cached values during the workflow processing. </p>"},{"location":"nodes/NODES/#important-nodes-concepts","title":"Important Nodes &amp; Concepts","text":"<p>There are several node grouping concepts that can be examined with a narrow focus. These (and other) groupings can be pieced together to make up functional graph setups, and are important to understanding how groups of nodes work together as part of a whole. Note that the screenshots below aren't examples of complete functioning node graphs (see Examples).</p>"},{"location":"nodes/NODES/#noise","title":"Noise","text":"<p>An initial noise tensor is necessary for the latent diffusion process. As a result, the Denoising node requires a noise node input.  </p> <p></p>"},{"location":"nodes/NODES/#text-prompt-conditioning","title":"Text Prompt Conditioning","text":"<p>Conditioning is necessary for the latent diffusion process, whether empty or not. As a result, the Denoising node requires positive and negative conditioning inputs. Conditioning is reliant on a CLIP text encoder provided by the Model Loader node.</p> <p></p>"},{"location":"nodes/NODES/#image-to-latents-vae","title":"Image to Latents &amp; VAE","text":"<p>The ImageToLatents node takes in a pixel image and a VAE and outputs a latents. The LatentsToImage node does the opposite, taking in a latents and a VAE and outpus a pixel image. </p> <p></p>"},{"location":"nodes/NODES/#defined-random-seeds","title":"Defined &amp; Random Seeds","text":"<p>It is common to want to use both the same seed (for continuity) and random seeds (for variety). To define a seed, simply enter it into the 'Seed' field on a noise node. Conversely, the RandomInt node generates a random integer between 'Low' and 'High', and can be used as input to the 'Seed' edge point on a noise node to randomize your seed.</p> <p></p>"},{"location":"nodes/NODES/#controlnet","title":"ControlNet","text":"<p>The ControlNet node outputs a Control, which can be provided as input to a Denoise Latents node. Depending on the type of ControlNet desired, ControlNet nodes usually require an image processor node, such as a Canny Processor or Depth Processor, which prepares an input image for use with ControlNet.</p> <p></p>"},{"location":"nodes/NODES/#lora","title":"LoRA","text":"<p>The Lora Loader node lets you load a LoRA and pass it as output.A LoRA provides fine-tunes to the UNet and text encoder weights that augment the base model\u2019s image and text vocabularies.</p> <p></p>"},{"location":"nodes/NODES/#scaling","title":"Scaling","text":"<p>Use the ImageScale, ScaleLatents, and Upscale nodes to upscale images and/or latent images. Upscaling is the process of enlarging an image and adding more detail. The chosen method differs across contexts. However, be aware that latents are already noisy and compressed at their original resolution; scaling an image could produce more detailed results.</p> <p></p>"},{"location":"nodes/NODES/#iteration-multiple-images-as-input","title":"Iteration + Multiple Images as Input","text":"<p>Iteration is a common concept in any processing, and means to repeat a process with given input. In nodes, you're able to use the Iterate node to iterate through collections usually gathered by the Collect node. The Iterate node has many potential uses, from processing a collection of images one after another, to varying seeds across multiple image generations and more. This screenshot demonstrates how to collect several images and use them in an image generation workflow.</p> <p></p>"},{"location":"nodes/NODES/#batch-multiple-image-generation-random-seeds","title":"Batch / Multiple Image Generation + Random Seeds","text":"<p>Batch or multiple image generation in the workflow editor is done using the RandomRange node. In this case, the 'Size' field represents the number of images to generate, meaning this example will generate 4 images. As RandomRange produces a collection of integers, we need to add the Iterate node to iterate through the collection. This noise can then be fed to the Denoise Latents node for it to iterate through the denoising process with the different seeds provided.</p> <p></p>"},{"location":"nodes/NODES_MIGRATION_V3_V4/","title":"Invoke v4.0.0 Nodes API Migration guide","text":"<p>Invoke v4.0.0 is versioned as such due to breaking changes to the API utilized by nodes, both core and custom.</p>"},{"location":"nodes/NODES_MIGRATION_V3_V4/#motivation","title":"Motivation","text":"<p>Prior to v4.0.0, the <code>invokeai</code> python package has not be set up to be utilized as a library. That is to say, it didn't have any explicitly public API, and node authors had to work with the unstable internal application API.</p> <p>v4.0.0 introduces a stable public API for nodes.</p>"},{"location":"nodes/NODES_MIGRATION_V3_V4/#changes","title":"Changes","text":"<p>There are two node-author-facing changes:</p> <ol> <li>Import Paths</li> <li>Invocation Context API</li> </ol>"},{"location":"nodes/NODES_MIGRATION_V3_V4/#import-paths","title":"Import Paths","text":"<p>All public objects are now exported from <code>invokeai.invocation_api</code>:</p> <pre><code># Old\nfrom invokeai.app.invocations.baseinvocation import (\n    BaseInvocation,\n    InputField,\n    InvocationContext,\n    invocation,\n)\nfrom invokeai.app.invocations.primitives import ImageField\n\n# New\nfrom invokeai.invocation_api import (\n    BaseInvocation,\n    ImageField,\n    InputField,\n    InvocationContext,\n    invocation,\n)\n</code></pre> <p>It's possible that we've missed some classes you need in your node. Please let us know if that's the case.</p>"},{"location":"nodes/NODES_MIGRATION_V3_V4/#invocation-context-api","title":"Invocation Context API","text":"<p>Most nodes utilize the Invocation Context, an object that is passed to the <code>invoke</code> that provides access to data and services a node may need.</p> <p>Until now, that object and the services it exposed were internal. Exposing them to nodes means that changes to our internal implementation could break nodes. The methods on the services are also often fairly complicated and allowed nodes to footgun.</p> <p>In v4.0.0, this object has been refactored to be much simpler.</p> <p>See INVOCATION_API for full details of the API.</p> <p>This API may shift slightly until the release of v4.0.0 as we work through a few final updates to the Model Manager.</p>"},{"location":"nodes/NODES_MIGRATION_V3_V4/#improved-service-methods","title":"Improved Service Methods","text":"<p>The biggest offender was the image save method:</p> <pre><code># Old\nimage_dto = context.services.images.create(\n    image=image,\n    image_origin=ResourceOrigin.INTERNAL,\n    image_category=ImageCategory.GENERAL,\n    node_id=self.id,\n    session_id=context.graph_execution_state_id,\n    is_intermediate=self.is_intermediate,\n    metadata=self.metadata,\n    workflow=context.workflow,\n)\n\n# New\nimage_dto = context.images.save(image=image)\n</code></pre> <p>Other methods are simplified, or enhanced with additional functionality:</p> <pre><code># Old\nimage = context.services.images.get_pil_image(image_name)\n\n# New\nimage = context.images.get_pil(image_name)\nimage_cmyk = context.images.get_pil(image_name, \"CMYK\")\n</code></pre> <p>We also had some typing issues around tensors:</p> <pre><code># Old\n# `latents` typed as `torch.Tensor`, but could be `ConditioningFieldData`\nlatents = context.services.latents.get(self.latents.latents_name)\n# `data` typed as `torch.Tenssor,` but could be `ConditioningFieldData`\ncontext.services.latents.save(latents_name, data)\n\n# New - separate methods for tensors and conditioning data w/ correct typing\n# Also, the service generates the names\ntensor_name = context.tensors.save(tensor)\ntensor = context.tensors.load(tensor_name)\n# For conditioning\ncond_name = context.conditioning.save(cond_data)\ncond_data = context.conditioning.load(cond_name)\n</code></pre>"},{"location":"nodes/NODES_MIGRATION_V3_V4/#output-construction","title":"Output Construction","text":"<p>Core Outputs have builder functions right on them - no need to manually construct these objects, or use an extra utility:</p> <pre><code># Old\nimage_output = ImageOutput(\n    image=ImageField(image_name=image_dto.image_name),\n    width=image_dto.width,\n    height=image_dto.height,\n)\nlatents_output = build_latents_output(latents_name=name, latents=latents, seed=None)\nnoise_output = NoiseOutput(\n    noise=LatentsField(latents_name=latents_name, seed=seed),\n    width=latents.size()[3] * 8,\n    height=latents.size()[2] * 8,\n)\ncond_output = ConditioningOutput(\n    conditioning=ConditioningField(\n        conditioning_name=conditioning_name,\n    ),\n)\n\n# New\nimage_output = ImageOutput.build(image_dto)\nlatents_output = LatentsOutput.build(latents_name=name, latents=noise, seed=self.seed)\nnoise_output = NoiseOutput.build(latents_name=name, latents=noise, seed=self.seed)\ncond_output = ConditioningOutput.build(conditioning_name)\n</code></pre> <p>You can still create the objects using constructors if you want, but we suggest using the builder methods.</p>"},{"location":"nodes/comfyToInvoke/","title":"ComfyUI to InvokeAI","text":"<p>If you're coming to InvokeAI from ComfyUI, welcome! You'll find things are similar but different - the good news is that you already know how things should work, and it's just a matter of wiring them up! </p> <p>Some things to note: </p> <ul> <li>InvokeAI's nodes tend to be more granular than default nodes in Comfy. This means each node in Invoke will do a specific task and you might need to use multiple nodes to achieve the same result. The added granularity improves the control you have have over your workflows. </li> <li>InvokeAI's backend and ComfyUI's backend are very different which means Comfy workflows are not able to be imported into InvokeAI. However, we have created a list of popular workflows for you to get started with Nodes in InvokeAI!</li> </ul>"},{"location":"nodes/comfyToInvoke/#node-equivalents","title":"Node Equivalents:","text":"Comfy UI Category ComfyUI Node Invoke Equivalent Sampling KSampler Denoise Latents Sampling Ksampler Advanced Denoise Latents Loaders Load Checkpoint Main Model Loader or SDXL Main Model Loader Loaders Load VAE VAE Loader Loaders Load Lora LoRA Loader or SDXL Lora Loader Loaders Load ControlNet Model ControlNet Loaders Load ControlNet Model (diff) ControlNet Loaders Load Style Model Reference Only ControlNet will be coming in a future version of InvokeAI Loaders unCLIPCheckpointLoader N/A Loaders GLIGENLoader N/A Loaders Hypernetwork Loader N/A Loaders Load Upscale Model Occurs within \"Upscale (RealESRGAN)\" Conditioning CLIP Text Encode (Prompt) Compel (Prompt) or SDXL Compel (Prompt) Conditioning CLIP Set Last Layer CLIP Skip Conditioning Conditioning (Average) Use the .blend() feature of prompts Conditioning Conditioning (Combine) N/A Conditioning Conditioning (Concat) See the Prompt Tools Community Node Conditioning Conditioning (Set Area) N/A Conditioning Conditioning (Set Mask) Mask Edge Conditioning CLIP Vision Encode N/A Conditioning unCLIPConditioning N/A Conditioning Apply ControlNet ControlNet Conditioning Apply ControlNet (Advanced) ControlNet Latent VAE Decode Latents to Image Latent VAE Encode Image to Latents Latent Empty Latent Image Noise Latent Upscale Latent Resize Latents Latent Upscale Latent By Scale Latents Latent Latent Composite Blend Latents Latent LatentCompositeMasked N/A Image Save Image Image Image Preview Image Current Image Load Image Image Image Empty Image Blank Image Image Invert Image Invert Lerp Image Image Batch Images Link \"Image\" nodes into an \"Image Collection\" node Image Pad Image for Outpainting Outpainting is easily accomplished in the Unified Canvas Image ImageCompositeMasked Paste Image Image Upscale Image Resize Image Image Upscale Image By Upscale Image Image Upscale Image (using Model) Upscale Image Image ImageBlur Blur Image Image ImageQuantize N/A Image ImageSharpen N/A Image Canny Canny Processor Mask Load Image (as Mask) Image Mask Convert Mask to Image Image Mask Convert Image to Mask Image Mask SolidMask N/A Mask InvertMask Invert Lerp Image Mask CropMask Crop Image Mask MaskComposite Combine Mask Mask FeatherMask Blur Image Advanced Load CLIP Main Model Loader or SDXL Main Model Loader Advanced UNETLoader Main Model Loader or SDXL Main Model Loader Advanced DualCLIPLoader Main Model Loader or SDXL Main Model Loader Advanced Load Checkpoint Main Model Loader or SDXL Main Model Loader Advanced ConditioningZeroOut N/A Advanced ConditioningSetTimestepRange N/A Advanced CLIPTextEncodeSDXLRefiner Compel (Prompt) or SDXL Compel (Prompt) Advanced CLIPTextEncodeSDXL Compel (Prompt) or SDXL Compel (Prompt) Advanced ModelMergeSimple Model Merging is available in the Model Manager Advanced ModelMergeBlocks Model Merging is available in the Model Manager Advanced CheckpointSave Model saving is available in the Model Manager Advanced CLIPMergeSimple N/A"},{"location":"nodes/communityNodes/","title":"Community Nodes","text":"<p>These are nodes that have been developed by the community, for the community. If you're not sure what a node is, you can learn more about nodes here.</p> <p>If you'd like to submit a node for the community, please refer to the node creation overview.</p> <p>To use a node, add the node to the <code>nodes</code> folder found in your InvokeAI install location. </p> <p>The suggested method is to use <code>git clone</code> to clone the repository the node is found in. This allows for easy updates of the node in the future. </p> <p>If you'd prefer, you can also just download the whole node folder from the linked repository and add it to the <code>nodes</code> folder. </p> <p>To use a community workflow, download the the <code>.json</code> node graph file and load it into Invoke AI via the Load Workflow button in the Workflow Editor. </p> <ul> <li>Community Nodes<ul> <li>Adapters-Linked</li> <li>Autostereogram</li> <li>Average Images</li> <li>Clean Image Artifacts After Cut</li> <li>Close Color Mask </li> <li>Clothing Mask</li> <li>Contrast Limited Adaptive Histogram Equalization</li> <li>Depth Map from Wavefront OBJ</li> <li>Film Grain</li> <li>Generative Grammar-Based Prompt Nodes</li> <li>GPT2RandomPromptMaker</li> <li>Grid to Gif</li> <li>Halftone</li> <li>Hand Refiner with MeshGraphormer</li> <li>Image and Mask Composition Pack</li> <li>Image Dominant Color</li> <li>Image to Character Art Image Nodes</li> <li>Image Picker</li> <li>Image Resize Plus</li> <li>Latent Upscale</li> <li>Load Video Frame</li> <li>Make 3D</li> <li>Mask Operations</li> <li>Match Histogram</li> <li>Metadata-Linked</li> <li>Negative Image</li> <li>Nightmare Promptgen </li> <li>Oobabooga</li> <li>Prompt Tools</li> <li>Remote Image</li> <li>BriaAI Background Remove</li> <li>Remove Background </li> <li>Retroize</li> <li>Size Stepper Nodes</li> <li>Simple Skin Detection</li> <li>Text font to Image</li> <li>Thresholding</li> <li>Unsharp Mask</li> <li>XY Image to Grid and Images to Grids nodes</li> </ul> </li> <li>Example Node Template</li> <li>Disclaimer</li> <li>Help</li> </ul>"},{"location":"nodes/communityNodes/#adapters-linked-nodes","title":"Adapters Linked Nodes","text":"<p>Description: A set of nodes for linked adapters (ControlNet, IP-Adaptor &amp; T2I-Adapter). This allows multiple adapters to be chained together without using a <code>collect</code> node which means it can be used inside an <code>iterate</code> node without any collecting on every iteration issues.</p> <ul> <li><code>ControlNet-Linked</code> - Collects ControlNet info to pass to other nodes.</li> <li><code>IP-Adapter-Linked</code> - Collects IP-Adapter info to pass to other nodes.</li> <li><code>T2I-Adapter-Linked</code> - Collects T2I-Adapter info to pass to other nodes.</li> </ul> <p>Note: These are inherited from the core nodes so any update to the core nodes should be reflected in these. </p> <p>Node Link: https://github.com/skunkworxdark/adapters-linked-nodes</p>"},{"location":"nodes/communityNodes/#autostereogram-nodes","title":"Autostereogram Nodes","text":"<p>Description: Generate autostereogram images from a depth map. This is not a very practically useful node but more a 90s nostalgic indulgence as I used to love these images as a kid.</p> <p>Node Link: https://github.com/skunkworxdark/autostereogram_nodes</p> <p>Example Usage:  -&gt;  -&gt;  </p>"},{"location":"nodes/communityNodes/#average-images","title":"Average Images","text":"<p>Description: This node takes in a collection of images of the same size and averages them as output. It converts everything to RGB mode first.</p> <p>Node Link: https://github.com/JPPhoto/average-images-node</p>"},{"location":"nodes/communityNodes/#clean-image-artifacts-after-cut","title":"Clean Image Artifacts After Cut","text":"<p>Description: Removes residual artifacts after an image is separated from its background.</p> <p>Node Link: https://github.com/VeyDlin/clean-artifact-after-cut-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#close-color-mask","title":"Close Color Mask","text":"<p>Description: Generates a mask for images based on a closely matching color, useful for color-based selections.</p> <p>Node Link: https://github.com/VeyDlin/close-color-mask-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#clothing-mask","title":"Clothing Mask","text":"<p>Description: Employs a U2NET neural network trained for the segmentation of clothing items in images.</p> <p>Node Link: https://github.com/VeyDlin/clothing-mask-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#contrast-limited-adaptive-histogram-equalization","title":"Contrast Limited Adaptive Histogram Equalization","text":"<p>Description: Enhances local image contrast using adaptive histogram equalization with contrast limiting.</p> <p>Node Link: https://github.com/VeyDlin/clahe-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#depth-map-from-wavefront-obj","title":"Depth Map from Wavefront OBJ","text":"<p>Description: Render depth maps from Wavefront .obj files (triangulated) using this simple 3D renderer utilizing numpy and matplotlib to compute and color the scene. There are simple parameters to change the FOV, camera position, and model orientation.</p> <p>To be imported, an .obj must use triangulated meshes, so make sure to enable that option if exporting from a 3D modeling program. This renderer makes each triangle a solid color based on its average depth, so it will cause anomalies if your .obj has large triangles. In Blender, the Remesh modifier can be helpful to subdivide a mesh into small pieces that work well given these limitations.</p> <p>Node Link: https://github.com/dwringer/depth-from-obj-node</p> <p>Example Usage: </p>"},{"location":"nodes/communityNodes/#film-grain","title":"Film Grain","text":"<p>Description: This node adds a film grain effect to the input image based on the weights, seeds, and blur radii parameters. It works with RGB input images only.</p> <p>Node Link: https://github.com/JPPhoto/film-grain-node</p>"},{"location":"nodes/communityNodes/#generative-grammar-based-prompt-nodes","title":"Generative Grammar-Based Prompt Nodes","text":"<p>Description: This set of 3 nodes generates prompts from simple user-defined grammar rules (loaded from custom files - examples provided below). The prompts are made by recursively expanding a special template string, replacing nonterminal \"parts-of-speech\" until no nonterminal terms remain in the string.</p> <p>This includes 3 Nodes: - Lookup Table from File - loads a YAML file \"prompt\" section (or of a whole folder of YAML's) into a JSON-ified dictionary (Lookups output) - Lookups Entry from Prompt - places a single entry in a new Lookups output under the specified heading - Prompt from Lookup Table - uses a Collection of Lookups as grammar rules from which to randomly generate prompts.</p> <p>Node Link: https://github.com/dwringer/generative-grammar-prompt-nodes</p> <p>Example Usage: </p>"},{"location":"nodes/communityNodes/#gpt2randompromptmaker","title":"GPT2RandomPromptMaker","text":"<p>Description: A node for InvokeAI utilizes the GPT-2 language model to generate random prompts based on a provided seed and context.</p> <p>Node Link: https://github.com/mickr777/GPT2RandomPromptMaker</p> <p>Output Examples </p> <p>Generated Prompt: An enchanted weapon will be usable by any character regardless of their alignment.</p> <p></p>"},{"location":"nodes/communityNodes/#grid-to-gif","title":"Grid to Gif","text":"<p>Description: One node that turns a grid image into an image collection, one node that turns an image collection into a gif.</p> <p>Node Link: https://github.com/mildmisery/invokeai-GridToGifNode/blob/main/GridToGif.py</p> <p>Example Node Graph: https://github.com/mildmisery/invokeai-GridToGifNode/blob/main/Grid%20to%20Gif%20Example%20Workflow.json</p> <p>Output Examples </p> <p> </p>"},{"location":"nodes/communityNodes/#halftone","title":"Halftone","text":"<p>Description: Halftone converts the source image to grayscale and then performs halftoning. CMYK Halftone converts the image to CMYK and applies a per-channel halftoning to make the source image look like a magazine or newspaper. For both nodes, you can specify angles and halftone dot spacing.</p> <p>Node Link: https://github.com/JPPhoto/halftone-node</p> <p>Example</p> <p>Input:</p> <p></p> <p>Halftone Output:</p> <p></p> <p>CMYK Halftone Output:</p> <p></p>"},{"location":"nodes/communityNodes/#hand-refiner-with-meshgraphormer","title":"Hand Refiner with MeshGraphormer","text":"<p>Description: Hand Refiner takes in your image and automatically generates a fixed depth map for the hands along with a mask of the hands region that will conveniently allow you to use them along with ControlNet to fix the wonky hands generated by Stable Diffusion</p> <p>Node Link: https://github.com/blessedcoolant/invoke_meshgraphormer</p> <p>View </p>"},{"location":"nodes/communityNodes/#image-and-mask-composition-pack","title":"Image and Mask Composition Pack","text":"<p>Description: This is a pack of nodes for composing masks and images, including a simple text mask creator and both image and latent offset nodes. The offsets wrap around, so these can be used in conjunction with the Seamless node to progressively generate centered on different parts of the seamless tiling.</p> <p>This includes 15 Nodes:</p> <ul> <li>Adjust Image Hue Plus - Rotate the hue of an image in one of several different color spaces.</li> <li>Blend Latents/Noise (Masked) - Use a mask to blend part of one latents tensor [including Noise outputs] into another. Can be used to \"renoise\" sections during a multi-stage [masked] denoising process.</li> <li>Enhance Image - Boost or reduce color saturation, contrast, brightness, sharpness, or invert colors of any image at any stage with this simple wrapper for pillow [PIL]'s ImageEnhance module.</li> <li>Equivalent Achromatic Lightness - Calculates image lightness accounting for Helmholtz-Kohlrausch effect based on a method described by High, Green, and Nussbaum (2023).</li> <li>Text to Mask (Clipseg) - Input a prompt and an image to generate a mask representing areas of the image matched by the prompt.</li> <li>Text to Mask Advanced (Clipseg) - Output up to four prompt masks combined with logical \"and\", logical \"or\", or as separate channels of an RGBA image.</li> <li>Image Layer Blend - Perform a layered blend of two images using alpha compositing. Opacity of top layer is selectable, with optional mask and several different blend modes/color spaces.</li> <li>Image Compositor - Take a subject from an image with a flat backdrop and layer it on another image using a chroma key or flood select background removal.</li> <li>Image Dilate or Erode - Dilate or expand a mask (or any image!). This is equivalent to an expand/contract operation.</li> <li>Image Value Thresholds - Clip an image to pure black/white beyond specified thresholds.</li> <li>Offset Latents - Offset a latents tensor in the vertical and/or horizontal dimensions, wrapping it around.</li> <li>Offset Image - Offset an image in the vertical and/or horizontal dimensions, wrapping it around.</li> <li>Rotate/Flip Image - Rotate an image in degrees clockwise/counterclockwise about its center, optionally resizing the image boundaries to fit, or flipping it about the vertical and/or horizontal axes.</li> <li>Shadows/Highlights/Midtones - Extract three masks (with adjustable hard or soft thresholds) representing shadows, midtones, and highlights regions of an image.</li> <li>Text Mask (simple 2D) - create and position a white on black (or black on white) line of text using any font locally available to Invoke.</li> </ul> <p>Node Link: https://github.com/dwringer/composition-nodes</p> <p></p>"},{"location":"nodes/communityNodes/#image-dominant-color","title":"Image Dominant Color","text":"<p>Description: Identifies and extracts the dominant color from an image using k-means clustering.</p> <p>Node Link: https://github.com/VeyDlin/image-dominant-color-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#image-to-character-art-image-nodes","title":"Image to Character Art Image Nodes","text":"<p>Description: Group of nodes to convert an input image into ascii/unicode art Image</p> <p>Node Link: https://github.com/mickr777/imagetoasciiimage</p> <p>Output Examples</p> <p> </p>"},{"location":"nodes/communityNodes/#image-picker","title":"Image Picker","text":"<p>Description: This InvokeAI node takes in a collection of images and randomly chooses one. This can be useful when you have a number of poses to choose from for a ControlNet node, or a number of input images for another purpose.</p> <p>Node Link: https://github.com/JPPhoto/image-picker-node</p>"},{"location":"nodes/communityNodes/#image-resize-plus","title":"Image Resize Plus","text":"<p>Description: Provides various image resizing options such as fill, stretch, fit, center, and crop.</p> <p>Node Link: https://github.com/VeyDlin/image-resize-plus-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#latent-upscale","title":"Latent Upscale","text":"<p>Description: This node uses a small (~2.4mb) model to upscale the latents used in a Stable Diffusion 1.5 or Stable Diffusion XL image generation, rather than the typical interpolation method, avoiding the traditional downsides of the latent upscale technique.</p> <p>Node Link: https://github.com/gogurtenjoyer/latent-upscale</p>"},{"location":"nodes/communityNodes/#load-video-frame","title":"Load Video Frame","text":"<p>Description: This is a video frame image provider + indexer/video creation nodes for hooking up to iterators and ranges and ControlNets and such for invokeAI node experimentation. Think animation + ControlNet outputs.</p> <p>Node Link: https://github.com/helix4u/load_video_frame</p> <p>Output Example: </p>"},{"location":"nodes/communityNodes/#make-3d","title":"Make 3D","text":"<p>Description: Create compelling 3D stereo images from 2D originals.</p> <p>Node Link: https://gitlab.com/srcrr/shift3d/-/raw/main/make3d.py</p> <p>Example Node Graph: https://gitlab.com/srcrr/shift3d/-/raw/main/example-workflow.json?ref_type=heads&amp;inline=false</p> <p>Output Examples </p> <p> </p>"},{"location":"nodes/communityNodes/#mask-operations","title":"Mask Operations","text":"<p>Description: Offers logical operations (OR, SUB, AND) for combining and manipulating image masks.</p> <p>Node Link: https://github.com/VeyDlin/mask-operations-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#match-histogram","title":"Match Histogram","text":"<p>Description: An InvokeAI node to match a histogram from one image to another.  This is a bit like the <code>color correct</code> node in the main InvokeAI but this works in the YCbCr colourspace and can handle images of different sizes. Also does not require a mask input. - Option to only transfer luminance channel. - Option to save output as grayscale</p> <p>A good use case for this node is to normalize the colors of an image that has been through the tiled scaling workflow of my XYGrid Nodes. </p> <p>See full docs here: https://github.com/skunkworxdark/Prompt-tools-nodes/edit/main/README.md</p> <p>Node Link: https://github.com/skunkworxdark/match_histogram</p> <p>Output Examples </p> <p></p>"},{"location":"nodes/communityNodes/#metadata-linked-nodes","title":"Metadata Linked Nodes","text":"<p>Description: A set of nodes for Metadata. Collect Metadata from within an <code>iterate</code> node &amp; extract metadata from an image.</p> <ul> <li><code>Metadata Item Linked</code> - Allows collecting of metadata while within an iterate node with no need for a collect node or conversion to metadata node</li> <li><code>Metadata From Image</code> - Provides Metadata from an image</li> <li><code>Metadata To String</code> - Extracts a String value of a label from metadata</li> <li><code>Metadata To Integer</code> - Extracts an Integer value of a label from metadata</li> <li><code>Metadata To Float</code> - Extracts a Float value of a label from metadata</li> <li><code>Metadata To Scheduler</code> - Extracts a Scheduler value of a label from metadata</li> <li><code>Metadata To Bool</code> - Extracts Bool types from metadata</li> <li><code>Metadata To Model</code> - Extracts model types from metadata</li> <li><code>Metadata To SDXL Model</code> - Extracts SDXL model types from metadata</li> <li><code>Metadata To LoRAs</code> - Extracts Loras from metadata. </li> <li><code>Metadata To SDXL LoRAs</code> - Extracts SDXL Loras from metadata</li> <li><code>Metadata To ControlNets</code> - Extracts ControNets from metadata</li> <li><code>Metadata To IP-Adapters</code> - Extracts IP-Adapters from metadata</li> <li><code>Metadata To T2I-Adapters</code> - Extracts T2I-Adapters from metadata</li> <li><code>Denoise Latents + Metadata</code> - This is an inherited version of the existing <code>Denoise Latents</code> node but with a metadata input and output. </li> </ul> <p>Node Link: https://github.com/skunkworxdark/metadata-linked-nodes</p>"},{"location":"nodes/communityNodes/#negative-image","title":"Negative Image","text":"<p>Description: Creates a negative version of an image, effective for visual effects and mask inversion.</p> <p>Node Link: https://github.com/VeyDlin/negative-image-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#nightmare-promptgen","title":"Nightmare Promptgen","text":"<p>Description: Nightmare Prompt Generator - Uses a local text generation model to create unique imaginative (but usually nightmarish) prompts for InvokeAI. By default, it allows you to choose from some gpt-neo models I finetuned on over 2500 of my own InvokeAI prompts in Compel format, but you're able to add your own, as well. Offers support for replacing any troublesome words with a random choice from list you can also define.</p> <p>Node Link: https://github.com/gogurtenjoyer/nightmare-promptgen</p>"},{"location":"nodes/communityNodes/#oobabooga","title":"Oobabooga","text":"<p>Description: asks a local LLM running in Oobabooga's Text-Generation-Webui to write a prompt based on the user input.</p> <p>Link: https://github.com/sammyf/oobabooga-node</p> <p>Example:</p> <p>\"describe a new mystical  creature in its natural environment\"</p> <p>can return</p> <p>\"The mystical creature I am describing to you is called the \"Glimmerwing\". It is a majestic, iridescent being that inhabits the depths of the most enchanted forests and glimmering lakes. Its body is covered in shimmering scales that reflect every color of the rainbow, and it has delicate, translucent wings that sparkle like diamonds in the sunlight. The Glimmerwing's home is a crystal-clear lake, surrounded by towering trees with leaves that shimmer like jewels. In this serene environment, the Glimmerwing spends its days swimming gracefully through the water, chasing schools of glittering fish and playing with the gentle ripples of the lake's surface. As the sun sets, the Glimmerwing perches on a branch of one of the trees, spreading its wings to catch the last rays of light. The creature's scales glow softly, casting a rainbow of colors across the forest floor. The Glimmerwing sings a haunting melody, its voice echoing through the stillness of the night air. Its song is said to have the power to heal the sick and bring peace to troubled souls. Those who are lucky enough to hear the Glimmerwing's song are forever changed by its beauty and grace.\"</p> <p></p> <p>Requirement</p> <p>a Text-Generation-Webui instance (might work remotely too, but I never tried it) and obviously InvokeAI 3.x</p> <p>Note</p> <p>This node works best with SDXL models, especially as the style can be described independently of the LLM's output.</p>"},{"location":"nodes/communityNodes/#prompt-tools","title":"Prompt Tools","text":"<p>Description: A set of InvokeAI nodes that add general prompt (string) manipulation tools.  Designed to accompany the <code>Prompts From File</code> node and other prompt generation nodes.</p> <ol> <li><code>Prompt To File</code> - saves a prompt or collection of prompts to a file. one per line. There is an append/overwrite option.</li> <li><code>PTFields Collect</code> - Converts image generation fields into a Json format string that can be passed to Prompt to file. </li> <li><code>PTFields Expand</code> - Takes Json string and converts it to individual generation parameters. This can be fed from the Prompts to file node.</li> <li><code>Prompt Strength</code> - Formats prompt with strength like the weighted format of compel </li> <li><code>Prompt Strength Combine</code> - Combines weighted prompts for .and()/.blend()</li> <li><code>CSV To Index String</code> - Gets a string from a CSV by index. Includes a Random index option</li> </ol> <p>The following Nodes are now included in v3.2 of Invoke and are nolonger in this set of tools. - <code>Prompt Join</code> -&gt; <code>String Join</code> - <code>Prompt Join Three</code> -&gt; <code>String Join Three</code> - <code>Prompt Replace</code> -&gt; <code>String Replace</code> - <code>Prompt Split Neg</code> -&gt; <code>String Split Neg</code></p> <p>See full docs here: https://github.com/skunkworxdark/Prompt-tools-nodes/edit/main/README.md</p> <p>Node Link: https://github.com/skunkworxdark/Prompt-tools-nodes</p> <p>Workflow Examples </p> <p></p>"},{"location":"nodes/communityNodes/#remote-image","title":"Remote Image","text":"<p>Description: This is a pack of nodes to interoperate with other services, be they public websites or bespoke local servers. The pack consists of these nodes:</p> <ul> <li>Load Remote Image - Lets you load remote images such as a realtime webcam image, an image of the day, or dynamically created images.</li> <li>Post Image to Remote Server - Lets you upload an image to a remote server using an HTTP POST request, eg for storage, display or further processing.</li> </ul> <p>Node Link: https://github.com/fieldOfView/InvokeAI-remote_image</p>"},{"location":"nodes/communityNodes/#briaai-remove-background","title":"BriaAI Remove Background","text":"<p>Description: Implements one click background removal with BriaAI's new version 1.4 model which seems to be be producing better results than any other previous background removal tool.</p> <p>Node Link: https://github.com/blessedcoolant/invoke_bria_rmbg</p> <p>View </p>"},{"location":"nodes/communityNodes/#remove-background","title":"Remove Background","text":"<p>Description: An integration of the rembg package to remove backgrounds from images using multiple U2NET models.</p> <p>Node Link: https://github.com/VeyDlin/remove-background-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#retroize","title":"Retroize","text":"<p>Description: Retroize is a collection of nodes for InvokeAI to \"Retroize\" images. Any image can be given a fresh coat of retro paint with these nodes, either from your gallery or from within the graph itself. It includes nodes to pixelize, quantize, palettize, and ditherize images; as well as to retrieve palettes from existing images.</p> <p>Node Link: https://github.com/Ar7ific1al/invokeai-retroizeinode/</p> <p>Retroize Output Examples</p> <p></p>"},{"location":"nodes/communityNodes/#simple-skin-detection","title":"Simple Skin Detection","text":"<p>Description: Detects skin in images based on predefined color thresholds.</p> <p>Node Link: https://github.com/VeyDlin/simple-skin-detection-node</p> <p>View: </p>"},{"location":"nodes/communityNodes/#size-stepper-nodes","title":"Size Stepper Nodes","text":"<p>Description: This is a set of nodes for calculating the necessary size increments for doing upscaling workflows. Use the Final Size &amp; Orientation node to enter your full size dimensions and orientation (portrait/landscape/random), then plug that and your initial generation dimensions into the Ideal Size Stepper and get 1, 2, or 3 intermediate pairs of dimensions for upscaling. Note this does not output the initial size or full size dimensions: the 1, 2, or 3 outputs of this node are only the intermediate sizes.</p> <p>A third node is included, Random Switch (Integers), which is just a generic version of Final Size with no orientation selection.</p> <p>Node Link: https://github.com/dwringer/size-stepper-nodes</p> <p>Example Usage: </p>"},{"location":"nodes/communityNodes/#text-font-to-image","title":"Text font to Image","text":"<p>Description: text font to text image node for InvokeAI, download a font to use (or if in font cache uses it from there), the text is always resized to the image size, but can control that with padding, optional 2<sup>nd</sup> line</p> <p>Node Link: https://github.com/mickr777/textfontimage</p> <p>Output Examples</p> <p></p> <p>Results after using the depth controlnet</p> <p> </p>"},{"location":"nodes/communityNodes/#thresholding","title":"Thresholding","text":"<p>Description: This node generates masks for highlights, midtones, and shadows given an input image. You can optionally specify a blur for the lookup table used in making those masks from the source image.</p> <p>Node Link: https://github.com/JPPhoto/thresholding-node</p> <p>Examples</p> <p>Input:</p> <p></p> <p>Highlights/Midtones/Shadows:</p> <p> </p> <p>Highlights/Midtones/Shadows (with LUT blur enabled):</p> <p> </p>"},{"location":"nodes/communityNodes/#unsharp-mask","title":"Unsharp Mask","text":"<p>Description: Applies an unsharp mask filter to an image, preserving its alpha channel in the process.</p> <p>Node Link: https://github.com/JPPhoto/unsharp-mask-node</p>"},{"location":"nodes/communityNodes/#xy-image-to-grid-and-images-to-grids-nodes","title":"XY Image to Grid and Images to Grids nodes","text":"<p>Description: These nodes add the following to InvokeAI: - Generate grids of images from multiple input images - Create XY grid images with labels from parameters - Split images into overlapping tiles for processing (for super-resolution workflows) - Recombine image tiles into a single output image blending the seams </p> <p>The nodes include: 1. <code>Images To Grids</code> - Combine multiple images into a grid of images 2. <code>XYImage To Grid</code> - Take X &amp; Y params and creates a labeled image grid. 3. <code>XYImage Tiles</code> - Super-resolution (embiggen) style tiled resizing 4. <code>Image Tot XYImages</code> - Takes an image and cuts it up into a number of columns and rows. 5. Multiple supporting nodes - Helper nodes for data wrangling and building <code>XYImage</code> collections</p> <p>See full docs here: https://github.com/skunkworxdark/XYGrid_nodes/edit/main/README.md</p> <p>Node Link: https://github.com/skunkworxdark/XYGrid_nodes</p> <p>Output Examples </p> <p></p>"},{"location":"nodes/communityNodes/#example-node-template","title":"Example Node Template","text":"<p>Description: This node allows you to do super cool things with InvokeAI.</p> <p>Node Link: https://github.com/invoke-ai/InvokeAI/blob/main/invokeai/app/invocations/prompt.py</p> <p>Example Workflow: https://github.com/invoke-ai/InvokeAI/blob/docs/main/docs/workflows/Prompt_from_File.json</p> <p>Output Examples </p> <p></p>"},{"location":"nodes/communityNodes/#disclaimer","title":"Disclaimer","text":"<p>The nodes linked have been developed and contributed by members of the Invoke AI community. While we strive to ensure the quality and safety of these contributions, we do not guarantee the reliability or security of the nodes. If you have issues or concerns with any of the nodes below, please raise it on GitHub or in the Discord.</p>"},{"location":"nodes/communityNodes/#help","title":"Help","text":"<p>If you run into any issues with a node, please post in the InvokeAI Discord. </p>"},{"location":"nodes/contributingNodes/","title":"Contributing Nodes","text":"<p>To learn about the specifics of creating a new node, please visit our Node creation documentation. </p> <p>Once you\u2019ve created a node and confirmed that it behaves as expected locally, follow these steps: </p> <ul> <li>Make sure the node is contained in a new Python (.py) file. Preferably, the node is in a repo with a README detailing the nodes usage &amp; examples to help others more easily use your node. Including the tag \"invokeai-node\" in your repository's README can also help other users find it more easily. </li> <li>Submit a pull request with a link to your node(s) repo in GitHub against the <code>main</code> branch to add the node to the Community Nodes list<ul> <li>Make sure you are following the template below and have provided all relevant details about the node and what it does. Example output images and workflows are very helpful for other users looking to use your node.</li> </ul> </li> <li>A maintainer will review the pull request and node. If the node is aligned with the direction of the project, you may be asked for permission to include it in the core project.</li> </ul>"},{"location":"nodes/contributingNodes/#community-node-template","title":"Community Node Template","text":"<pre><code>--------------------------------\n### Super Cool Node Template\n\n**Description:** This node allows you to do super cool things with InvokeAI.\n\n**Node Link:** https://github.com/invoke-ai/InvokeAI/fake_node.py\n\n**Example Node Graph:**  https://github.com/invoke-ai/InvokeAI/fake_node_graph.json\n\n**Output Examples** \n\n![InvokeAI](https://invoke-ai.github.io/InvokeAI/assets/invoke_ai_banner.png)\n</code></pre>"},{"location":"nodes/defaultNodes/","title":"List of Default Nodes","text":"<p>The table below contains a list of the default nodes shipped with InvokeAI and their descriptions.</p> Node  Function Add Integers Adds two numbers Boolean Primitive Collection A collection of boolean primitive values Boolean Primitive A boolean primitive value Canny Processor Canny edge detection for ControlNet CenterPadCrop Pad or crop an image's sides from the center by specified pixels. Positive values are outside of the image. CLIP Skip Skip layers in clip text_encoder model. Collect Collects values into a collection Color Correct Shifts the colors of a target image to match the reference image, optionally using a mask to only color-correct certain regions of the target image. Color Primitive A color primitive value Compel Prompt Parse prompt using compel package to conditioning. Conditioning Primitive Collection A collection of conditioning tensor primitive values Conditioning Primitive A conditioning tensor primitive value Content Shuffle Processor Applies content shuffle processing to image ControlNet Collects ControlNet info to pass to other nodes Denoise Latents Denoises noisy latents to decodable images Divide Integers Divides two numbers Dynamic Prompt Parses a prompt using adieyal/dynamicprompts' random or combinatorial generator FaceMask Generates masks for faces in an image to use with Inpainting FaceIdentifier Identifies and labels faces in an image FaceOff Creates a new image that is a scaled bounding box with a mask on the face for Inpainting Float Math Perform basic math operations on two floats Float Primitive Collection A collection of float primitive values Float Primitive A float primitive value Float Range Creates a range HED (softedge) Processor Applies HED edge detection to image Blur Image Blurs an image Extract Image Channel Gets a channel from an image. Image Primitive Collection A collection of image primitive values Integer Math Perform basic math operations on two integers Convert Image Mode Converts an image to a different mode. Crop Image Crops an image to a specified box. The box can be outside of the image. Ideal Size Calculates an ideal image size for latents for a first pass of a multi-pass upscaling to avoid duplication and other artifacts Image Hue Adjustment Adjusts the Hue of an image. Inverse Lerp Image Inverse linear interpolation of all pixels of an image Image Primitive An image primitive value Lerp Image Linear interpolation of all pixels of an image Offset Image Channel Add to or subtract from an image color channel by a uniform value. Multiply Image Channel Multiply or Invert an image color channel by a scalar value. Multiply Images Multiplies two images together using <code>PIL.ImageChops.multiply()</code>. Blur NSFW Image Add blur to NSFW-flagged images Paste Image Pastes an image into another image. ImageProcessor Base class for invocations that preprocess images for ControlNet Resize Image Resizes an image to specific dimensions Round Float Rounds a float to a specified number of decimal places Float to Integer Converts a float to an integer. Optionally rounds to an even multiple of a input number. Scale Image Scales an image by a factor Image to Latents Encodes an image into latents. Add Invisible Watermark Add an invisible watermark to an image Solid Color Infill Infills transparent areas of an image with a solid color PatchMatch Infill Infills transparent areas of an image using the PatchMatch algorithm Tile Infill Infills transparent areas of an image with tiles of the image Integer Primitive Collection A collection of integer primitive values Integer Primitive An integer primitive value Iterate Iterates over a list of items Latents Primitive Collection A collection of latents tensor primitive values Latents Primitive A latents tensor primitive value Latents to Image Generates an image from latents. Leres (Depth) Processor Applies leres processing to image Lineart Anime Processor Applies line art anime processing to image Lineart Processor Applies line art processing to image LoRA Loader Apply selected lora to unet and text_encoder. Main Model Loader Loads a main model, outputting its submodels. Combine Mask Combine two masks together by multiplying them using <code>PIL.ImageChops.multiply()</code>. Mask Edge Applies an edge mask to an image Mask from Alpha Extracts the alpha channel of an image as a mask. Mediapipe Face Processor Applies mediapipe face processing to image Midas (Depth) Processor Applies Midas depth processing to image MLSD Processor Applies MLSD processing to image Multiply Integers Multiplies two numbers Noise Generates latent noise. Normal BAE Processor Applies NormalBae processing to image ONNX Latents to Image Generates an image from latents. ONNX Prompt (Raw) A node to process inputs and produce outputs. May use dependency injection in init to receive providers. ONNX Text to Latents Generates latents from conditionings. ONNX Model Loader Loads a main model, outputting its submodels. OpenCV Inpaint Simple inpaint using opencv. DW Openpose Processor Applies Openpose processing to image PIDI Processor Applies PIDI processing to image Prompts from File Loads prompts from a text file Random Integer Outputs a single random integer. Random Range Creates a collection of random numbers Integer Range Creates a range of numbers from start to stop with step Integer Range of Size Creates a range from start to start + size with step Resize Latents Resizes latents to explicit width/height (in pixels). Provided dimensions are floor-divided by 8. SDXL Compel Prompt Parse prompt using compel package to conditioning. SDXL LoRA Loader Apply selected lora to unet and text_encoder. SDXL Main Model Loader Loads an sdxl base model, outputting its submodels. SDXL Refiner Compel Prompt Parse prompt using compel package to conditioning. SDXL Refiner Model Loader Loads an sdxl refiner model, outputting its submodels. Scale Latents Scales latents by a given factor. Segment Anything Processor Applies segment anything processing to image Show Image Displays a provided image, and passes it forward in the pipeline. Step Param Easing Experimental per-step parameter easing for denoising steps String Primitive Collection A collection of string primitive values String Primitive A string primitive value Subtract Integers Subtracts two numbers Tile Resample Processor Tile resampler processor Upscale (RealESRGAN) Upscales an image using RealESRGAN. VAE Loader Loads a VAE model, outputting a VaeLoaderOutput Zoe (Depth) Processor Applies Zoe depth processing to image"},{"location":"nodes/exampleWorkflows/","title":"Example Workflows","text":"<p>We've curated some example workflows for you to get started with Workflows in InvokeAI! These can also be found in the Workflow Library, located in the Workflow Editor of Invoke.</p> <p>To use them, right click on your desired workflow, follow the link to GitHub and click the \"\u2b07\" button to download the raw file. You can then use the \"Load Workflow\" functionality in InvokeAI to load the workflow and start generating images!</p> <p>If you're interested in finding more workflows, checkout the #share-your-workflows channel in the InvokeAI Discord.</p> <ul> <li>SD1.5 / SD2 Text to Image</li> <li>SDXL Text to Image</li> <li>SDXL Text to Image with Refiner</li> <li>Multi ControlNet (Canny &amp; Depth)</li> <li>Tiled Upscaling with ControlNet</li> <li>Prompt From File</li> <li>Face Detailer with IP-Adapter &amp; ControlNet</li> <li>FaceMask</li> <li>FaceOff with 2x Face Scaling</li> <li>QR Code Monster</li> </ul>"},{"location":"nodes/overview/","title":"Nodes","text":""},{"location":"nodes/overview/#what-are-nodes","title":"What are Nodes?","text":"<p>An Node is simply a single operation that takes in inputs and returns out outputs. Multiple nodes can be linked together to create more complex functionality. All InvokeAI features are added through nodes.</p>"},{"location":"nodes/overview/#anatomy-of-a-node","title":"Anatomy of a Node","text":"<p>Individual nodes are made up of the following:</p> <ul> <li>Inputs: Edge points on the left side of the node window where you connect outputs from other nodes.</li> <li>Outputs: Edge points on the right side of the node window where you connect to inputs on other nodes.</li> <li>Options: Various options which are either manually configured, or overridden by connecting an output from another node to the input.</li> </ul> <p>With nodes, you can can easily extend the image generation capabilities of InvokeAI, and allow you build workflows that suit your needs. </p> <p>You can read more about nodes and the node editor here. </p> <p>To get started with nodes, take a look at some of our examples for common workflows</p>"},{"location":"nodes/overview/#downloading-new-nodes","title":"Downloading New Nodes","text":"<p>To download a new node, visit our list of Community Nodes. These are nodes that have been created by the community, for the community. </p>"},{"location":"nodes/detailedNodes/faceTools/","title":"Face Nodes","text":""},{"location":"nodes/detailedNodes/faceTools/#faceoff","title":"FaceOff","text":"<p>FaceOff mimics a user finding a face in an image and resizing the bounding box around the head in Canvas.</p> <p>Enter a face ID (found with FaceIdentifier) to choose which face to mask.</p> <p>Just as you would add more context inside the bounding box by making it larger in Canvas, the node gives you a padding input (in pixels) which will simultaneously add more context, and increase the resolution of the bounding box so the face remains the same size inside it.</p> <p>The \"Minimum Confidence\" input defaults to 0.5 (50%), and represents a pass/fail threshold a detected face must reach for it to be processed. Lowering this value may help if detection is failing. If the detected masks are imperfect and stray too far outside/inside of faces, the node gives you X &amp; Y offsets to shrink/grow the masks by a multiplier.</p> <p>FaceOff will output the face in a bounded image, taking the face off of the original image for input into any node that accepts image inputs. The node also outputs a face mask with the dimensions of the bounded image. The X &amp; Y outputs are for connecting to the X &amp; Y inputs of the Paste Image node, which will place the bounded image back on the original image using these coordinates.</p>"},{"location":"nodes/detailedNodes/faceTools/#inputsoutputs","title":"Inputs/Outputs","text":"Input Description Image Image for face detection Face ID The face ID to process, numbered from 0. Multiple faces not supported. Find a face's ID with FaceIdentifier node. Minimum Confidence Minimum confidence for face detection (lower if detection is failing) X Offset X-axis offset of the mask Y Offset Y-axis offset of the mask Padding All-axis padding around the mask in pixels Chunk Chunk (or divide) the image into sections to greatly improve face detection success. Defaults to off, but will activate if no faces are detected normally. Activate to chunk by default. Output Description Bounded Image Original image bound, cropped, and resized Width The width of the bounded image in pixels Height The height of the bounded image in pixels Mask The output mask X The x coordinate of the bounding box's left side Y The y coordinate of the bounding box's top side"},{"location":"nodes/detailedNodes/faceTools/#facemask","title":"FaceMask","text":"<p>FaceMask mimics a user drawing masks on faces in an image in Canvas.</p> <p>The \"Face IDs\" input allows the user to select specific faces to be masked. Leave empty to detect and mask all faces, or a comma-separated list for a specific combination of faces (ex: <code>1,2,4</code>). A single integer will detect and mask that specific face. Find face IDs with the FaceIdentifier node.</p> <p>The \"Minimum Confidence\" input defaults to 0.5 (50%), and represents a pass/fail threshold a detected face must reach for it to be processed. Lowering this value may help if detection is failing.</p> <p>If the detected masks are imperfect and stray too far outside/inside of faces, the node gives you X &amp; Y offsets to shrink/grow the masks by a multiplier. All masks shrink/grow together by the X &amp; Y offset values.</p> <p>By default, masks are created to change faces. When masks are inverted, they change surrounding areas, protecting faces.</p>"},{"location":"nodes/detailedNodes/faceTools/#inputsoutputs_1","title":"Inputs/Outputs","text":"Input Description Image Image for face detection Face IDs Comma-separated list of face ids to mask eg '0,2,7'. Numbered from 0. Leave empty to mask all. Find face IDs with FaceIdentifier node. Minimum Confidence Minimum confidence for face detection (lower if detection is failing) X Offset X-axis offset of the mask Y Offset Y-axis offset of the mask Chunk Chunk (or divide) the image into sections to greatly improve face detection success. Defaults to off, but will activate if no faces are detected normally. Activate to chunk by default. Invert Mask Toggle to invert the face mask Output Description Image The original image Width The width of the image in pixels Height The height of the image in pixels Mask The output face mask"},{"location":"nodes/detailedNodes/faceTools/#faceidentifier","title":"FaceIdentifier","text":"<p>FaceIdentifier outputs an image with detected face IDs printed in white numbers onto each face.</p> <p>Face IDs can then be used in FaceMask and FaceOff to selectively mask all, a specific combination, or single faces.</p> <p>The FaceIdentifier output image is generated for user reference, and isn't meant to be passed on to other image-processing nodes.</p> <p>The \"Minimum Confidence\" input defaults to 0.5 (50%), and represents a pass/fail threshold a detected face must reach for it to be processed. Lowering this value may help if detection is failing. If an image is changed in the slightest, run it through FaceIdentifier again to get updated FaceIDs.</p>"},{"location":"nodes/detailedNodes/faceTools/#inputsoutputs_2","title":"Inputs/Outputs","text":"Input Description Image Image for face detection Minimum Confidence Minimum confidence for face detection (lower if detection is failing) Chunk Chunk (or divide) the image into sections to greatly improve face detection success. Defaults to off, but will activate if no faces are detected normally. Activate to chunk by default. Output Description Image The original image with small face ID numbers printed in white onto each face for user reference Width The width of the original image in pixels Height The height of the original image in pixels"},{"location":"nodes/detailedNodes/faceTools/#tips","title":"Tips","text":"<ul> <li>If not all target faces are being detected, activate Chunk to bypass full   image face detection and greatly improve detection success.</li> <li>Final results will vary between full-image detection and chunking for faces   that are detectable by both due to the nature of the process. Try either to   your taste.</li> <li>Be sure Minimum Confidence is set the same when using FaceIdentifier with   FaceOff/FaceMask.</li> <li>For FaceOff, use the color correction node before faceplace to correct edges   being noticeable in the final image (see example screenshot).</li> <li>Non-inpainting models may struggle to paint/generate correctly around faces.</li> <li>If your face won't change the way you want it to no matter what you change,   consider that the change you're trying to make is too much at that resolution.   For example, if an image is only 512x768 total, the face might only be 128x128   or 256x256, much smaller than the 512x512 your SD1.5 model was probably   trained on. Try increasing the resolution of the image by upscaling or   resizing, add padding to increase the bounding box's resolution, or use an   image where the face takes up more pixels.</li> <li>If the resulting face seems out of place pasted back on the original image   (ie. too large, not proportional), add more padding on the FaceOff node to   give inpainting more context. Context and good prompting are important to   keeping things proportional.</li> <li>If you find the mask is too big/small and going too far outside/inside the   area you want to affect, adjust the x &amp; y offsets to shrink/grow the mask area</li> <li>Use a higher denoise start value to resemble aspects of the original face or   surroundings. Denoise start = 0 &amp; denoise end = 1 will make something new,   while denoise start = 0.50 &amp; denoise end = 1 will be 50% old and 50% new.</li> <li>mediapipe isn't good at detecting faces with lots of face paint, hair covering   the face, etc. Anything that obstructs the face will likely result in no faces   being detected.</li> <li>If you find your face isn't being detected, try lowering the minimum   confidence value from 0.5. This could result in false positives, however   (random areas being detected as faces and masked).</li> <li>After altering an image and wanting to process a different face in the newly   altered image, run the altered image through FaceIdentifier again to see the   new Face IDs. MediaPipe will most likely detect faces in a different order   after an image has been changed in the slightest.</li> </ul>"},{"location":"other/CONTRIBUTORS/","title":"Contributors","text":"<p>The list of all the amazing people who have contributed to the various features that you get to experience in this fork.</p> <p>We thank them for all of their time and hard work.</p>"},{"location":"other/CONTRIBUTORS/#original-author","title":"Original Author","text":"<ul> <li>Lincoln D. Stein</li> </ul>"},{"location":"other/CONTRIBUTORS/#current-core-team","title":"Current Core Team","text":"<ul> <li>@lstein (Lincoln Stein) - Co-maintainer</li> <li>@blessedcoolant - Co-maintainer</li> <li>@hipsterusername (Kent Keirsey) - Co-maintainer, CEO, Positive Vibes</li> <li>@psychedelicious (Spencer Mabrito) - Web Team Leader</li> <li>@chainchompa (Jennifer Player) - Web Development &amp; Chain-Chomping</li> <li>@josh is toast (Josh Corbett) - Web Development</li> <li>@cheerio (Mary Rogers) - Lead Engineer &amp; Web App Development</li> <li>@ebr (Eugene Brodsky) - Cloud/DevOps/Sofware engineer; your friendly neighbourhood cluster-autoscaler</li> <li>@sunija - Standalone version</li> <li>@genomancer (Gregg Helt) - Controlnet support</li> <li>@brandon (Brandon Rising) - Platform, Infrastructure, Backend Systems</li> <li>@ryanjdick (Ryan Dick) - Machine Learning &amp; Training</li> <li>@JPPhoto - Core image generation nodes</li> <li>@dunkeroni - Image generation backend</li> <li>@SkunkWorxDark - Image generation backend</li> <li>@keturn (Kevin Turner) - Diffusers</li> <li>@millu (Millun Atluri) - Community Wizard, Documentation, Node-wrangler, </li> <li>@glimmerleaf (Devon Hopkins) - Community Wizard</li> <li>@gogurt enjoyer - Discord moderator and end user support</li> <li>@whosawhatsis - Discord moderator and end user support</li> <li>@dwinrger - Discord moderator and end user support</li> <li>@526christian - Discord moderator and end user support</li> <li>@harvester62 -  Discord moderator and end user support</li> </ul>"},{"location":"other/CONTRIBUTORS/#honored-team-alumni","title":"Honored Team Alumni","text":"<ul> <li>@StAlKeR7779 (Sergey Borisov) - Torch stack, ONNX, model management, optimization</li> <li>@damian0815 - Attention Systems and Compel Maintainer</li> <li>@netsvetaev (Artur) - Localization support</li> <li>@Kyle0654 (Kyle Schouviller) - Node Architect and General Backend Wizard</li> <li>@tildebyte - Installation and configuration</li> <li>@mauwii (Matthias Wilde) - Installation, release, continuous integration</li> </ul>"},{"location":"other/CONTRIBUTORS/#full-list-of-contributors-by-commit-name","title":"Full List of Contributors by Commit Name","text":"<ul> <li>\uc774\uc2b9\uc11d</li> <li>AbdBarho</li> <li>ablattmann</li> <li>AdamOStark</li> <li>Adam Rice</li> <li>Airton Silva</li> <li>Aldo Hoeben</li> <li>Alexander Eichhorn</li> <li>Alexandre D. Roberge</li> <li>Alexandre Macabies</li> <li>Alfie John</li> <li>Andreas Rozek</li> <li>Andre LaBranche</li> <li>Andy Bearman</li> <li>Andy Luhrs</li> <li>Andy Pilate</li> <li>Anonymous</li> <li>Anthony Monthe</li> <li>Any-Winter-4079</li> <li>apolinario</li> <li>Ar7ific1al</li> <li>ArDiouscuros</li> <li>Armando C. Santisbon</li> <li>Arnold Cordewiner</li> <li>Arthur Holstvoogd</li> <li>artmen1516</li> <li>Artur</li> <li>Arturo Mendivil</li> <li>Ben Alkov</li> <li>Benjamin Warner</li> <li>Bernard Maltais</li> <li>blessedcoolant</li> <li>blhook</li> <li>BlueAmulet</li> <li>Bouncyknighter</li> <li>Brandon</li> <li>Brandon Rising</li> <li>Brent Ozar</li> <li>Brian Racer</li> <li>bsilvereagle</li> <li>c67e708d</li> <li>camenduru</li> <li>CapableWeb</li> <li>Carson Katri</li> <li>chainchompa</li> <li>Chloe</li> <li>Chris Dawson</li> <li>Chris Hayes</li> <li>Chris Jones</li> <li>chromaticist</li> <li>Claus F. Strasburger</li> <li>cmdr2</li> <li>cody</li> <li>Conor Reid</li> <li>Cora Johnson-Roberson</li> <li>coreco</li> <li>cosmii02</li> <li>cpacker</li> <li>Cragin Godley</li> <li>creachec</li> <li>CrypticWit</li> <li>d8ahazard</li> <li>damian</li> <li>damian0815</li> <li>Damian at mba</li> <li>Damian Stewart</li> <li>Daniel Manzke</li> <li>Danny Beer</li> <li>Dan Sully</li> <li>Darren Ringer</li> <li>David Burnett</li> <li>David Ford</li> <li>David Regla</li> <li>David Sisco</li> <li>David Wager</li> <li>Daya Adianto</li> <li>db3000</li> <li>DekitaRPG</li> <li>Denis Olshin</li> <li>Dennis</li> <li>dependabot[bot]</li> <li>Dmitry Parnas</li> <li>Dobrynia100</li> <li>Dominic Letz</li> <li>DrGunnarMallon</li> <li>Drun555</li> <li>dunkeroni</li> <li>Edward Johan</li> <li>elliotsayes</li> <li>Elrik</li> <li>ElrikUnderlake</li> <li>Eric Khun</li> <li>Eric Wolf</li> <li>Eugene</li> <li>Eugene Brodsky</li> <li>ExperimentalCyborg</li> <li>Fabian Bahl</li> <li>Fabio 'MrWHO' Torchetti</li> <li>Fattire</li> <li>fattire</li> <li>Felipe Nogueira</li> <li>F\u00e9lix Sanz</li> <li>figgefigge</li> <li>Gabriel Mackievicz Telles</li> <li>gabrielrotbart</li> <li>gallegonovato</li> <li>G\u00e9rald LONLAS</li> <li>Gille</li> <li>GitHub Actions Bot</li> <li>glibesyck</li> <li>gogurtenjoyer</li> <li>Gohsuke Shimada</li> <li>greatwolf</li> <li>greentext2</li> <li>Gregg Helt</li> <li>H4rk</li> <li>H\u00e5vard Gulldahl</li> <li>henry</li> <li>Henry van Megen</li> <li>hipsterusername</li> <li>hj</li> <li>Hosted Weblate</li> <li>Iman Karim</li> <li>ismail ihsan b\u00fclb\u00fcl</li> <li>ItzAttila</li> <li>Ivan Efimov</li> <li>jakehl</li> <li>Jakub Kolc\u030ca\u0301r\u030c</li> <li>JamDon2</li> <li>James Reynolds</li> <li>Jan Skurovec</li> <li>Jari Vetoniemi</li> <li>Jason Toffaletti</li> <li>Jaulustus</li> <li>Jeff Mahoney</li> <li>Jennifer Player</li> <li>jeremy</li> <li>Jeremy Clark</li> <li>JigenD</li> <li>Jim Hays</li> <li>Johan Roxendal</li> <li>Johnathon Selstad</li> <li>Jonathan</li> <li>Jordan Hewitt</li> <li>Joseph Dries III</li> <li>Josh Corbett</li> <li>JPPhoto</li> <li>jspraul</li> <li>junzi</li> <li>Justin Wong</li> <li>Juuso V</li> <li>Kaspar Emanuel</li> <li>Katsuyuki-Karasawa</li> <li>Keerigan45</li> <li>Kent Keirsey</li> <li>Kevin Brack</li> <li>Kevin Coakley</li> <li>Kevin Gibbons</li> <li>Kevin Schaul</li> <li>Kevin Turner</li> <li>Kieran Klaassen</li> <li>krummrey</li> <li>Kyle</li> <li>Kyle Lacy</li> <li>Kyle Schouviller</li> <li>Lawrence Norton</li> <li>LemonDouble</li> <li>Leo Pasanen</li> <li>Lincoln Stein</li> <li>LoganPederson</li> <li>Lynne Whitehorn</li> <li>majick</li> <li>Marco Labarile</li> <li>Marta Nahorniuk</li> <li>Martin Kristiansen</li> <li>Mary Hipp</li> <li>maryhipp</li> <li>Mary Hipp Rogers</li> <li>mastercaster</li> <li>mastercaster9000</li> <li>Matthias Wild</li> <li>mauwii</li> <li>michaelk71</li> <li>mickr777</li> <li>Mihai</li> <li>Mihail Dumitrescu</li> <li>Mikhail Tishin</li> <li>Millun Atluri</li> <li>Minjune Song</li> <li>Mitchell Allain</li> <li>mitien</li> <li>mofuzz</li> <li>Muhammad Usama</li> <li>Name</li> <li>_nderscore</li> <li>Neil Wang</li> <li>nekowaiz</li> <li>nemuruibai</li> <li>Netzer R</li> <li>Nicholas Koh</li> <li>Nicholas K\u00f6rfer</li> <li>nicolai256</li> <li>Niek van der Maas</li> <li>noodlebox</li> <li>Nuno Cora\u00e7\u00e3o</li> <li>ofirkris</li> <li>Olivier Louvignes</li> <li>owenvincent</li> <li>pand4z31</li> <li>Patrick Esser</li> <li>Patrick Tien</li> <li>Patrick von Platen</li> <li>Paul Curry</li> <li>Paul Sajna</li> <li>pejotr</li> <li>Peter Baylies</li> <li>Peter Lin</li> <li>plucked</li> <li>prixt</li> <li>psychedelicious</li> <li>psychedelicious@windows</li> <li>Rainer Bernhardt</li> <li>Riccardo Giovanetti</li> <li>Rich Jones</li> <li>rmagur1203</li> <li>Rob Baines</li> <li>Robert Bolender</li> <li>Robin Rombach</li> <li>Rohan Barar</li> <li>Rohinish</li> <li>rpagliuca</li> <li>rromb</li> <li>Rupesh Sreeraman</li> <li>Ryan</li> <li>Ryan Cao</li> <li>Ryan Dick</li> <li>Saifeddine</li> <li>Saifeddine ALOUI</li> <li>Sam</li> <li>SammCheese</li> <li>Sam McLeod</li> <li>Sammy</li> <li>sammyf</li> <li>Samuel Husso</li> <li>Saurav Maheshkar</li> <li>Scott Lahteine</li> <li>Sean McLellan</li> <li>Sebastian Aigner</li> <li>Sergey Borisov</li> <li>Sergey Krashevich</li> <li>Shapor Naghibzadeh</li> <li>Shawn Zhong</li> <li>Simona Liliac</li> <li>Simon Vans-Colina</li> <li>skunkworxdark</li> <li>slashtechno</li> <li>SoheilRezaei</li> <li>Song, Pengcheng</li> <li>spezialspezial</li> <li>ssantos</li> <li>StAlKeR7779</li> <li>Stefan Tobler</li> <li>Stephan Koglin-Fischer</li> <li>SteveCaruso</li> <li>Steve Martinelli</li> <li>Steven Frank</li> <li>Surisen</li> <li>System X - Files</li> <li>Taylor Kems</li> <li>techicode</li> <li>techybrain-dev</li> <li>tesseractcat</li> <li>thealanle</li> <li>Thomas</li> <li>tildebyte</li> <li>Tim Cabbage</li> <li>Tom</li> <li>Tom Elovi Spruce</li> <li>Tom Gouville</li> <li>tomosuto</li> <li>Travco</li> <li>Travis Palmer</li> <li>tyler</li> <li>unknown</li> <li>user1</li> <li>vedant-3010</li> <li>Vedant Madane</li> <li>veprogames</li> <li>wa.code</li> <li>wfng92</li> <li>whjms</li> <li>whosawhatsis</li> <li>Will</li> <li>William Becher</li> <li>William Chong</li> <li>Wilson E. Alvarez</li> <li>woweenie</li> <li>Wubbbi</li> <li>xra</li> <li>Yeung Yiu Hung</li> <li>ymgenesis</li> <li>Yorzaren</li> <li>Yosuke Shinya</li> <li>yun saki</li> <li>ZachNagengast</li> <li>Zadagu</li> <li>zeptofine</li> <li>Zerdoumi</li> <li>\u0412\u0430\u0441\u044f\u043d\u0430\u0442\u043e\u0440</li> <li>\u51af\u4e0d\u6e38</li> <li>\u5510\u6fa4 \u514b\u5e78</li> </ul>"},{"location":"other/CONTRIBUTORS/#original-compvis-stable-diffusion-authors","title":"Original CompVis (Stable Diffusion) Authors","text":"<ul> <li>Robin Rombach</li> <li>Patrick von Platen</li> <li>ablattmann</li> <li>Patrick Esser</li> <li>owenvincent</li> <li>apolinario</li> <li>Charles Packer</li> </ul> <p>If you have contributed and don't see your name on the list of contributors, please let one of the collaborators know about the omission, or feel free to make a pull request.</p>"},{"location":"other/README-CompViz/","title":"README from CompViz/stable-diffusion","text":"<p>Stable Diffusion was made possible thanks to a collaboration with Stability AI and Runway and builds upon our previous work:</p> <p>High-Resolution Image Synthesis with Latent Diffusion Models Robin Rombach*, Andreas Blattmann*, Dominik Lorenz\\, Patrick Esser, Bj\u00f6rn Ommer</p>"},{"location":"other/README-CompViz/#cvpr-22-oral","title":"CVPR '22 Oral","text":"<p>which is available on GitHub. PDF at arXiv. Please also visit our Project page.</p> <p> Stable Diffusion is a latent text-to-image diffusion model. Thanks to a generous compute donation from Stability AI and support from LAION, we were able to train a Latent Diffusion Model on 512x512 images from a subset of the LAION-5B database. Similar to Google's Imagen, this model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See this section below and the model card.</p>"},{"location":"other/README-CompViz/#requirements","title":"Requirements","text":"<p>A suitable conda environment named <code>ldm</code> can be created and activated with:</p> <pre><code>conda env create\nconda activate ldm\n</code></pre> <p>Note that the first line may be abbreviated <code>conda env create</code>, since conda will look for <code>environment.yml</code> by default.</p> <p>You can also update an existing latent diffusion environment by running</p> <pre><code>conda install pytorch torchvision -c pytorch\npip install transformers==4.19.2\npip install -e .\n</code></pre>"},{"location":"other/README-CompViz/#stable-diffusion-v1","title":"Stable Diffusion v1","text":"<p>Stable Diffusion v1 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 860M UNet and CLIP ViT-L/14 text encoder for the diffusion model. The model was pretrained on 256x256 images and then finetuned on 512x512 images.</p> <p>*Note: Stable Diffusion v1 is a general text-to-image diffusion model and therefore mirrors biases and (mis-)conceptions that are present in its training data. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding model card. Research into the safe deployment of general text-to-image models is an ongoing effort. To prevent misuse and harm, we currently provide access to the checkpoints only for academic research purposes upon request. This is an experiment in safe and community-driven publication of a capable and general text-to-image model. We are working on a public release with a more permissive license that also incorporates ethical considerations.*</p> <p>Request access to Stable Diffusion v1 checkpoints for academic research</p>"},{"location":"other/README-CompViz/#weights","title":"Weights","text":"<p>We currently provide three checkpoints, <code>sd-v1-1.ckpt</code>, <code>sd-v1-2.ckpt</code> and <code>sd-v1-3.ckpt</code>, which were trained as follows,</p> <ul> <li><code>sd-v1-1.ckpt</code>: 237k steps at resolution <code>256x256</code> on   laion2B-en. 194k steps at   resolution <code>512x512</code> on   laion-high-resolution   (170M examples from LAION-5B with resolution <code>&gt;= 1024x1024</code>).</li> <li><code>sd-v1-2.ckpt</code>: Resumed from <code>sd-v1-1.ckpt</code>. 515k steps at resolution   <code>512x512</code> on \"laion-improved-aesthetics\" (a subset of laion2B-en, filtered to   images with an original size <code>&gt;= 512x512</code>, estimated aesthetics score <code>&gt; 5.0</code>,   and an estimated watermark probability <code>&lt; 0.5</code>. The watermark estimate is from   the LAION-5B metadata, the aesthetics score is estimated using an   improved aesthetics estimator).</li> <li><code>sd-v1-3.ckpt</code>: Resumed from <code>sd-v1-2.ckpt</code>. 195k steps at resolution   <code>512x512</code> on \"laion-improved-aesthetics\" and 10\\% dropping of the   text-conditioning to improve   classifier-free guidance sampling.</li> </ul> <p>Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 PLMS sampling steps show the relative improvements of the checkpoints: </p>"},{"location":"other/README-CompViz/#text-to-image-with-stable-diffusion","title":"Text-to-Image with Stable Diffusion","text":"<p>Stable Diffusion is a latent diffusion model conditioned on the (non-pooled) text embeddings of a CLIP ViT-L/14 text encoder.</p>"},{"location":"other/README-CompViz/#sampling-script","title":"Sampling Script","text":"<p>After obtaining the weights, link them</p> <pre><code>mkdir -p models/ldm/stable-diffusion-v1/\nln -s &lt;path/to/model.ckpt&gt; models/ldm/stable-diffusion-v1/model.ckpt\n</code></pre> <p>and sample with</p> <pre><code>python scripts/txt2img.py --prompt \"a photograph of an astronaut riding a horse\" --plms\n</code></pre> <p>By default, this uses a guidance scale of <code>--scale 7.5</code>, Katherine Crowson's implementation of the PLMS sampler, and renders images of size 512x512 (which it was trained on) in 50 steps. All supported arguments are listed below (type <code>python scripts/txt2img.py --help</code>).</p> <pre><code>usage: txt2img.py [-h] [--prompt [PROMPT]] [--outdir [OUTDIR]] [--skip_grid] [--skip_save] [--ddim_steps DDIM_STEPS] [--plms] [--laion400m] [--fixed_code] [--ddim_eta DDIM_ETA] [--n_iter N_ITER] [--H H] [--W W] [--C C] [--f F] [--n_samples N_SAMPLES] [--n_rows N_ROWS]\n                  [--scale SCALE] [--from-file FROM_FILE] [--config CONFIG] [--ckpt CKPT] [--seed SEED] [--precision {full,autocast}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --prompt [PROMPT]     the prompt to render\n  --outdir [OUTDIR]     dir to write results to\n  --skip_grid           do not save a grid, only individual samples. Helpful when evaluating lots of samples\n  --skip_save           do not save individual samples. For speed measurements.\n  --ddim_steps DDIM_STEPS\n                        number of ddim sampling steps\n  --plms                use plms sampling\n  --laion400m           uses the LAION400M model\n  --fixed_code          if enabled, uses the same starting code across samples\n  --ddim_eta DDIM_ETA   ddim eta (eta=0.0 corresponds to deterministic sampling\n  --n_iter N_ITER       sample this often\n  --H H                 image height, in pixel space\n  --W W                 image width, in pixel space\n  --C C                 latent channels\n  --f F                 downsampling factor\n  --n_samples N_SAMPLES\n                        how many samples to produce for each given prompt. A.k.a. batch size\n                        (note that the seeds for each image in the batch will be unavailable)\n  --n_rows N_ROWS       rows in the grid (default: n_samples)\n  --scale SCALE         unconditional guidance scale: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty))\n  --from-file FROM_FILE\n                        if specified, load prompts from this file\n  --config CONFIG       path to config which constructs model\n  --ckpt CKPT           path to checkpoint of model\n  --seed SEED           the seed (for reproducible sampling)\n  --precision {full,autocast}\n                        evaluate at this precision\n</code></pre> <p>Note: The inference config for all v1 versions is designed to be used with EMA-only checkpoints. For this reason <code>use_ema=False</code> is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights. If you want to examine the effect of EMA vs no EMA, we provide \"full\" checkpoints which contain both types of weights. For these, <code>use_ema=False</code> will load and use the non-EMA weights.</p>"},{"location":"other/README-CompViz/#diffusers-integration","title":"Diffusers Integration","text":"<p>Another way to download and sample Stable Diffusion is by using the diffusers library</p> <pre><code># make sure you're logged in with `huggingface-cli login`\nfrom torch import autocast\nfrom diffusers import StableDiffusionPipeline, LMSDiscreteScheduler\n\npipe = StableDiffusionPipeline.from_pretrained(\n    \"CompVis/stable-diffusion-v1-3-diffusers\",\n    use_auth_token=True\n)\n\nprompt = \"a photo of an astronaut riding a horse on mars\"\nwith autocast(\"cuda\"):\n    image = pipe(prompt)[\"sample\"][0]\n\nimage.save(\"astronaut_rides_horse.png\")\n</code></pre>"},{"location":"other/README-CompViz/#image-modification-with-stable-diffusion","title":"Image Modification with Stable Diffusion","text":"<p>By using a diffusion-denoising mechanism as first proposed by SDEdit, the model can be used for different tasks such as text-guided image-to-image translation and upscaling. Similar to the txt2img sampling script, we provide a script to perform image modification with Stable Diffusion.</p> <p>The following describes an example where a rough sketch made in Pinta is converted into a detailed artwork.</p> <pre><code>python scripts/img2img.py --prompt \"A fantasy landscape, trending on artstation\" --init-img &lt;path-to-img.jpg&gt; --strength 0.8\n</code></pre> <p>Here, strength is a value between 0.0 and 1.0, that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. See the following example.</p> <p>Input</p> <p></p> <p>Outputs</p> <p> </p> <p>This procedure can, for example, also be used to upscale samples from the base model.</p>"},{"location":"other/README-CompViz/#comments","title":"Comments","text":"<ul> <li> <p>Our codebase for the diffusion models builds heavily on   OpenAI's ADM codebase and   https://github.com/lucidrains/denoising-diffusion-pytorch.   Thanks for open-sourcing!</p> </li> <li> <p>The implementation of the transformer encoder is from   x-transformers by   lucidrains.</p> </li> </ul>"},{"location":"other/README-CompViz/#bibtex","title":"BibTeX","text":"<pre><code>@misc{rombach2021highresolution,\n      title={High-Resolution Image Synthesis with Latent Diffusion Models},\n      author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Bj\u00f6rn Ommer},\n      year={2021},\n      eprint={2112.10752},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n</code></pre>"}]}