name: Release

on:
  workflow_dispatch:
    inputs:
      publish_package:
        description: 'Publish build on PyPI'
        required: true
        default: false
        type: boolean
      skip_env_check:
        description: 'Skip tag check'
        required: true
        default: false
        type: boolean

jobs:
  check-frontend:
    uses: ./.github/workflows/check-frontend.yml
  check-backend:
    uses: ./.github/workflows/check-backend.yml
  pytest:
    uses: ./.github/workflows/pytest.yml
  release:
    runs-on: ubuntu-22.04
    needs: [check-frontend, check-backend, pytest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: Install frontend dependencies
        run: pnpm install --prefer-frozen-lockfile
        working-directory: invokeai/frontend/web

      - name: Install python build dependencies
        run: pip install --upgrade build twine

      - uses: samuelcolvin/check-python-version@v4
        id: check-python-version
        with:
          skip_env_check: ${{ github.event.inputs.skip_env_check }}
          version_file_path: invokeai/version/invokeai_version.py

      - name: Run create_installer.sh
        id: create_installer
        run: ./create_installer.sh
        working-directory: installer

      - name: Upload build as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_installer.outputs.INSTALLER_NAME }}
          path: installer/${{ steps.create_installer.outputs.INSTALLER_NAME }}
