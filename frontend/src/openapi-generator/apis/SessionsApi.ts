/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BodyAppendInvocationApiV1SessionsSessionIdInvocationsPost,
  HTTPValidationError,
  InvocationGraph,
} from '../models';
import {
    BodyAppendInvocationApiV1SessionsSessionIdInvocationsPostFromJSON,
    BodyAppendInvocationApiV1SessionsSessionIdInvocationsPostToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InvocationGraphFromJSON,
    InvocationGraphToJSON,
} from '../models';

export interface AppendInvocationApiV1SessionsSessionIdInvocationsPostRequest {
    sessionId: string;
    bodyAppendInvocationApiV1SessionsSessionIdInvocationsPost: BodyAppendInvocationApiV1SessionsSessionIdInvocationsPost;
}

export interface CreateSessionApiV1SessionsPostRequest {
    invocationGraph?: InvocationGraph;
}

export interface GetSessionApiV1SessionsSessionIdGetRequest {
    sessionId: string;
}

export interface InvokeSessionApiV1SessionsSessionIdInvokePutRequest {
    sessionId: string;
    all?: boolean;
}

export interface ListSessionsApiV1SessionsGetRequest {
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class SessionsApi extends runtime.BaseAPI {

    /**
     * Append Invocation
     */
    async appendInvocationApiV1SessionsSessionIdInvocationsPostRaw(requestParameters: AppendInvocationApiV1SessionsSessionIdInvocationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling appendInvocationApiV1SessionsSessionIdInvocationsPost.');
        }

        if (requestParameters.bodyAppendInvocationApiV1SessionsSessionIdInvocationsPost === null || requestParameters.bodyAppendInvocationApiV1SessionsSessionIdInvocationsPost === undefined) {
            throw new runtime.RequiredError('bodyAppendInvocationApiV1SessionsSessionIdInvocationsPost','Required parameter requestParameters.bodyAppendInvocationApiV1SessionsSessionIdInvocationsPost was null or undefined when calling appendInvocationApiV1SessionsSessionIdInvocationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/sessions/{session_id}/invocations`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyAppendInvocationApiV1SessionsSessionIdInvocationsPostToJSON(requestParameters.bodyAppendInvocationApiV1SessionsSessionIdInvocationsPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Append Invocation
     */
    async appendInvocationApiV1SessionsSessionIdInvocationsPost(requestParameters: AppendInvocationApiV1SessionsSessionIdInvocationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.appendInvocationApiV1SessionsSessionIdInvocationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new sessions, optionally initializing it with an invocation graph
     * Create Session
     */
    async createSessionApiV1SessionsPostRaw(requestParameters: CreateSessionApiV1SessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/sessions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvocationGraphToJSON(requestParameters.invocationGraph),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates a new sessions, optionally initializing it with an invocation graph
     * Create Session
     */
    async createSessionApiV1SessionsPost(requestParameters: CreateSessionApiV1SessionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createSessionApiV1SessionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single session
     * Get Session
     */
    async getSessionApiV1SessionsSessionIdGetRaw(requestParameters: GetSessionApiV1SessionsSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionApiV1SessionsSessionIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sessions/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a single session
     * Get Session
     */
    async getSessionApiV1SessionsSessionIdGet(requestParameters: GetSessionApiV1SessionsSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSessionApiV1SessionsSessionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invokes the session
     * Invoke Session
     */
    async invokeSessionApiV1SessionsSessionIdInvokePutRaw(requestParameters: InvokeSessionApiV1SessionsSessionIdInvokePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling invokeSessionApiV1SessionsSessionIdInvokePut.');
        }

        const queryParameters: any = {};

        if (requestParameters.all !== undefined) {
            queryParameters['all'] = requestParameters.all;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sessions/{session_id}/invoke`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Invokes the session
     * Invoke Session
     */
    async invokeSessionApiV1SessionsSessionIdInvokePut(requestParameters: InvokeSessionApiV1SessionsSessionIdInvokePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.invokeSessionApiV1SessionsSessionIdInvokePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paged list of sessions ids
     * List Sessions
     */
    async listSessionsApiV1SessionsGetRaw(requestParameters: ListSessionsApiV1SessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sessions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a paged list of sessions ids
     * List Sessions
     */
    async listSessionsApiV1SessionsGet(requestParameters: ListSessionsApiV1SessionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listSessionsApiV1SessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
