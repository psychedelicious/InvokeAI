/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BodyAppendInvocationApiV1ContextsContextIdInvocationsPost,
  HTTPValidationError,
  InvocationGraph,
} from '../models';
import {
    BodyAppendInvocationApiV1ContextsContextIdInvocationsPostFromJSON,
    BodyAppendInvocationApiV1ContextsContextIdInvocationsPostToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InvocationGraphFromJSON,
    InvocationGraphToJSON,
} from '../models';

export interface AppendInvocationApiV1ContextsContextIdInvocationsPostRequest {
    contextId: string;
    bodyAppendInvocationApiV1ContextsContextIdInvocationsPost: BodyAppendInvocationApiV1ContextsContextIdInvocationsPost;
}

export interface CreateContextApiV1ContextsPostRequest {
    invocationGraph?: InvocationGraph;
}

export interface GetContextApiV1ContextsContextIdGetRequest {
    contextId: string;
}

export interface InvokeContextApiV1ContextsContextIdInvokePutRequest {
    contextId: string;
    all?: boolean;
}

export interface ListContextsApiV1ContextsGetRequest {
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class ContextsApi extends runtime.BaseAPI {

    /**
     * Append Invocation
     */
    async appendInvocationApiV1ContextsContextIdInvocationsPostRaw(requestParameters: AppendInvocationApiV1ContextsContextIdInvocationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling appendInvocationApiV1ContextsContextIdInvocationsPost.');
        }

        if (requestParameters.bodyAppendInvocationApiV1ContextsContextIdInvocationsPost === null || requestParameters.bodyAppendInvocationApiV1ContextsContextIdInvocationsPost === undefined) {
            throw new runtime.RequiredError('bodyAppendInvocationApiV1ContextsContextIdInvocationsPost','Required parameter requestParameters.bodyAppendInvocationApiV1ContextsContextIdInvocationsPost was null or undefined when calling appendInvocationApiV1ContextsContextIdInvocationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/contexts/{context_id}/invocations`.replace(`{${"context_id"}}`, encodeURIComponent(String(requestParameters.contextId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyAppendInvocationApiV1ContextsContextIdInvocationsPostToJSON(requestParameters.bodyAppendInvocationApiV1ContextsContextIdInvocationsPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Append Invocation
     */
    async appendInvocationApiV1ContextsContextIdInvocationsPost(requestParameters: AppendInvocationApiV1ContextsContextIdInvocationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.appendInvocationApiV1ContextsContextIdInvocationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new context, optionally initializing it with an invocation graph
     * Create Context
     */
    async createContextApiV1ContextsPostRaw(requestParameters: CreateContextApiV1ContextsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/contexts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvocationGraphToJSON(requestParameters.invocationGraph),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates a new context, optionally initializing it with an invocation graph
     * Create Context
     */
    async createContextApiV1ContextsPost(requestParameters: CreateContextApiV1ContextsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createContextApiV1ContextsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single context
     * Get Context
     */
    async getContextApiV1ContextsContextIdGetRaw(requestParameters: GetContextApiV1ContextsContextIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling getContextApiV1ContextsContextIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/contexts/{context_id}`.replace(`{${"context_id"}}`, encodeURIComponent(String(requestParameters.contextId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a single context
     * Get Context
     */
    async getContextApiV1ContextsContextIdGet(requestParameters: GetContextApiV1ContextsContextIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getContextApiV1ContextsContextIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invokes the context
     * Invoke Context
     */
    async invokeContextApiV1ContextsContextIdInvokePutRaw(requestParameters: InvokeContextApiV1ContextsContextIdInvokePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling invokeContextApiV1ContextsContextIdInvokePut.');
        }

        const queryParameters: any = {};

        if (requestParameters.all !== undefined) {
            queryParameters['all'] = requestParameters.all;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/contexts/{context_id}/invoke`.replace(`{${"context_id"}}`, encodeURIComponent(String(requestParameters.contextId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Invokes the context
     * Invoke Context
     */
    async invokeContextApiV1ContextsContextIdInvokePut(requestParameters: InvokeContextApiV1ContextsContextIdInvokePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.invokeContextApiV1ContextsContextIdInvokePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paged list of context ids
     * List Contexts
     */
    async listContextsApiV1ContextsGetRaw(requestParameters: ListContextsApiV1ContextsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/contexts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a paged list of context ids
     * List Contexts
     */
    async listContextsApiV1ContextsGet(requestParameters: ListContextsApiV1ContextsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listContextsApiV1ContextsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
