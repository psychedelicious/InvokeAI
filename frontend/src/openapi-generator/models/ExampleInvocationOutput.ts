/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageOutput } from './ImageOutput';
import {
    ImageOutputFromJSON,
    ImageOutputFromJSONTyped,
    ImageOutputToJSON,
} from './ImageOutput';

/**
 * Give the invocation output a type. Must be unique among all invocations.
 * @export
 * @interface ExampleInvocationOutput
 */
export interface ExampleInvocationOutput {
    /**
     * 
     * @type {string}
     * @memberof ExampleInvocationOutput
     */
    type?: ExampleInvocationOutputTypeEnum;
    /**
     * A string output
     * @type {string}
     * @memberof ExampleInvocationOutput
     */
    stringOutput: string;
    /**
     * An integer output
     * @type {number}
     * @memberof ExampleInvocationOutput
     */
    integerOutput: number;
    /**
     * A float output
     * @type {number}
     * @memberof ExampleInvocationOutput
     */
    floatOutput: number;
    /**
     * 
     * @type {ImageOutput}
     * @memberof ExampleInvocationOutput
     */
    imageOutput: ImageOutput;
    /**
     * A boolean output
     * @type {boolean}
     * @memberof ExampleInvocationOutput
     */
    booleanOutput: boolean;
}


/**
 * @export
 */
export const ExampleInvocationOutputTypeEnum = {
    ExampleInvocationOutput: 'example_invocation_output'
} as const;
export type ExampleInvocationOutputTypeEnum = typeof ExampleInvocationOutputTypeEnum[keyof typeof ExampleInvocationOutputTypeEnum];


/**
 * Check if a given object implements the ExampleInvocationOutput interface.
 */
export function instanceOfExampleInvocationOutput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "stringOutput" in value;
    isInstance = isInstance && "integerOutput" in value;
    isInstance = isInstance && "floatOutput" in value;
    isInstance = isInstance && "imageOutput" in value;
    isInstance = isInstance && "booleanOutput" in value;

    return isInstance;
}

export function ExampleInvocationOutputFromJSON(json: any): ExampleInvocationOutput {
    return ExampleInvocationOutputFromJSONTyped(json, false);
}

export function ExampleInvocationOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExampleInvocationOutput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'stringOutput': json['string_output'],
        'integerOutput': json['integer_output'],
        'floatOutput': json['float_output'],
        'imageOutput': ImageOutputFromJSON(json['image_output']),
        'booleanOutput': json['boolean_output'],
    };
}

export function ExampleInvocationOutputToJSON(value?: ExampleInvocationOutput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'string_output': value.stringOutput,
        'integer_output': value.integerOutput,
        'float_output': value.floatOutput,
        'image_output': ImageOutputToJSON(value.imageOutput),
        'boolean_output': value.booleanOutput,
    };
}

