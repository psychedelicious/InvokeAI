/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Generates an image using text2img.
 * @export
 * @interface TextToImageInvocation
 */
export interface TextToImageInvocation {
    [key: string]: any | any;
    /**
     * The id of this node. Must be unique among all nodes.
     * @type {string}
     * @memberof TextToImageInvocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TextToImageInvocation
     */
    type?: TextToImageInvocationTypeEnum;
    /**
     * The prompt to generate an image from
     * @type {string}
     * @memberof TextToImageInvocation
     */
    prompt?: string;
    /**
     * The seed to use (0 for a random seed)
     * @type {number}
     * @memberof TextToImageInvocation
     */
    seed?: number;
    /**
     * The number of steps to use to generate the image
     * @type {number}
     * @memberof TextToImageInvocation
     */
    steps?: number;
    /**
     * The width of the resulting image
     * @type {number}
     * @memberof TextToImageInvocation
     */
    width?: number;
    /**
     * The height of the resulting image
     * @type {number}
     * @memberof TextToImageInvocation
     */
    height?: number;
    /**
     * The Classifier-Free Guidance, higher values may result in a result closer to the prompt
     * @type {number}
     * @memberof TextToImageInvocation
     */
    cfgScale?: number;
    /**
     * The sampler to use
     * @type {string}
     * @memberof TextToImageInvocation
     */
    samplerName?: TextToImageInvocationSamplerNameEnum;
    /**
     * Whether or not to generate an image that can tile without seams
     * @type {boolean}
     * @memberof TextToImageInvocation
     */
    seamless?: boolean;
    /**
     * The model to use (currently ignored)
     * @type {string}
     * @memberof TextToImageInvocation
     */
    model?: string;
    /**
     * Whether or not to produce progress images during generation
     * @type {boolean}
     * @memberof TextToImageInvocation
     */
    progressImages?: boolean;
}


/**
 * @export
 */
export const TextToImageInvocationTypeEnum = {
    Txt2img: 'txt2img'
} as const;
export type TextToImageInvocationTypeEnum = typeof TextToImageInvocationTypeEnum[keyof typeof TextToImageInvocationTypeEnum];

/**
 * @export
 */
export const TextToImageInvocationSamplerNameEnum = {
    Ddim: 'ddim',
    Plms: 'plms',
    KLms: 'k_lms',
    KDpm2: 'k_dpm_2',
    KDpm2A: 'k_dpm_2_a',
    KEuler: 'k_euler',
    KEulerA: 'k_euler_a',
    KHeun: 'k_heun'
} as const;
export type TextToImageInvocationSamplerNameEnum = typeof TextToImageInvocationSamplerNameEnum[keyof typeof TextToImageInvocationSamplerNameEnum];


/**
 * Check if a given object implements the TextToImageInvocation interface.
 */
export function instanceOfTextToImageInvocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function TextToImageInvocationFromJSON(json: any): TextToImageInvocation {
    return TextToImageInvocationFromJSONTyped(json, false);
}

export function TextToImageInvocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextToImageInvocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'prompt': !exists(json, 'prompt') ? undefined : json['prompt'],
        'seed': !exists(json, 'seed') ? undefined : json['seed'],
        'steps': !exists(json, 'steps') ? undefined : json['steps'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'cfgScale': !exists(json, 'cfg_scale') ? undefined : json['cfg_scale'],
        'samplerName': !exists(json, 'sampler_name') ? undefined : json['sampler_name'],
        'seamless': !exists(json, 'seamless') ? undefined : json['seamless'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'progressImages': !exists(json, 'progress_images') ? undefined : json['progress_images'],
    };
}

export function TextToImageInvocationToJSON(value?: TextToImageInvocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'id': value.id,
        'type': value.type,
        'prompt': value.prompt,
        'seed': value.seed,
        'steps': value.steps,
        'width': value.width,
        'height': value.height,
        'cfg_scale': value.cfgScale,
        'sampler_name': value.samplerName,
        'seamless': value.seamless,
        'model': value.model,
        'progress_images': value.progressImages,
    };
}

