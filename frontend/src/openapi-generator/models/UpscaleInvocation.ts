/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
} from './Image';

/**
 * Upscales an image.
 * @export
 * @interface UpscaleInvocation
 */
export interface UpscaleInvocation {
    [key: string]: any | any;
    /**
     * The id of this node. Must be unique among all nodes.
     * @type {string}
     * @memberof UpscaleInvocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UpscaleInvocation
     */
    type?: UpscaleInvocationTypeEnum;
    /**
     * 
     * @type {Image}
     * @memberof UpscaleInvocation
     */
    image?: Image;
    /**
     * The strength
     * @type {number}
     * @memberof UpscaleInvocation
     */
    strength?: number;
    /**
     * The upscale level
     * @type {number}
     * @memberof UpscaleInvocation
     */
    level?: UpscaleInvocationLevelEnum;
}


/**
 * @export
 */
export const UpscaleInvocationTypeEnum = {
    Upscale: 'upscale'
} as const;
export type UpscaleInvocationTypeEnum = typeof UpscaleInvocationTypeEnum[keyof typeof UpscaleInvocationTypeEnum];

/**
 * @export
 */
export const UpscaleInvocationLevelEnum = {
    NUMBER_2: 2,
    NUMBER_4: 4
} as const;
export type UpscaleInvocationLevelEnum = typeof UpscaleInvocationLevelEnum[keyof typeof UpscaleInvocationLevelEnum];


/**
 * Check if a given object implements the UpscaleInvocation interface.
 */
export function instanceOfUpscaleInvocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UpscaleInvocationFromJSON(json: any): UpscaleInvocation {
    return UpscaleInvocationFromJSONTyped(json, false);
}

export function UpscaleInvocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpscaleInvocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'image': !exists(json, 'image') ? undefined : ImageFromJSON(json['image']),
        'strength': !exists(json, 'strength') ? undefined : json['strength'],
        'level': !exists(json, 'level') ? undefined : json['level'],
    };
}

export function UpscaleInvocationToJSON(value?: UpscaleInvocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'id': value.id,
        'type': value.type,
        'image': ImageToJSON(value.image),
        'strength': value.strength,
        'level': value.level,
    };
}

