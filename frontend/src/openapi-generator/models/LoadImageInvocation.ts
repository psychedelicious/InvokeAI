/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Load an image from a filename and provide it as output.
 * @export
 * @interface LoadImageInvocation
 */
export interface LoadImageInvocation {
    [key: string]: any | any;
    /**
     * The id of this node. Must be unique among all nodes.
     * @type {string}
     * @memberof LoadImageInvocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof LoadImageInvocation
     */
    type?: LoadImageInvocationTypeEnum;
    /**
     * The URI from which to load the image
     * @type {string}
     * @memberof LoadImageInvocation
     */
    uri: string;
}


/**
 * @export
 */
export const LoadImageInvocationTypeEnum = {
    LoadImage: 'load_image'
} as const;
export type LoadImageInvocationTypeEnum = typeof LoadImageInvocationTypeEnum[keyof typeof LoadImageInvocationTypeEnum];


/**
 * Check if a given object implements the LoadImageInvocation interface.
 */
export function instanceOfLoadImageInvocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "uri" in value;

    return isInstance;
}

export function LoadImageInvocationFromJSON(json: any): LoadImageInvocation {
    return LoadImageInvocationFromJSONTyped(json, false);
}

export function LoadImageInvocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoadImageInvocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'uri': json['uri'],
    };
}

export function LoadImageInvocationToJSON(value?: LoadImageInvocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'id': value.id,
        'type': value.type,
        'uri': value.uri,
    };
}

