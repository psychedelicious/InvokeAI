/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExampleInvocation } from './ExampleInvocation';
import {
    ExampleInvocationFromJSON,
    ExampleInvocationFromJSONTyped,
    ExampleInvocationToJSON,
} from './ExampleInvocation';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
} from './Image';
import type { ImageInput1 } from './ImageInput1';
import {
    ImageInput1FromJSON,
    ImageInput1FromJSONTyped,
    ImageInput1ToJSON,
} from './ImageInput1';
import type { ImageToImageInvocation } from './ImageToImageInvocation';
import {
    ImageToImageInvocationFromJSON,
    ImageToImageInvocationFromJSONTyped,
    ImageToImageInvocationToJSON,
} from './ImageToImageInvocation';
import type { LoadImageInvocation } from './LoadImageInvocation';
import {
    LoadImageInvocationFromJSON,
    LoadImageInvocationFromJSONTyped,
    LoadImageInvocationToJSON,
} from './LoadImageInvocation';
import type { RestoreFaceInvocation } from './RestoreFaceInvocation';
import {
    RestoreFaceInvocationFromJSON,
    RestoreFaceInvocationFromJSONTyped,
    RestoreFaceInvocationToJSON,
} from './RestoreFaceInvocation';
import type { ShowImageInvocation } from './ShowImageInvocation';
import {
    ShowImageInvocationFromJSON,
    ShowImageInvocationFromJSONTyped,
    ShowImageInvocationToJSON,
} from './ShowImageInvocation';
import type { SimplePromptInvocation } from './SimplePromptInvocation';
import {
    SimplePromptInvocationFromJSON,
    SimplePromptInvocationFromJSONTyped,
    SimplePromptInvocationToJSON,
} from './SimplePromptInvocation';
import type { TextToImageInvocation } from './TextToImageInvocation';
import {
    TextToImageInvocationFromJSON,
    TextToImageInvocationFromJSONTyped,
    TextToImageInvocationToJSON,
} from './TextToImageInvocation';
import type { UpscaleInvocation } from './UpscaleInvocation';
import {
    UpscaleInvocationFromJSON,
    UpscaleInvocationFromJSONTyped,
    UpscaleInvocationToJSON,
} from './UpscaleInvocation';

/**
 * The invocation to add
 * @export
 * @interface Invocation
 */
export interface Invocation {
    /**
     * The id of this node. Must be unique among all nodes.
     * @type {string}
     * @memberof Invocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Invocation
     */
    type?: InvocationTypeEnum;
    /**
     * The URI from which to load the image
     * @type {string}
     * @memberof Invocation
     */
    uri: string;
    /**
     * 
     * @type {Image}
     * @memberof Invocation
     */
    image?: Image;
    /**
     * The prompt to generate an image from
     * @type {string}
     * @memberof Invocation
     */
    prompt?: string;
    /**
     * The seed to use (0 for a random seed)
     * @type {number}
     * @memberof Invocation
     */
    seed?: number;
    /**
     * The number of steps to use to generate the image
     * @type {number}
     * @memberof Invocation
     */
    steps?: number;
    /**
     * The width of the resulting image
     * @type {number}
     * @memberof Invocation
     */
    width?: number;
    /**
     * The height of the resulting image
     * @type {number}
     * @memberof Invocation
     */
    height?: number;
    /**
     * The Classifier-Free Guidance, higher values may result in a result closer to the prompt
     * @type {number}
     * @memberof Invocation
     */
    cfgScale?: number;
    /**
     * The sampler to use
     * @type {string}
     * @memberof Invocation
     */
    samplerName?: InvocationSamplerNameEnum;
    /**
     * Whether or not to generate an image that can tile without seams
     * @type {boolean}
     * @memberof Invocation
     */
    seamless?: boolean;
    /**
     * The model to use (currently ignored)
     * @type {string}
     * @memberof Invocation
     */
    model?: string;
    /**
     * Whether or not to produce progress images during generation
     * @type {boolean}
     * @memberof Invocation
     */
    progressImages?: boolean;
    /**
     * The strength of the original image
     * @type {number}
     * @memberof Invocation
     */
    strength?: number;
    /**
     * The upscale level
     * @type {number}
     * @memberof Invocation
     */
    level?: InvocationLevelEnum;
    /**
     * This is a string input.
     * @type {string}
     * @memberof Invocation
     */
    stringInput1: string;
    /**
     * This is an integer input.
     * @type {number}
     * @memberof Invocation
     */
    integerInput1: number;
    /**
     * This one is a float.
     * @type {number}
     * @memberof Invocation
     */
    floatInput1: number;
    /**
     * 
     * @type {ImageInput1}
     * @memberof Invocation
     */
    imageInput1: ImageInput1;
    /**
     * Booleans are also valid input types.
     * @type {boolean}
     * @memberof Invocation
     */
    booleanInput1: boolean;
    /**
     * This is a string input.
     * @type {string}
     * @memberof Invocation
     */
    stringInput2?: string;
    /**
     * This is an integer input.
     * @type {number}
     * @memberof Invocation
     */
    integerInput2?: number;
    /**
     * This is an integer masquerading as a percentage.
     * @type {number}
     * @memberof Invocation
     */
    integerInput3?: number;
    /**
     * This one is a float.
     * @type {number}
     * @memberof Invocation
     */
    floatInput2?: number;
    /**
     * Booleans are also valid input types.
     * @type {boolean}
     * @memberof Invocation
     */
    booleanInput2?: boolean;
    /**
     * Whether or not the result should be fit to the aspect ratio of the input image
     * @type {boolean}
     * @memberof Invocation
     */
    fit?: boolean;
}


/**
 * @export
 */
export const InvocationTypeEnum = {
    Img2img: 'img2img'
} as const;
export type InvocationTypeEnum = typeof InvocationTypeEnum[keyof typeof InvocationTypeEnum];

/**
 * @export
 */
export const InvocationSamplerNameEnum = {
    Ddim: 'ddim',
    Plms: 'plms',
    KLms: 'k_lms',
    KDpm2: 'k_dpm_2',
    KDpm2A: 'k_dpm_2_a',
    KEuler: 'k_euler',
    KEulerA: 'k_euler_a',
    KHeun: 'k_heun'
} as const;
export type InvocationSamplerNameEnum = typeof InvocationSamplerNameEnum[keyof typeof InvocationSamplerNameEnum];

/**
 * @export
 */
export const InvocationLevelEnum = {
    NUMBER_2: 2,
    NUMBER_4: 4
} as const;
export type InvocationLevelEnum = typeof InvocationLevelEnum[keyof typeof InvocationLevelEnum];


/**
 * Check if a given object implements the Invocation interface.
 */
export function instanceOfInvocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "uri" in value;
    isInstance = isInstance && "stringInput1" in value;
    isInstance = isInstance && "integerInput1" in value;
    isInstance = isInstance && "floatInput1" in value;
    isInstance = isInstance && "imageInput1" in value;
    isInstance = isInstance && "booleanInput1" in value;

    return isInstance;
}

export function InvocationFromJSON(json: any): Invocation {
    return InvocationFromJSONTyped(json, false);
}

export function InvocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'uri': json['uri'],
        'image': !exists(json, 'image') ? undefined : ImageFromJSON(json['image']),
        'prompt': !exists(json, 'prompt') ? undefined : json['prompt'],
        'seed': !exists(json, 'seed') ? undefined : json['seed'],
        'steps': !exists(json, 'steps') ? undefined : json['steps'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'cfgScale': !exists(json, 'cfg_scale') ? undefined : json['cfg_scale'],
        'samplerName': !exists(json, 'sampler_name') ? undefined : json['sampler_name'],
        'seamless': !exists(json, 'seamless') ? undefined : json['seamless'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'progressImages': !exists(json, 'progress_images') ? undefined : json['progress_images'],
        'strength': !exists(json, 'strength') ? undefined : json['strength'],
        'level': !exists(json, 'level') ? undefined : json['level'],
        'stringInput1': json['string_input_1'],
        'integerInput1': json['integer_input_1'],
        'floatInput1': json['float_input_1'],
        'imageInput1': ImageInput1FromJSON(json['image_input_1']),
        'booleanInput1': json['boolean_input_1'],
        'stringInput2': !exists(json, 'string_input_2') ? undefined : json['string_input_2'],
        'integerInput2': !exists(json, 'integer_input_2') ? undefined : json['integer_input_2'],
        'integerInput3': !exists(json, 'integer_input_3') ? undefined : json['integer_input_3'],
        'floatInput2': !exists(json, 'float_input_2') ? undefined : json['float_input_2'],
        'booleanInput2': !exists(json, 'boolean_input_2') ? undefined : json['boolean_input_2'],
        'fit': !exists(json, 'fit') ? undefined : json['fit'],
    };
}

export function InvocationToJSON(value?: Invocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'uri': value.uri,
        'image': ImageToJSON(value.image),
        'prompt': value.prompt,
        'seed': value.seed,
        'steps': value.steps,
        'width': value.width,
        'height': value.height,
        'cfg_scale': value.cfgScale,
        'sampler_name': value.samplerName,
        'seamless': value.seamless,
        'model': value.model,
        'progress_images': value.progressImages,
        'strength': value.strength,
        'level': value.level,
        'string_input_1': value.stringInput1,
        'integer_input_1': value.integerInput1,
        'float_input_1': value.floatInput1,
        'image_input_1': ImageInput1ToJSON(value.imageInput1),
        'boolean_input_1': value.booleanInput1,
        'string_input_2': value.stringInput2,
        'integer_input_2': value.integerInput2,
        'integer_input_3': value.integerInput3,
        'float_input_2': value.floatInput2,
        'boolean_input_2': value.booleanInput2,
        'fit': value.fit,
    };
}

