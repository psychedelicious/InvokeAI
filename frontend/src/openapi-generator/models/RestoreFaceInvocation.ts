/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
} from './Image';

/**
 * Restores faces in an image.
 * @export
 * @interface RestoreFaceInvocation
 */
export interface RestoreFaceInvocation {
    [key: string]: any | any;
    /**
     * The id of this node. Must be unique among all nodes.
     * @type {string}
     * @memberof RestoreFaceInvocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RestoreFaceInvocation
     */
    type?: RestoreFaceInvocationTypeEnum;
    /**
     * 
     * @type {Image}
     * @memberof RestoreFaceInvocation
     */
    image?: Image;
    /**
     * The strength of the restoration
     * @type {number}
     * @memberof RestoreFaceInvocation
     */
    strength?: number;
}


/**
 * @export
 */
export const RestoreFaceInvocationTypeEnum = {
    RestoreFace: 'restore_face'
} as const;
export type RestoreFaceInvocationTypeEnum = typeof RestoreFaceInvocationTypeEnum[keyof typeof RestoreFaceInvocationTypeEnum];


/**
 * Check if a given object implements the RestoreFaceInvocation interface.
 */
export function instanceOfRestoreFaceInvocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function RestoreFaceInvocationFromJSON(json: any): RestoreFaceInvocation {
    return RestoreFaceInvocationFromJSONTyped(json, false);
}

export function RestoreFaceInvocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestoreFaceInvocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'image': !exists(json, 'image') ? undefined : ImageFromJSON(json['image']),
        'strength': !exists(json, 'strength') ? undefined : json['strength'],
    };
}

export function RestoreFaceInvocationToJSON(value?: RestoreFaceInvocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'id': value.id,
        'type': value.type,
        'image': ImageToJSON(value.image),
        'strength': value.strength,
    };
}

