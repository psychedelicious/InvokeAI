/* tslint:disable */
/* eslint-disable */
/**
 * Invoke AI
 * An API for invoking AI image operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageInput1 } from './ImageInput1';
import {
    ImageInput1FromJSON,
    ImageInput1FromJSONTyped,
    ImageInput1ToJSON,
} from './ImageInput1';

/**
 * Give the invovation a type. Must be unique among all invocations.
 * @export
 * @interface ExampleInvocation
 */
export interface ExampleInvocation {
    [key: string]: any | any;
    /**
     * The id of this node. Must be unique among all nodes.
     * @type {string}
     * @memberof ExampleInvocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ExampleInvocation
     */
    type?: ExampleInvocationTypeEnum;
    /**
     * This is a string input.
     * @type {string}
     * @memberof ExampleInvocation
     */
    stringInput1: string;
    /**
     * This is an integer input.
     * @type {number}
     * @memberof ExampleInvocation
     */
    integerInput1: number;
    /**
     * This one is a float.
     * @type {number}
     * @memberof ExampleInvocation
     */
    floatInput1: number;
    /**
     * 
     * @type {ImageInput1}
     * @memberof ExampleInvocation
     */
    imageInput1: ImageInput1;
    /**
     * Booleans are also valid input types.
     * @type {boolean}
     * @memberof ExampleInvocation
     */
    booleanInput1: boolean;
    /**
     * This is a string input.
     * @type {string}
     * @memberof ExampleInvocation
     */
    stringInput2?: string;
    /**
     * This is an integer input.
     * @type {number}
     * @memberof ExampleInvocation
     */
    integerInput2?: number;
    /**
     * This is an integer masquerading as a percentage.
     * @type {number}
     * @memberof ExampleInvocation
     */
    integerInput3?: number;
    /**
     * This one is a float.
     * @type {number}
     * @memberof ExampleInvocation
     */
    floatInput2?: number;
    /**
     * Booleans are also valid input types.
     * @type {boolean}
     * @memberof ExampleInvocation
     */
    booleanInput2?: boolean;
}


/**
 * @export
 */
export const ExampleInvocationTypeEnum = {
    ExampleInvocation: 'example_invocation'
} as const;
export type ExampleInvocationTypeEnum = typeof ExampleInvocationTypeEnum[keyof typeof ExampleInvocationTypeEnum];


/**
 * Check if a given object implements the ExampleInvocation interface.
 */
export function instanceOfExampleInvocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "stringInput1" in value;
    isInstance = isInstance && "integerInput1" in value;
    isInstance = isInstance && "floatInput1" in value;
    isInstance = isInstance && "imageInput1" in value;
    isInstance = isInstance && "booleanInput1" in value;

    return isInstance;
}

export function ExampleInvocationFromJSON(json: any): ExampleInvocation {
    return ExampleInvocationFromJSONTyped(json, false);
}

export function ExampleInvocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExampleInvocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'stringInput1': json['string_input_1'],
        'integerInput1': json['integer_input_1'],
        'floatInput1': json['float_input_1'],
        'imageInput1': ImageInput1FromJSON(json['image_input_1']),
        'booleanInput1': json['boolean_input_1'],
        'stringInput2': !exists(json, 'string_input_2') ? undefined : json['string_input_2'],
        'integerInput2': !exists(json, 'integer_input_2') ? undefined : json['integer_input_2'],
        'integerInput3': !exists(json, 'integer_input_3') ? undefined : json['integer_input_3'],
        'floatInput2': !exists(json, 'float_input_2') ? undefined : json['float_input_2'],
        'booleanInput2': !exists(json, 'boolean_input_2') ? undefined : json['boolean_input_2'],
    };
}

export function ExampleInvocationToJSON(value?: ExampleInvocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'id': value.id,
        'type': value.type,
        'string_input_1': value.stringInput1,
        'integer_input_1': value.integerInput1,
        'float_input_1': value.floatInput1,
        'image_input_1': ImageInput1ToJSON(value.imageInput1),
        'boolean_input_1': value.booleanInput1,
        'string_input_2': value.stringInput2,
        'integer_input_2': value.integerInput2,
        'integer_input_3': value.integerInput3,
        'float_input_2': value.floatInput2,
        'boolean_input_2': value.booleanInput2,
    };
}

